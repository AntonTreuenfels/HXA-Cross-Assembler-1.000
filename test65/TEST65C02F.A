; Hobby Cross-Assembler HXA65 Error Test 65C02f
; 65C02\Instruction Set
; error: 65C02 Group Rep Instructions, Caught First Pass

; generated by MODE65.PY - Fri Nov 29 14:29:53 2024


; warning(s):

; errors(s):

; fatal:

; -------------------------------

		.listfile
		.errfile

		.maxerr	10000		; increase default count

; -------------------------------

		.cpu	65C02
		.org	$1000

; -------------------------------

; backward reference

bak08	.equ	$12
bak16	.equ	$1234
bak24	.equ	$456789
bak32	.equ	$89ABCDEF

; -------------------------------

:	; backward ref for ADC

		; check ADC
		; 7 mnemonics with modes ['ab', 'abx', 'aby', 'imm', 'zp', 'zpi', 'zpiy', 'zpx', 'zpxi']
		; AND
		; CMP
		; EOR
		; LDA
		; ORA
		; SBC

		.echo **PASS  ADC  ab

		ADC 	$1234
		ADC 	bak16
		ADC 	fwd16

		.echo **PASS  ADC  abi  (as zpi)

		Adc 	($1234)
		Adc 	(bak16)
		Adc 	(fwd16)

		.echo **PASS  ADC  abx

		ADC 	$1234,X
		ADC 	bak16,x
		ADC 	fwd16,X

		.echo **PASS  ADC  abxi  (as zpxi)

		Adc 	($1234,X)
		Adc 	(bak16,x)
		Adc 	(fwd16,X)

		.echo **PASS  ADC  aby

		ADC 	$1234,Y
		ADC 	bak16,y
		ADC 	fwd16,Y

		.echo **FAIL  ADC  acc

		adc 	A
		adc 	a

		.echo **PASS  ADC  imm

		ADC 	#$12
		ADC 	#bak08
		ADC 	#fwd08

		.echo **FAIL  ADC  imp

		adc 

		.echo **PASS  ADC  pcr  (as ab)

		Adc 	:+
		Adc 	-
		Adc 	+
		Adc 	:-

		.echo **PASS  ADC  zp

		ADC 	$12
		ADC 	bak08
		Adc 	fwd08   	; (absolute)

		.echo **PASS  ADC  zpi

		ADC 	($12)
		ADC 	(bak08)
		ADC 	(fwd08)

		.echo **PASS  ADC  zpiy

		ADC 	($12),Y
		ADC 	(bak08),y
		ADC 	(fwd08),Y

		.echo **PASS  ADC  zpx

		ADC 	$12,X
		ADC 	bak08,x
		Adc 	fwd08,X 	; (absolute)

		.echo **PASS  ADC  zpxi

		ADC 	($12,X)
		ADC 	(bak08,x)
		ADC 	(fwd08,X)

		.echo **PASS  ADC  zpy  (as aby)

		Adc 	$12,Y
		Adc 	bak08,y
		Adc 	fwd08,Y


:	; forward ref for ADC

; -------------------------------

:	; backward ref for ASL

		; check ASL
		; 6 mnemonics with modes ['ab', 'abx', 'acc', 'imp', 'zp', 'zpx']
		; DEC
		; INC
		; LSR
		; ROL
		; ROR

		.echo **PASS  ASL  ab

		ASL 	$1234
		ASL 	bak16
		ASL 	fwd16

		.echo **FAIL  ASL  abi

		asl 	($1234)
		asl 	(bak16)
		asl 	(fwd16)

		.echo **PASS  ASL  abx

		ASL 	$1234,X
		ASL 	bak16,x
		ASL 	fwd16,X

		.echo **FAIL  ASL  abxi

		asl 	($1234,X)
		asl 	(bak16,x)
		asl 	(fwd16,X)

		.echo **FAIL  ASL  aby

		asl 	$1234,Y
		asl 	bak16,y
		asl 	fwd16,Y

		.echo **PASS  ASL  acc

		ASL 	A
		ASL 	a

		.echo **FAIL  ASL  imm

		asl 	#$12
		asl 	#bak08
		asl 	#fwd08

		.echo **PASS  ASL  imp

		ASL 

		.echo **PASS  ASL  pcr  (as ab)

		Asl 	:+
		Asl 	-
		Asl 	+
		Asl 	:-

		.echo **PASS  ASL  zp

		ASL 	$12
		ASL 	bak08
		Asl 	fwd08   	; (absolute)

		.echo **FAIL  ASL  zpi

		asl 	($12)
		asl 	(bak08)
		asl 	(fwd08)

		.echo **FAIL  ASL  zpiy

		asl 	($12),Y
		asl 	(bak08),y
		asl 	(fwd08),Y

		.echo **PASS  ASL  zpx

		ASL 	$12,X
		ASL 	bak08,x
		Asl 	fwd08,X 	; (absolute)

		.echo **FAIL  ASL  zpxi

		asl 	($12,X)
		asl 	(bak08,x)
		asl 	(fwd08,X)

		.echo **FAIL  ASL  zpy

		asl 	$12,Y
		asl 	bak08,y
		asl 	fwd08,Y


:	; forward ref for ASL

; -------------------------------

:	; backward ref for BCC

		; check BCC
		; 11 mnemonics with modes ['pcr']
		; BCS
		; BEQ
		; BGE
		; BLT
		; BMI
		; BNE
		; BPL
		; BRA
		; BVC
		; BVS

		.echo **PASS  BCC  ab  (as pcr)

		Bcc 	$1234
		Bcc 	bak16
		Bcc 	fwd16

		.echo **FAIL  BCC  abi

		bcc 	($1234)
		bcc 	(bak16)
		bcc 	(fwd16)

		.echo **FAIL  BCC  abx

		bcc 	$1234,X
		bcc 	bak16,x
		bcc 	fwd16,X

		.echo **FAIL  BCC  abxi

		bcc 	($1234,X)
		bcc 	(bak16,x)
		bcc 	(fwd16,X)

		.echo **FAIL  BCC  aby

		bcc 	$1234,Y
		bcc 	bak16,y
		bcc 	fwd16,Y

		.echo **FAIL  BCC  acc

		bcc 	A
		bcc 	a

		.echo **FAIL  BCC  imm

		bcc 	#$12
		bcc 	#bak08
		bcc 	#fwd08

		.echo **FAIL  BCC  imp

		bcc 

		.echo **PASS  BCC  pcr

		BCC 	:+
		BCC 	-
		BCC 	+
		BCC 	:-

		.echo **PASS  BCC  zp  (as pcr)

		Bcc 	$12
		Bcc 	bak08
		Bcc 	fwd08

		.echo **FAIL  BCC  zpi

		bcc 	($12)
		bcc 	(bak08)
		bcc 	(fwd08)

		.echo **FAIL  BCC  zpiy

		bcc 	($12),Y
		bcc 	(bak08),y
		bcc 	(fwd08),Y

		.echo **FAIL  BCC  zpx

		bcc 	$12,X
		bcc 	bak08,x
		bcc 	fwd08,X

		.echo **FAIL  BCC  zpxi

		bcc 	($12,X)
		bcc 	(bak08,x)
		bcc 	(fwd08,X)

		.echo **FAIL  BCC  zpy

		bcc 	$12,Y
		bcc 	bak08,y
		bcc 	fwd08,Y


:	; forward ref for BCC

; -------------------------------

:	; backward ref for BIT

		; check BIT
		; 2 mnemonics with modes ['ab', 'abx', 'imm', 'zp', 'zpx']
		; LDY

		.echo **PASS  BIT  ab

		BIT 	$1234
		BIT 	bak16
		BIT 	fwd16

		.echo **FAIL  BIT  abi

		bit 	($1234)
		bit 	(bak16)
		bit 	(fwd16)

		.echo **PASS  BIT  abx

		BIT 	$1234,X
		BIT 	bak16,x
		BIT 	fwd16,X

		.echo **FAIL  BIT  abxi

		bit 	($1234,X)
		bit 	(bak16,x)
		bit 	(fwd16,X)

		.echo **FAIL  BIT  aby

		bit 	$1234,Y
		bit 	bak16,y
		bit 	fwd16,Y

		.echo **FAIL  BIT  acc

		bit 	A
		bit 	a

		.echo **PASS  BIT  imm

		BIT 	#$12
		BIT 	#bak08
		BIT 	#fwd08

		.echo **FAIL  BIT  imp

		bit 

		.echo **PASS  BIT  pcr  (as ab)

		Bit 	:+
		Bit 	-
		Bit 	+
		Bit 	:-

		.echo **PASS  BIT  zp

		BIT 	$12
		BIT 	bak08
		Bit 	fwd08   	; (absolute)

		.echo **FAIL  BIT  zpi

		bit 	($12)
		bit 	(bak08)
		bit 	(fwd08)

		.echo **FAIL  BIT  zpiy

		bit 	($12),Y
		bit 	(bak08),y
		bit 	(fwd08),Y

		.echo **PASS  BIT  zpx

		BIT 	$12,X
		BIT 	bak08,x
		Bit 	fwd08,X 	; (absolute)

		.echo **FAIL  BIT  zpxi

		bit 	($12,X)
		bit 	(bak08,x)
		bit 	(fwd08,X)

		.echo **FAIL  BIT  zpy

		bit 	$12,Y
		bit 	bak08,y
		bit 	fwd08,Y


:	; forward ref for BIT

; -------------------------------

:	; backward ref for BRK

		; check BRK
		; 1 mnemonics with modes ['imm', 'imp', 'zp']

		.echo **PASS  BRK  ab  (as zp)

		Brk 	$1234
		Brk 	bak16
		Brk 	fwd16

		.echo **FAIL  BRK  abi

		brk 	($1234)
		brk 	(bak16)
		brk 	(fwd16)

		.echo **FAIL  BRK  abx

		brk 	$1234,X
		brk 	bak16,x
		brk 	fwd16,X

		.echo **FAIL  BRK  abxi

		brk 	($1234,X)
		brk 	(bak16,x)
		brk 	(fwd16,X)

		.echo **FAIL  BRK  aby

		brk 	$1234,Y
		brk 	bak16,y
		brk 	fwd16,Y

		.echo **FAIL  BRK  acc

		brk 	A
		brk 	a

		.echo **PASS  BRK  imm

		BRK 	#$12
		BRK 	#bak08
		BRK 	#fwd08

		.echo **PASS  BRK  imp

		BRK 

		.echo **PASS  BRK  pcr  (as zp)

		Brk 	:+
		Brk 	-
		Brk 	+
		Brk 	:-

		.echo **PASS  BRK  zp

		BRK 	$12
		BRK 	bak08
		BRK 	fwd08

		.echo **FAIL  BRK  zpi

		brk 	($12)
		brk 	(bak08)
		brk 	(fwd08)

		.echo **FAIL  BRK  zpiy

		brk 	($12),Y
		brk 	(bak08),y
		brk 	(fwd08),Y

		.echo **FAIL  BRK  zpx

		brk 	$12,X
		brk 	bak08,x
		brk 	fwd08,X

		.echo **FAIL  BRK  zpxi

		brk 	($12,X)
		brk 	(bak08,x)
		brk 	(fwd08,X)

		.echo **FAIL  BRK  zpy

		brk 	$12,Y
		brk 	bak08,y
		brk 	fwd08,Y


:	; forward ref for BRK

; -------------------------------

:	; backward ref for CLC

		; check CLC
		; 30 mnemonics with modes ['imp']
		; CLD
		; CLI
		; CLV
		; DEA
		; DEX
		; DEY
		; INA
		; INX
		; INY
		; NOP
		; PHA
		; PHP
		; PHX
		; PHY
		; PLA
		; PLP
		; PLX
		; PLY
		; RTI
		; RTS
		; SEC
		; SED
		; SEI
		; TAX
		; TAY
		; TSX
		; TXA
		; TXS
		; TYA

		.echo **FAIL  CLC  ab

		clc 	$1234
		clc 	bak16
		clc 	fwd16

		.echo **FAIL  CLC  abi

		clc 	($1234)
		clc 	(bak16)
		clc 	(fwd16)

		.echo **FAIL  CLC  abx

		clc 	$1234,X
		clc 	bak16,x
		clc 	fwd16,X

		.echo **FAIL  CLC  abxi

		clc 	($1234,X)
		clc 	(bak16,x)
		clc 	(fwd16,X)

		.echo **FAIL  CLC  aby

		clc 	$1234,Y
		clc 	bak16,y
		clc 	fwd16,Y

		.echo **FAIL  CLC  acc

		clc 	A
		clc 	a

		.echo **FAIL  CLC  imm

		clc 	#$12
		clc 	#bak08
		clc 	#fwd08

		.echo **PASS  CLC  imp

		CLC 

		.echo **FAIL  CLC  pcr

		clc 	:+
		clc 	-
		clc 	+
		clc 	:-

		.echo **FAIL  CLC  zp

		clc 	$12
		clc 	bak08
		clc 	fwd08

		.echo **FAIL  CLC  zpi

		clc 	($12)
		clc 	(bak08)
		clc 	(fwd08)

		.echo **FAIL  CLC  zpiy

		clc 	($12),Y
		clc 	(bak08),y
		clc 	(fwd08),Y

		.echo **FAIL  CLC  zpx

		clc 	$12,X
		clc 	bak08,x
		clc 	fwd08,X

		.echo **FAIL  CLC  zpxi

		clc 	($12,X)
		clc 	(bak08,x)
		clc 	(fwd08,X)

		.echo **FAIL  CLC  zpy

		clc 	$12,Y
		clc 	bak08,y
		clc 	fwd08,Y


:	; forward ref for CLC

; -------------------------------

:	; backward ref for CPX

		; check CPX
		; 2 mnemonics with modes ['ab', 'imm', 'zp']
		; CPY

		.echo **PASS  CPX  ab

		CPX 	$1234
		CPX 	bak16
		CPX 	fwd16

		.echo **FAIL  CPX  abi

		cpx 	($1234)
		cpx 	(bak16)
		cpx 	(fwd16)

		.echo **FAIL  CPX  abx

		cpx 	$1234,X
		cpx 	bak16,x
		cpx 	fwd16,X

		.echo **FAIL  CPX  abxi

		cpx 	($1234,X)
		cpx 	(bak16,x)
		cpx 	(fwd16,X)

		.echo **FAIL  CPX  aby

		cpx 	$1234,Y
		cpx 	bak16,y
		cpx 	fwd16,Y

		.echo **FAIL  CPX  acc

		cpx 	A
		cpx 	a

		.echo **PASS  CPX  imm

		CPX 	#$12
		CPX 	#bak08
		CPX 	#fwd08

		.echo **FAIL  CPX  imp

		cpx 

		.echo **PASS  CPX  pcr  (as ab)

		Cpx 	:+
		Cpx 	-
		Cpx 	+
		Cpx 	:-

		.echo **PASS  CPX  zp

		CPX 	$12
		CPX 	bak08
		Cpx 	fwd08   	; (absolute)

		.echo **FAIL  CPX  zpi

		cpx 	($12)
		cpx 	(bak08)
		cpx 	(fwd08)

		.echo **FAIL  CPX  zpiy

		cpx 	($12),Y
		cpx 	(bak08),y
		cpx 	(fwd08),Y

		.echo **FAIL  CPX  zpx

		cpx 	$12,X
		cpx 	bak08,x
		cpx 	fwd08,X

		.echo **FAIL  CPX  zpxi

		cpx 	($12,X)
		cpx 	(bak08,x)
		cpx 	(fwd08,X)

		.echo **FAIL  CPX  zpy

		cpx 	$12,Y
		cpx 	bak08,y
		cpx 	fwd08,Y


:	; forward ref for CPX

; -------------------------------

:	; backward ref for JMP

		; check JMP
		; 1 mnemonics with modes ['ab', 'abi', 'abxi']

		.echo **PASS  JMP  ab

		JMP 	$1234
		JMP 	bak16
		JMP 	fwd16

		.echo **PASS  JMP  abi

		JMP 	($1234)
		JMP 	(bak16)
		JMP 	(fwd16)

		.echo **FAIL  JMP  abx

		jmp 	$1234,X
		jmp 	bak16,x
		jmp 	fwd16,X

		.echo **PASS  JMP  abxi

		JMP 	($1234,X)
		JMP 	(bak16,x)
		JMP 	(fwd16,X)

		.echo **FAIL  JMP  aby

		jmp 	$1234,Y
		jmp 	bak16,y
		jmp 	fwd16,Y

		.echo **FAIL  JMP  acc

		jmp 	A
		jmp 	a

		.echo **FAIL  JMP  imm

		jmp 	#$12
		jmp 	#bak08
		jmp 	#fwd08

		.echo **FAIL  JMP  imp

		jmp 

		.echo **PASS  JMP  pcr  (as ab)

		Jmp 	:+
		Jmp 	-
		Jmp 	+
		Jmp 	:-

		.echo **PASS  JMP  zp  (as ab)

		Jmp 	$12
		Jmp 	bak08
		Jmp 	fwd08

		.echo **PASS  JMP  zpi  (as abi)

		Jmp 	($12)
		Jmp 	(bak08)
		Jmp 	(fwd08)

		.echo **FAIL  JMP  zpiy

		jmp 	($12),Y
		jmp 	(bak08),y
		jmp 	(fwd08),Y

		.echo **FAIL  JMP  zpx

		jmp 	$12,X
		jmp 	bak08,x
		jmp 	fwd08,X

		.echo **PASS  JMP  zpxi  (as abxi)

		Jmp 	($12,X)
		Jmp 	(bak08,x)
		Jmp 	(fwd08,X)

		.echo **FAIL  JMP  zpy

		jmp 	$12,Y
		jmp 	bak08,y
		jmp 	fwd08,Y


:	; forward ref for JMP

; -------------------------------

:	; backward ref for JSR

		; check JSR
		; 1 mnemonics with modes ['ab']

		.echo **PASS  JSR  ab

		JSR 	$1234
		JSR 	bak16
		JSR 	fwd16

		.echo **FAIL  JSR  abi

		jsr 	($1234)
		jsr 	(bak16)
		jsr 	(fwd16)

		.echo **FAIL  JSR  abx

		jsr 	$1234,X
		jsr 	bak16,x
		jsr 	fwd16,X

		.echo **FAIL  JSR  abxi

		jsr 	($1234,X)
		jsr 	(bak16,x)
		jsr 	(fwd16,X)

		.echo **FAIL  JSR  aby

		jsr 	$1234,Y
		jsr 	bak16,y
		jsr 	fwd16,Y

		.echo **FAIL  JSR  acc

		jsr 	A
		jsr 	a

		.echo **FAIL  JSR  imm

		jsr 	#$12
		jsr 	#bak08
		jsr 	#fwd08

		.echo **FAIL  JSR  imp

		jsr 

		.echo **PASS  JSR  pcr  (as ab)

		Jsr 	:+
		Jsr 	-
		Jsr 	+
		Jsr 	:-

		.echo **PASS  JSR  zp  (as ab)

		Jsr 	$12
		Jsr 	bak08
		Jsr 	fwd08

		.echo **FAIL  JSR  zpi

		jsr 	($12)
		jsr 	(bak08)
		jsr 	(fwd08)

		.echo **FAIL  JSR  zpiy

		jsr 	($12),Y
		jsr 	(bak08),y
		jsr 	(fwd08),Y

		.echo **FAIL  JSR  zpx

		jsr 	$12,X
		jsr 	bak08,x
		jsr 	fwd08,X

		.echo **FAIL  JSR  zpxi

		jsr 	($12,X)
		jsr 	(bak08,x)
		jsr 	(fwd08,X)

		.echo **FAIL  JSR  zpy

		jsr 	$12,Y
		jsr 	bak08,y
		jsr 	fwd08,Y


:	; forward ref for JSR

; -------------------------------

:	; backward ref for LDX

		; check LDX
		; 1 mnemonics with modes ['ab', 'aby', 'imm', 'zp', 'zpy']

		.echo **PASS  LDX  ab

		LDX 	$1234
		LDX 	bak16
		LDX 	fwd16

		.echo **FAIL  LDX  abi

		ldx 	($1234)
		ldx 	(bak16)
		ldx 	(fwd16)

		.echo **FAIL  LDX  abx

		ldx 	$1234,X
		ldx 	bak16,x
		ldx 	fwd16,X

		.echo **FAIL  LDX  abxi

		ldx 	($1234,X)
		ldx 	(bak16,x)
		ldx 	(fwd16,X)

		.echo **PASS  LDX  aby

		LDX 	$1234,Y
		LDX 	bak16,y
		LDX 	fwd16,Y

		.echo **FAIL  LDX  acc

		ldx 	A
		ldx 	a

		.echo **PASS  LDX  imm

		LDX 	#$12
		LDX 	#bak08
		LDX 	#fwd08

		.echo **FAIL  LDX  imp

		ldx 

		.echo **PASS  LDX  pcr  (as ab)

		Ldx 	:+
		Ldx 	-
		Ldx 	+
		Ldx 	:-

		.echo **PASS  LDX  zp

		LDX 	$12
		LDX 	bak08
		Ldx 	fwd08   	; (absolute)

		.echo **FAIL  LDX  zpi

		ldx 	($12)
		ldx 	(bak08)
		ldx 	(fwd08)

		.echo **FAIL  LDX  zpiy

		ldx 	($12),Y
		ldx 	(bak08),y
		ldx 	(fwd08),Y

		.echo **FAIL  LDX  zpx

		ldx 	$12,X
		ldx 	bak08,x
		ldx 	fwd08,X

		.echo **FAIL  LDX  zpxi

		ldx 	($12,X)
		ldx 	(bak08,x)
		ldx 	(fwd08,X)

		.echo **PASS  LDX  zpy

		LDX 	$12,Y
		LDX 	bak08,y
		Ldx 	fwd08,Y 	; (absolute)


:	; forward ref for LDX

; -------------------------------

:	; backward ref for STA

		; check STA
		; 1 mnemonics with modes ['ab', 'abx', 'aby', 'zp', 'zpi', 'zpiy', 'zpx', 'zpxi']

		.echo **PASS  STA  ab

		STA 	$1234
		STA 	bak16
		STA 	fwd16

		.echo **PASS  STA  abi  (as zpi)

		Sta 	($1234)
		Sta 	(bak16)
		Sta 	(fwd16)

		.echo **PASS  STA  abx

		STA 	$1234,X
		STA 	bak16,x
		STA 	fwd16,X

		.echo **PASS  STA  abxi  (as zpxi)

		Sta 	($1234,X)
		Sta 	(bak16,x)
		Sta 	(fwd16,X)

		.echo **PASS  STA  aby

		STA 	$1234,Y
		STA 	bak16,y
		STA 	fwd16,Y

		.echo **FAIL  STA  acc

		sta 	A
		sta 	a

		.echo **FAIL  STA  imm

		sta 	#$12
		sta 	#bak08
		sta 	#fwd08

		.echo **FAIL  STA  imp

		sta 

		.echo **PASS  STA  pcr  (as ab)

		Sta 	:+
		Sta 	-
		Sta 	+
		Sta 	:-

		.echo **PASS  STA  zp

		STA 	$12
		STA 	bak08
		Sta 	fwd08   	; (absolute)

		.echo **PASS  STA  zpi

		STA 	($12)
		STA 	(bak08)
		STA 	(fwd08)

		.echo **PASS  STA  zpiy

		STA 	($12),Y
		STA 	(bak08),y
		STA 	(fwd08),Y

		.echo **PASS  STA  zpx

		STA 	$12,X
		STA 	bak08,x
		Sta 	fwd08,X 	; (absolute)

		.echo **PASS  STA  zpxi

		STA 	($12,X)
		STA 	(bak08,x)
		STA 	(fwd08,X)

		.echo **PASS  STA  zpy  (as aby)

		Sta 	$12,Y
		Sta 	bak08,y
		Sta 	fwd08,Y


:	; forward ref for STA

; -------------------------------

:	; backward ref for STX

		; check STX
		; 1 mnemonics with modes ['ab', 'zp', 'zpy']

		.echo **PASS  STX  ab

		STX 	$1234
		STX 	bak16
		STX 	fwd16

		.echo **FAIL  STX  abi

		stx 	($1234)
		stx 	(bak16)
		stx 	(fwd16)

		.echo **FAIL  STX  abx

		stx 	$1234,X
		stx 	bak16,x
		stx 	fwd16,X

		.echo **FAIL  STX  abxi

		stx 	($1234,X)
		stx 	(bak16,x)
		stx 	(fwd16,X)

		.echo **PASS  STX  aby  (as zpy)

		Stx 	$1234,Y
		Stx 	bak16,y
		Stx 	fwd16,Y

		.echo **FAIL  STX  acc

		stx 	A
		stx 	a

		.echo **FAIL  STX  imm

		stx 	#$12
		stx 	#bak08
		stx 	#fwd08

		.echo **FAIL  STX  imp

		stx 

		.echo **PASS  STX  pcr  (as ab)

		Stx 	:+
		Stx 	-
		Stx 	+
		Stx 	:-

		.echo **PASS  STX  zp

		STX 	$12
		STX 	bak08
		Stx 	fwd08   	; (absolute)

		.echo **FAIL  STX  zpi

		stx 	($12)
		stx 	(bak08)
		stx 	(fwd08)

		.echo **FAIL  STX  zpiy

		stx 	($12),Y
		stx 	(bak08),y
		stx 	(fwd08),Y

		.echo **FAIL  STX  zpx

		stx 	$12,X
		stx 	bak08,x
		stx 	fwd08,X

		.echo **FAIL  STX  zpxi

		stx 	($12,X)
		stx 	(bak08,x)
		stx 	(fwd08,X)

		.echo **PASS  STX  zpy

		STX 	$12,Y
		STX 	bak08,y
		STX 	fwd08,Y


:	; forward ref for STX

; -------------------------------

:	; backward ref for STY

		; check STY
		; 1 mnemonics with modes ['ab', 'zp', 'zpx']

		.echo **PASS  STY  ab

		STY 	$1234
		STY 	bak16
		STY 	fwd16

		.echo **FAIL  STY  abi

		sty 	($1234)
		sty 	(bak16)
		sty 	(fwd16)

		.echo **PASS  STY  abx  (as zpx)

		Sty 	$1234,X
		Sty 	bak16,x
		Sty 	fwd16,X

		.echo **FAIL  STY  abxi

		sty 	($1234,X)
		sty 	(bak16,x)
		sty 	(fwd16,X)

		.echo **FAIL  STY  aby

		sty 	$1234,Y
		sty 	bak16,y
		sty 	fwd16,Y

		.echo **FAIL  STY  acc

		sty 	A
		sty 	a

		.echo **FAIL  STY  imm

		sty 	#$12
		sty 	#bak08
		sty 	#fwd08

		.echo **FAIL  STY  imp

		sty 

		.echo **PASS  STY  pcr  (as ab)

		Sty 	:+
		Sty 	-
		Sty 	+
		Sty 	:-

		.echo **PASS  STY  zp

		STY 	$12
		STY 	bak08
		Sty 	fwd08   	; (absolute)

		.echo **FAIL  STY  zpi

		sty 	($12)
		sty 	(bak08)
		sty 	(fwd08)

		.echo **FAIL  STY  zpiy

		sty 	($12),Y
		sty 	(bak08),y
		sty 	(fwd08),Y

		.echo **PASS  STY  zpx

		STY 	$12,X
		STY 	bak08,x
		STY 	fwd08,X

		.echo **FAIL  STY  zpxi

		sty 	($12,X)
		sty 	(bak08,x)
		sty 	(fwd08,X)

		.echo **FAIL  STY  zpy

		sty 	$12,Y
		sty 	bak08,y
		sty 	fwd08,Y


:	; forward ref for STY

; -------------------------------

:	; backward ref for STZ

		; check STZ
		; 1 mnemonics with modes ['ab', 'abx', 'zp', 'zpx']

		.echo **PASS  STZ  ab

		STZ 	$1234
		STZ 	bak16
		STZ 	fwd16

		.echo **FAIL  STZ  abi

		stz 	($1234)
		stz 	(bak16)
		stz 	(fwd16)

		.echo **PASS  STZ  abx

		STZ 	$1234,X
		STZ 	bak16,x
		STZ 	fwd16,X

		.echo **FAIL  STZ  abxi

		stz 	($1234,X)
		stz 	(bak16,x)
		stz 	(fwd16,X)

		.echo **FAIL  STZ  aby

		stz 	$1234,Y
		stz 	bak16,y
		stz 	fwd16,Y

		.echo **FAIL  STZ  acc

		stz 	A
		stz 	a

		.echo **FAIL  STZ  imm

		stz 	#$12
		stz 	#bak08
		stz 	#fwd08

		.echo **FAIL  STZ  imp

		stz 

		.echo **PASS  STZ  pcr  (as ab)

		Stz 	:+
		Stz 	-
		Stz 	+
		Stz 	:-

		.echo **PASS  STZ  zp

		STZ 	$12
		STZ 	bak08
		Stz 	fwd08   	; (absolute)

		.echo **FAIL  STZ  zpi

		stz 	($12)
		stz 	(bak08)
		stz 	(fwd08)

		.echo **FAIL  STZ  zpiy

		stz 	($12),Y
		stz 	(bak08),y
		stz 	(fwd08),Y

		.echo **PASS  STZ  zpx

		STZ 	$12,X
		STZ 	bak08,x
		Stz 	fwd08,X 	; (absolute)

		.echo **FAIL  STZ  zpxi

		stz 	($12,X)
		stz 	(bak08,x)
		stz 	(fwd08,X)

		.echo **FAIL  STZ  zpy

		stz 	$12,Y
		stz 	bak08,y
		stz 	fwd08,Y


:	; forward ref for STZ

; -------------------------------

:	; backward ref for TRB

		; check TRB
		; 2 mnemonics with modes ['ab', 'zp']
		; TSB

		.echo **PASS  TRB  ab

		TRB 	$1234
		TRB 	bak16
		TRB 	fwd16

		.echo **FAIL  TRB  abi

		trb 	($1234)
		trb 	(bak16)
		trb 	(fwd16)

		.echo **FAIL  TRB  abx

		trb 	$1234,X
		trb 	bak16,x
		trb 	fwd16,X

		.echo **FAIL  TRB  abxi

		trb 	($1234,X)
		trb 	(bak16,x)
		trb 	(fwd16,X)

		.echo **FAIL  TRB  aby

		trb 	$1234,Y
		trb 	bak16,y
		trb 	fwd16,Y

		.echo **FAIL  TRB  acc

		trb 	A
		trb 	a

		.echo **FAIL  TRB  imm

		trb 	#$12
		trb 	#bak08
		trb 	#fwd08

		.echo **FAIL  TRB  imp

		trb 

		.echo **PASS  TRB  pcr  (as ab)

		Trb 	:+
		Trb 	-
		Trb 	+
		Trb 	:-

		.echo **PASS  TRB  zp

		TRB 	$12
		TRB 	bak08
		Trb 	fwd08   	; (absolute)

		.echo **FAIL  TRB  zpi

		trb 	($12)
		trb 	(bak08)
		trb 	(fwd08)

		.echo **FAIL  TRB  zpiy

		trb 	($12),Y
		trb 	(bak08),y
		trb 	(fwd08),Y

		.echo **FAIL  TRB  zpx

		trb 	$12,X
		trb 	bak08,x
		trb 	fwd08,X

		.echo **FAIL  TRB  zpxi

		trb 	($12,X)
		trb 	(bak08,x)
		trb 	(fwd08,X)

		.echo **FAIL  TRB  zpy

		trb 	$12,Y
		trb 	bak08,y
		trb 	fwd08,Y


:	; forward ref for TRB

; -------------------------------

; forward reference

fwd32	.equ	$89ABCDEF
fwd24	.equ	$456789
fwd16	.equ	$1234
fwd08	.equ	$12

; -------------------------------

		.end

; -------------------------------

; 262 pass
; 383 fail
