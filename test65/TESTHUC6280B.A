; Hobby Cross-Assembler HXA65 Test HUC6280b
; HUC6280\Instruction Set
; ok: HUC6280 Group Rep Instructions

; generated by MODE65.PY - Fri Nov 29 15:28:15 2024

; no errors to detect

; -------------------------------

		.listfile
		.errfile

		.maxerr	10000		; increase default count

; -------------------------------

		.cpu	HUC6280
		.org	$1000

; -------------------------------

; backward reference

bak08	.equ	$12
bak16	.equ	$1234
bak24	.equ	$456789
bak32	.equ	$89ABCDEF

; -------------------------------

		; check ADC
		; 7 mnemonics with modes ['ab', 'abx', 'aby', 'imm', 'zp', 'zpi', 'zpiy', 'zpx', 'zpxi']
		; AND
		; CMP
		; EOR
		; LDA
		; ORA
		; SBC

:	; backward ref for ADC

		; **PASS  ADC  ab

		ADC 	$1234
		ADC 	bak16
		ADC 	fwd16

		; **PASS  ADC  abx

		ADC 	$1234,X
		ADC 	bak16,x
		ADC 	fwd16,X

		; **PASS  ADC  aby

		ADC 	$1234,Y
		ADC 	bak16,y
		ADC 	fwd16,Y

		; **PASS  ADC  imm

		ADC 	#$12
		ADC 	#bak08
		ADC 	#fwd08

		; **PASS  ADC  zp

		ADC 	$12
		ADC 	bak08
		Adc 	fwd08   	; (absolute)

		; **PASS  ADC  zpi

		ADC 	($12)
		ADC 	(bak08)
		ADC 	(fwd08)

		; **PASS  ADC  zpiy

		ADC 	($12),Y
		ADC 	(bak08),y
		ADC 	(fwd08),Y

		; **PASS  ADC  zpx

		ADC 	$12,X
		ADC 	bak08,x
		Adc 	fwd08,X 	; (absolute)

		; **PASS  ADC  zpxi

		ADC 	($12,X)
		ADC 	(bak08,x)
		ADC 	(fwd08,X)


:	; forward ref for ADC

; -------------------------------

		; check ASL
		; 6 mnemonics with modes ['ab', 'abx', 'acc', 'imp', 'zp', 'zpx']
		; DEC
		; INC
		; LSR
		; ROL
		; ROR

:	; backward ref for ASL

		; **PASS  ASL  ab

		ASL 	$1234
		ASL 	bak16
		ASL 	fwd16

		; **PASS  ASL  abx

		ASL 	$1234,X
		ASL 	bak16,x
		ASL 	fwd16,X

		; **PASS  ASL  acc

		ASL 	A
		ASL 	a

		; **PASS  ASL  imp

		ASL 

		; **PASS  ASL  zp

		ASL 	$12
		ASL 	bak08
		Asl 	fwd08   	; (absolute)

		; **PASS  ASL  zpx

		ASL 	$12,X
		ASL 	bak08,x
		Asl 	fwd08,X 	; (absolute)


:	; forward ref for ASL

; -------------------------------

		; check BBR0
		; 16 mnemonics with modes ['zptr']
		; BBR1
		; BBR2
		; BBR3
		; BBR4
		; BBR5
		; BBR6
		; BBR7
		; BBS0
		; BBS1
		; BBS2
		; BBS3
		; BBS4
		; BBS5
		; BBS6
		; BBS7

:	; backward ref for BBR0

		; **PASS  BBR0  zptr

		BBR0	$12, :+
		BBR0	bak08, -
		BBR0	fwd08, +


:	; forward ref for BBR0

; -------------------------------

		; check BCC
		; 12 mnemonics with modes ['pcr']
		; BCS
		; BEQ
		; BGE
		; BLT
		; BMI
		; BNE
		; BPL
		; BRA
		; BSR
		; BVC
		; BVS

:	; backward ref for BCC

		; **PASS  BCC  pcr

		BCC 	:+
		BCC 	-
		BCC 	+
		BCC 	:-


:	; forward ref for BCC

; -------------------------------

		; check BIT
		; 2 mnemonics with modes ['ab', 'abx', 'imm', 'zp', 'zpx']
		; LDY

:	; backward ref for BIT

		; **PASS  BIT  ab

		BIT 	$1234
		BIT 	bak16
		BIT 	fwd16

		; **PASS  BIT  abx

		BIT 	$1234,X
		BIT 	bak16,x
		BIT 	fwd16,X

		; **PASS  BIT  imm

		BIT 	#$12
		BIT 	#bak08
		BIT 	#fwd08

		; **PASS  BIT  zp

		BIT 	$12
		BIT 	bak08
		Bit 	fwd08   	; (absolute)

		; **PASS  BIT  zpx

		BIT 	$12,X
		BIT 	bak08,x
		Bit 	fwd08,X 	; (absolute)


:	; forward ref for BIT

; -------------------------------

		; check BRK
		; 1 mnemonics with modes ['imm', 'imp', 'zp']

:	; backward ref for BRK

		; **PASS  BRK  imm

		BRK 	#$12
		BRK 	#bak08
		BRK 	#fwd08

		; **PASS  BRK  imp

		BRK 

		; **PASS  BRK  zp

		BRK 	$12
		BRK 	bak08
		BRK 	fwd08


:	; forward ref for BRK

; -------------------------------

		; check CLA
		; 39 mnemonics with modes ['imp']
		; CLC
		; CLD
		; CLI
		; CLV
		; CLX
		; CLY
		; CSH
		; CSL
		; DEA
		; DEX
		; DEY
		; INA
		; INX
		; INY
		; NOP
		; PHA
		; PHP
		; PHX
		; PHY
		; PLA
		; PLP
		; PLX
		; PLY
		; RTI
		; RTS
		; SAX
		; SAY
		; SEC
		; SED
		; SEI
		; SET
		; SXY
		; TAX
		; TAY
		; TSX
		; TXA
		; TXS
		; TYA

:	; backward ref for CLA

		; **PASS  CLA  imp

		CLA 


:	; forward ref for CLA

; -------------------------------

		; check CPX
		; 2 mnemonics with modes ['ab', 'imm', 'zp']
		; CPY

:	; backward ref for CPX

		; **PASS  CPX  ab

		CPX 	$1234
		CPX 	bak16
		CPX 	fwd16

		; **PASS  CPX  imm

		CPX 	#$12
		CPX 	#bak08
		CPX 	#fwd08

		; **PASS  CPX  zp

		CPX 	$12
		CPX 	bak08
		Cpx 	fwd08   	; (absolute)


:	; forward ref for CPX

; -------------------------------

		; check JMP
		; 1 mnemonics with modes ['ab', 'abi', 'abxi']

:	; backward ref for JMP

		; **PASS  JMP  ab

		JMP 	$1234
		JMP 	bak16
		JMP 	fwd16

		; **PASS  JMP  abi

		JMP 	($1234)
		JMP 	(bak16)
		JMP 	(fwd16)

		; **PASS  JMP  abxi

		JMP 	($1234,X)
		JMP 	(bak16,x)
		JMP 	(fwd16,X)


:	; forward ref for JMP

; -------------------------------

		; check JSR
		; 1 mnemonics with modes ['ab']

:	; backward ref for JSR

		; **PASS  JSR  ab

		JSR 	$1234
		JSR 	bak16
		JSR 	fwd16


:	; forward ref for JSR

; -------------------------------

		; check LDX
		; 1 mnemonics with modes ['ab', 'aby', 'imm', 'zp', 'zpy']

:	; backward ref for LDX

		; **PASS  LDX  ab

		LDX 	$1234
		LDX 	bak16
		LDX 	fwd16

		; **PASS  LDX  aby

		LDX 	$1234,Y
		LDX 	bak16,y
		LDX 	fwd16,Y

		; **PASS  LDX  imm

		LDX 	#$12
		LDX 	#bak08
		LDX 	#fwd08

		; **PASS  LDX  zp

		LDX 	$12
		LDX 	bak08
		Ldx 	fwd08   	; (absolute)

		; **PASS  LDX  zpy

		LDX 	$12,Y
		LDX 	bak08,y
		Ldx 	fwd08,Y 	; (absolute)


:	; forward ref for LDX

; -------------------------------

		; check RMB0
		; 16 mnemonics with modes ['zp']
		; RMB1
		; RMB2
		; RMB3
		; RMB4
		; RMB5
		; RMB6
		; RMB7
		; SMB0
		; SMB1
		; SMB2
		; SMB3
		; SMB4
		; SMB5
		; SMB6
		; SMB7

:	; backward ref for RMB0

		; **PASS  RMB0  zp

		RMB0	$12
		RMB0	bak08
		RMB0	fwd08


:	; forward ref for RMB0

; -------------------------------

		; check ST0
		; 5 mnemonics with modes ['imm']
		; ST1
		; ST2
		; TAM
		; TMA

:	; backward ref for ST0

		; **PASS  ST0  imm

		ST0 	#$12
		ST0 	#bak08
		ST0 	#fwd08


:	; forward ref for ST0

; -------------------------------

		; check STA
		; 1 mnemonics with modes ['ab', 'abx', 'aby', 'zp', 'zpi', 'zpiy', 'zpx', 'zpxi']

:	; backward ref for STA

		; **PASS  STA  ab

		STA 	$1234
		STA 	bak16
		STA 	fwd16

		; **PASS  STA  abx

		STA 	$1234,X
		STA 	bak16,x
		STA 	fwd16,X

		; **PASS  STA  aby

		STA 	$1234,Y
		STA 	bak16,y
		STA 	fwd16,Y

		; **PASS  STA  zp

		STA 	$12
		STA 	bak08
		Sta 	fwd08   	; (absolute)

		; **PASS  STA  zpi

		STA 	($12)
		STA 	(bak08)
		STA 	(fwd08)

		; **PASS  STA  zpiy

		STA 	($12),Y
		STA 	(bak08),y
		STA 	(fwd08),Y

		; **PASS  STA  zpx

		STA 	$12,X
		STA 	bak08,x
		Sta 	fwd08,X 	; (absolute)

		; **PASS  STA  zpxi

		STA 	($12,X)
		STA 	(bak08,x)
		STA 	(fwd08,X)


:	; forward ref for STA

; -------------------------------

		; check STX
		; 1 mnemonics with modes ['ab', 'zp', 'zpy']

:	; backward ref for STX

		; **PASS  STX  ab

		STX 	$1234
		STX 	bak16
		STX 	fwd16

		; **PASS  STX  zp

		STX 	$12
		STX 	bak08
		Stx 	fwd08   	; (absolute)

		; **PASS  STX  zpy

		STX 	$12,Y
		STX 	bak08,y
		STX 	fwd08,Y


:	; forward ref for STX

; -------------------------------

		; check STY
		; 1 mnemonics with modes ['ab', 'zp', 'zpx']

:	; backward ref for STY

		; **PASS  STY  ab

		STY 	$1234
		STY 	bak16
		STY 	fwd16

		; **PASS  STY  zp

		STY 	$12
		STY 	bak08
		Sty 	fwd08   	; (absolute)

		; **PASS  STY  zpx

		STY 	$12,X
		STY 	bak08,x
		STY 	fwd08,X


:	; forward ref for STY

; -------------------------------

		; check STZ
		; 1 mnemonics with modes ['ab', 'abx', 'zp', 'zpx']

:	; backward ref for STZ

		; **PASS  STZ  ab

		STZ 	$1234
		STZ 	bak16
		STZ 	fwd16

		; **PASS  STZ  abx

		STZ 	$1234,X
		STZ 	bak16,x
		STZ 	fwd16,X

		; **PASS  STZ  zp

		STZ 	$12
		STZ 	bak08
		Stz 	fwd08   	; (absolute)

		; **PASS  STZ  zpx

		STZ 	$12,X
		STZ 	bak08,x
		Stz 	fwd08,X 	; (absolute)


:	; forward ref for STZ

; -------------------------------

		; check TAI
		; 5 mnemonics with modes ['abxfr']
		; TDD
		; TIA
		; TII
		; TIN

:	; backward ref for TAI

		; **PASS  TAI  abxfr

		TAI 	$32, $1234, $5678
		TAI 	$1234, bak08, fwd08
		TAI 	fwd08, bak16, fwd16


:	; forward ref for TAI

; -------------------------------

		; check TRB
		; 2 mnemonics with modes ['ab', 'zp']
		; TSB

:	; backward ref for TRB

		; **PASS  TRB  ab

		TRB 	$1234
		TRB 	bak16
		TRB 	fwd16

		; **PASS  TRB  zp

		TRB 	$12
		TRB 	bak08
		Trb 	fwd08   	; (absolute)


:	; forward ref for TRB

; -------------------------------

		; check TST
		; 1 mnemonics with modes ['abimm', 'abimx', 'zpimm', 'zpimx']

:	; backward ref for TST

		; **PASS  TST  abimm

		TST 	#12, $1234
		TST 	#bak08, bak16
		TST 	#$82, fwd16

		; **PASS  TST  abimx

		TST 	#12, $1234,x
		TST 	#bak08, bak16,X
		TST 	#$82, fwd16,x

		; **PASS  TST  zpimm

		TST 	#12, $34
		TST 	#bak08, bak08
		TST 	#$82, fwd08

		; **PASS  TST  zpimx

		TST 	#12, $34,X
		TST 	#bak08, bak08,x
		TST 	#$82, fwd08,X


:	; forward ref for TST

; -------------------------------

; forward reference

fwd32	.equ	$89ABCDEF
fwd24	.equ	$456789
fwd16	.equ	$1234
fwd08	.equ	$12

; -------------------------------

		.end

; -------------------------------

; 189 pass
; 0 fail
