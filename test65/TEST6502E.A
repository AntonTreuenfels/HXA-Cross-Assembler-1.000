; Hobby Cross-Assembler HXA65 Error Test 6502e
; 6502\Instruction Set
; error: 6502 All Instructions, All Address Modes

; generated by MODE65.PY - Fri Nov 29 14:25:08 2024


; warning(s):

; errors(s):

; fatal:

; -------------------------------

		.listfile
		.errfile

		.maxerr	10000		; increase default count

; -------------------------------

		.cpu	6502
		.org	$1000

; -------------------------------

; backward reference

bak08	.equ	$12
bak16	.equ	$1234
bak24	.equ	$456789
bak32	.equ	$89ABCDEF

; -------------------------------

:	; backward ref for ADC

		.echo **PASS  ADC  ab

		ADC 	$1234
		ADC 	bak16
		ADC 	fwd16

		.echo **FAIL  ADC  abi

		adc 	($1234)
		adc 	(bak16)
		adc 	(fwd16)

		.echo **PASS  ADC  abx

		ADC 	$1234,X
		ADC 	bak16,x
		ADC 	fwd16,X

		.echo **PASS  ADC  aby

		ADC 	$1234,Y
		ADC 	bak16,y
		ADC 	fwd16,Y

		.echo **FAIL  ADC  acc

		adc 	A
		adc 	a

		.echo **PASS  ADC  imm

		ADC 	#$12
		ADC 	#bak08
		ADC 	#fwd08

		.echo **FAIL  ADC  imp

		adc 

		.echo **PASS  ADC  pcr  (as ab)

		Adc 	:+
		Adc 	-
		Adc 	+
		Adc 	:-

		.echo **PASS  ADC  zp

		ADC 	$12
		ADC 	bak08
		Adc 	fwd08   	; (absolute)

		.echo **PASS  ADC  zpiy

		ADC 	($12),Y
		ADC 	(bak08),y
		ADC 	(fwd08),Y

		.echo **PASS  ADC  zpx

		ADC 	$12,X
		ADC 	bak08,x
		Adc 	fwd08,X 	; (absolute)

		.echo **PASS  ADC  zpxi

		ADC 	($12,X)
		ADC 	(bak08,x)
		ADC 	(fwd08,X)

		.echo **PASS  ADC  zpy  (as aby)

		Adc 	$12,Y
		Adc 	bak08,y
		Adc 	fwd08,Y


:	; forward ref for ADC

; -------------------------------

:	; backward ref for AND

		.echo **PASS  AND  ab

		AND 	$1234
		AND 	bak16
		AND 	fwd16

		.echo **FAIL  AND  abi

		and 	($1234)
		and 	(bak16)
		and 	(fwd16)

		.echo **PASS  AND  abx

		AND 	$1234,X
		AND 	bak16,x
		AND 	fwd16,X

		.echo **PASS  AND  aby

		AND 	$1234,Y
		AND 	bak16,y
		AND 	fwd16,Y

		.echo **FAIL  AND  acc

		and 	A
		and 	a

		.echo **PASS  AND  imm

		AND 	#$12
		AND 	#bak08
		AND 	#fwd08

		.echo **FAIL  AND  imp

		and 

		.echo **PASS  AND  pcr  (as ab)

		And 	:+
		And 	-
		And 	+
		And 	:-

		.echo **PASS  AND  zp

		AND 	$12
		AND 	bak08
		And 	fwd08   	; (absolute)

		.echo **PASS  AND  zpiy

		AND 	($12),Y
		AND 	(bak08),y
		AND 	(fwd08),Y

		.echo **PASS  AND  zpx

		AND 	$12,X
		AND 	bak08,x
		And 	fwd08,X 	; (absolute)

		.echo **PASS  AND  zpxi

		AND 	($12,X)
		AND 	(bak08,x)
		AND 	(fwd08,X)

		.echo **PASS  AND  zpy  (as aby)

		And 	$12,Y
		And 	bak08,y
		And 	fwd08,Y


:	; forward ref for AND

; -------------------------------

:	; backward ref for ASL

		.echo **PASS  ASL  ab

		ASL 	$1234
		ASL 	bak16
		ASL 	fwd16

		.echo **FAIL  ASL  abi

		asl 	($1234)
		asl 	(bak16)
		asl 	(fwd16)

		.echo **PASS  ASL  abx

		ASL 	$1234,X
		ASL 	bak16,x
		ASL 	fwd16,X

		.echo **FAIL  ASL  aby

		asl 	$1234,Y
		asl 	bak16,y
		asl 	fwd16,Y

		.echo **PASS  ASL  acc

		ASL 	A
		ASL 	a

		.echo **FAIL  ASL  imm

		asl 	#$12
		asl 	#bak08
		asl 	#fwd08

		.echo **PASS  ASL  imp

		ASL 

		.echo **PASS  ASL  pcr  (as ab)

		Asl 	:+
		Asl 	-
		Asl 	+
		Asl 	:-

		.echo **PASS  ASL  zp

		ASL 	$12
		ASL 	bak08
		Asl 	fwd08   	; (absolute)

		.echo **FAIL  ASL  zpiy

		asl 	($12),Y
		asl 	(bak08),y
		asl 	(fwd08),Y

		.echo **PASS  ASL  zpx

		ASL 	$12,X
		ASL 	bak08,x
		Asl 	fwd08,X 	; (absolute)

		.echo **FAIL  ASL  zpxi

		asl 	($12,X)
		asl 	(bak08,x)
		asl 	(fwd08,X)

		.echo **FAIL  ASL  zpy

		asl 	$12,Y
		asl 	bak08,y
		asl 	fwd08,Y


:	; forward ref for ASL

; -------------------------------

:	; backward ref for BCC

		.echo **PASS  BCC  ab  (as pcr)

		Bcc 	$1234
		Bcc 	bak16
		Bcc 	fwd16

		.echo **FAIL  BCC  abi

		bcc 	($1234)
		bcc 	(bak16)
		bcc 	(fwd16)

		.echo **FAIL  BCC  abx

		bcc 	$1234,X
		bcc 	bak16,x
		bcc 	fwd16,X

		.echo **FAIL  BCC  aby

		bcc 	$1234,Y
		bcc 	bak16,y
		bcc 	fwd16,Y

		.echo **FAIL  BCC  acc

		bcc 	A
		bcc 	a

		.echo **FAIL  BCC  imm

		bcc 	#$12
		bcc 	#bak08
		bcc 	#fwd08

		.echo **FAIL  BCC  imp

		bcc 

		.echo **PASS  BCC  pcr

		BCC 	:+
		BCC 	-
		BCC 	+
		BCC 	:-

		.echo **PASS  BCC  zp  (as pcr)

		Bcc 	$12
		Bcc 	bak08
		Bcc 	fwd08

		.echo **FAIL  BCC  zpiy

		bcc 	($12),Y
		bcc 	(bak08),y
		bcc 	(fwd08),Y

		.echo **FAIL  BCC  zpx

		bcc 	$12,X
		bcc 	bak08,x
		bcc 	fwd08,X

		.echo **FAIL  BCC  zpxi

		bcc 	($12,X)
		bcc 	(bak08,x)
		bcc 	(fwd08,X)

		.echo **FAIL  BCC  zpy

		bcc 	$12,Y
		bcc 	bak08,y
		bcc 	fwd08,Y


:	; forward ref for BCC

; -------------------------------

:	; backward ref for BCS

		.echo **PASS  BCS  ab  (as pcr)

		Bcs 	$1234
		Bcs 	bak16
		Bcs 	fwd16

		.echo **FAIL  BCS  abi

		bcs 	($1234)
		bcs 	(bak16)
		bcs 	(fwd16)

		.echo **FAIL  BCS  abx

		bcs 	$1234,X
		bcs 	bak16,x
		bcs 	fwd16,X

		.echo **FAIL  BCS  aby

		bcs 	$1234,Y
		bcs 	bak16,y
		bcs 	fwd16,Y

		.echo **FAIL  BCS  acc

		bcs 	A
		bcs 	a

		.echo **FAIL  BCS  imm

		bcs 	#$12
		bcs 	#bak08
		bcs 	#fwd08

		.echo **FAIL  BCS  imp

		bcs 

		.echo **PASS  BCS  pcr

		BCS 	:+
		BCS 	-
		BCS 	+
		BCS 	:-

		.echo **PASS  BCS  zp  (as pcr)

		Bcs 	$12
		Bcs 	bak08
		Bcs 	fwd08

		.echo **FAIL  BCS  zpiy

		bcs 	($12),Y
		bcs 	(bak08),y
		bcs 	(fwd08),Y

		.echo **FAIL  BCS  zpx

		bcs 	$12,X
		bcs 	bak08,x
		bcs 	fwd08,X

		.echo **FAIL  BCS  zpxi

		bcs 	($12,X)
		bcs 	(bak08,x)
		bcs 	(fwd08,X)

		.echo **FAIL  BCS  zpy

		bcs 	$12,Y
		bcs 	bak08,y
		bcs 	fwd08,Y


:	; forward ref for BCS

; -------------------------------

:	; backward ref for BEQ

		.echo **PASS  BEQ  ab  (as pcr)

		Beq 	$1234
		Beq 	bak16
		Beq 	fwd16

		.echo **FAIL  BEQ  abi

		beq 	($1234)
		beq 	(bak16)
		beq 	(fwd16)

		.echo **FAIL  BEQ  abx

		beq 	$1234,X
		beq 	bak16,x
		beq 	fwd16,X

		.echo **FAIL  BEQ  aby

		beq 	$1234,Y
		beq 	bak16,y
		beq 	fwd16,Y

		.echo **FAIL  BEQ  acc

		beq 	A
		beq 	a

		.echo **FAIL  BEQ  imm

		beq 	#$12
		beq 	#bak08
		beq 	#fwd08

		.echo **FAIL  BEQ  imp

		beq 

		.echo **PASS  BEQ  pcr

		BEQ 	:+
		BEQ 	-
		BEQ 	+
		BEQ 	:-

		.echo **PASS  BEQ  zp  (as pcr)

		Beq 	$12
		Beq 	bak08
		Beq 	fwd08

		.echo **FAIL  BEQ  zpiy

		beq 	($12),Y
		beq 	(bak08),y
		beq 	(fwd08),Y

		.echo **FAIL  BEQ  zpx

		beq 	$12,X
		beq 	bak08,x
		beq 	fwd08,X

		.echo **FAIL  BEQ  zpxi

		beq 	($12,X)
		beq 	(bak08,x)
		beq 	(fwd08,X)

		.echo **FAIL  BEQ  zpy

		beq 	$12,Y
		beq 	bak08,y
		beq 	fwd08,Y


:	; forward ref for BEQ

; -------------------------------

:	; backward ref for BGE

		.echo **PASS  BGE  ab  (as pcr)

		Bge 	$1234
		Bge 	bak16
		Bge 	fwd16

		.echo **FAIL  BGE  abi

		bge 	($1234)
		bge 	(bak16)
		bge 	(fwd16)

		.echo **FAIL  BGE  abx

		bge 	$1234,X
		bge 	bak16,x
		bge 	fwd16,X

		.echo **FAIL  BGE  aby

		bge 	$1234,Y
		bge 	bak16,y
		bge 	fwd16,Y

		.echo **FAIL  BGE  acc

		bge 	A
		bge 	a

		.echo **FAIL  BGE  imm

		bge 	#$12
		bge 	#bak08
		bge 	#fwd08

		.echo **FAIL  BGE  imp

		bge 

		.echo **PASS  BGE  pcr

		BGE 	:+
		BGE 	-
		BGE 	+
		BGE 	:-

		.echo **PASS  BGE  zp  (as pcr)

		Bge 	$12
		Bge 	bak08
		Bge 	fwd08

		.echo **FAIL  BGE  zpiy

		bge 	($12),Y
		bge 	(bak08),y
		bge 	(fwd08),Y

		.echo **FAIL  BGE  zpx

		bge 	$12,X
		bge 	bak08,x
		bge 	fwd08,X

		.echo **FAIL  BGE  zpxi

		bge 	($12,X)
		bge 	(bak08,x)
		bge 	(fwd08,X)

		.echo **FAIL  BGE  zpy

		bge 	$12,Y
		bge 	bak08,y
		bge 	fwd08,Y


:	; forward ref for BGE

; -------------------------------

:	; backward ref for BIT

		.echo **PASS  BIT  ab

		BIT 	$1234
		BIT 	bak16
		BIT 	fwd16

		.echo **FAIL  BIT  abi

		bit 	($1234)
		bit 	(bak16)
		bit 	(fwd16)

		.echo **FAIL  BIT  abx

		bit 	$1234,X
		bit 	bak16,x
		bit 	fwd16,X

		.echo **FAIL  BIT  aby

		bit 	$1234,Y
		bit 	bak16,y
		bit 	fwd16,Y

		.echo **FAIL  BIT  acc

		bit 	A
		bit 	a

		.echo **FAIL  BIT  imm

		bit 	#$12
		bit 	#bak08
		bit 	#fwd08

		.echo **FAIL  BIT  imp

		bit 

		.echo **PASS  BIT  pcr  (as ab)

		Bit 	:+
		Bit 	-
		Bit 	+
		Bit 	:-

		.echo **PASS  BIT  zp

		BIT 	$12
		BIT 	bak08
		Bit 	fwd08   	; (absolute)

		.echo **FAIL  BIT  zpiy

		bit 	($12),Y
		bit 	(bak08),y
		bit 	(fwd08),Y

		.echo **FAIL  BIT  zpx

		bit 	$12,X
		bit 	bak08,x
		bit 	fwd08,X

		.echo **FAIL  BIT  zpxi

		bit 	($12,X)
		bit 	(bak08,x)
		bit 	(fwd08,X)

		.echo **FAIL  BIT  zpy

		bit 	$12,Y
		bit 	bak08,y
		bit 	fwd08,Y


:	; forward ref for BIT

; -------------------------------

:	; backward ref for BLT

		.echo **PASS  BLT  ab  (as pcr)

		Blt 	$1234
		Blt 	bak16
		Blt 	fwd16

		.echo **FAIL  BLT  abi

		blt 	($1234)
		blt 	(bak16)
		blt 	(fwd16)

		.echo **FAIL  BLT  abx

		blt 	$1234,X
		blt 	bak16,x
		blt 	fwd16,X

		.echo **FAIL  BLT  aby

		blt 	$1234,Y
		blt 	bak16,y
		blt 	fwd16,Y

		.echo **FAIL  BLT  acc

		blt 	A
		blt 	a

		.echo **FAIL  BLT  imm

		blt 	#$12
		blt 	#bak08
		blt 	#fwd08

		.echo **FAIL  BLT  imp

		blt 

		.echo **PASS  BLT  pcr

		BLT 	:+
		BLT 	-
		BLT 	+
		BLT 	:-

		.echo **PASS  BLT  zp  (as pcr)

		Blt 	$12
		Blt 	bak08
		Blt 	fwd08

		.echo **FAIL  BLT  zpiy

		blt 	($12),Y
		blt 	(bak08),y
		blt 	(fwd08),Y

		.echo **FAIL  BLT  zpx

		blt 	$12,X
		blt 	bak08,x
		blt 	fwd08,X

		.echo **FAIL  BLT  zpxi

		blt 	($12,X)
		blt 	(bak08,x)
		blt 	(fwd08,X)

		.echo **FAIL  BLT  zpy

		blt 	$12,Y
		blt 	bak08,y
		blt 	fwd08,Y


:	; forward ref for BLT

; -------------------------------

:	; backward ref for BMI

		.echo **PASS  BMI  ab  (as pcr)

		Bmi 	$1234
		Bmi 	bak16
		Bmi 	fwd16

		.echo **FAIL  BMI  abi

		bmi 	($1234)
		bmi 	(bak16)
		bmi 	(fwd16)

		.echo **FAIL  BMI  abx

		bmi 	$1234,X
		bmi 	bak16,x
		bmi 	fwd16,X

		.echo **FAIL  BMI  aby

		bmi 	$1234,Y
		bmi 	bak16,y
		bmi 	fwd16,Y

		.echo **FAIL  BMI  acc

		bmi 	A
		bmi 	a

		.echo **FAIL  BMI  imm

		bmi 	#$12
		bmi 	#bak08
		bmi 	#fwd08

		.echo **FAIL  BMI  imp

		bmi 

		.echo **PASS  BMI  pcr

		BMI 	:+
		BMI 	-
		BMI 	+
		BMI 	:-

		.echo **PASS  BMI  zp  (as pcr)

		Bmi 	$12
		Bmi 	bak08
		Bmi 	fwd08

		.echo **FAIL  BMI  zpiy

		bmi 	($12),Y
		bmi 	(bak08),y
		bmi 	(fwd08),Y

		.echo **FAIL  BMI  zpx

		bmi 	$12,X
		bmi 	bak08,x
		bmi 	fwd08,X

		.echo **FAIL  BMI  zpxi

		bmi 	($12,X)
		bmi 	(bak08,x)
		bmi 	(fwd08,X)

		.echo **FAIL  BMI  zpy

		bmi 	$12,Y
		bmi 	bak08,y
		bmi 	fwd08,Y


:	; forward ref for BMI

; -------------------------------

:	; backward ref for BNE

		.echo **PASS  BNE  ab  (as pcr)

		Bne 	$1234
		Bne 	bak16
		Bne 	fwd16

		.echo **FAIL  BNE  abi

		bne 	($1234)
		bne 	(bak16)
		bne 	(fwd16)

		.echo **FAIL  BNE  abx

		bne 	$1234,X
		bne 	bak16,x
		bne 	fwd16,X

		.echo **FAIL  BNE  aby

		bne 	$1234,Y
		bne 	bak16,y
		bne 	fwd16,Y

		.echo **FAIL  BNE  acc

		bne 	A
		bne 	a

		.echo **FAIL  BNE  imm

		bne 	#$12
		bne 	#bak08
		bne 	#fwd08

		.echo **FAIL  BNE  imp

		bne 

		.echo **PASS  BNE  pcr

		BNE 	:+
		BNE 	-
		BNE 	+
		BNE 	:-

		.echo **PASS  BNE  zp  (as pcr)

		Bne 	$12
		Bne 	bak08
		Bne 	fwd08

		.echo **FAIL  BNE  zpiy

		bne 	($12),Y
		bne 	(bak08),y
		bne 	(fwd08),Y

		.echo **FAIL  BNE  zpx

		bne 	$12,X
		bne 	bak08,x
		bne 	fwd08,X

		.echo **FAIL  BNE  zpxi

		bne 	($12,X)
		bne 	(bak08,x)
		bne 	(fwd08,X)

		.echo **FAIL  BNE  zpy

		bne 	$12,Y
		bne 	bak08,y
		bne 	fwd08,Y


:	; forward ref for BNE

; -------------------------------

:	; backward ref for BPL

		.echo **PASS  BPL  ab  (as pcr)

		Bpl 	$1234
		Bpl 	bak16
		Bpl 	fwd16

		.echo **FAIL  BPL  abi

		bpl 	($1234)
		bpl 	(bak16)
		bpl 	(fwd16)

		.echo **FAIL  BPL  abx

		bpl 	$1234,X
		bpl 	bak16,x
		bpl 	fwd16,X

		.echo **FAIL  BPL  aby

		bpl 	$1234,Y
		bpl 	bak16,y
		bpl 	fwd16,Y

		.echo **FAIL  BPL  acc

		bpl 	A
		bpl 	a

		.echo **FAIL  BPL  imm

		bpl 	#$12
		bpl 	#bak08
		bpl 	#fwd08

		.echo **FAIL  BPL  imp

		bpl 

		.echo **PASS  BPL  pcr

		BPL 	:+
		BPL 	-
		BPL 	+
		BPL 	:-

		.echo **PASS  BPL  zp  (as pcr)

		Bpl 	$12
		Bpl 	bak08
		Bpl 	fwd08

		.echo **FAIL  BPL  zpiy

		bpl 	($12),Y
		bpl 	(bak08),y
		bpl 	(fwd08),Y

		.echo **FAIL  BPL  zpx

		bpl 	$12,X
		bpl 	bak08,x
		bpl 	fwd08,X

		.echo **FAIL  BPL  zpxi

		bpl 	($12,X)
		bpl 	(bak08,x)
		bpl 	(fwd08,X)

		.echo **FAIL  BPL  zpy

		bpl 	$12,Y
		bpl 	bak08,y
		bpl 	fwd08,Y


:	; forward ref for BPL

; -------------------------------

:	; backward ref for BRK

		.echo **PASS  BRK  ab  (as zp)

		Brk 	$1234
		Brk 	bak16
		Brk 	fwd16

		.echo **FAIL  BRK  abi

		brk 	($1234)
		brk 	(bak16)
		brk 	(fwd16)

		.echo **FAIL  BRK  abx

		brk 	$1234,X
		brk 	bak16,x
		brk 	fwd16,X

		.echo **FAIL  BRK  aby

		brk 	$1234,Y
		brk 	bak16,y
		brk 	fwd16,Y

		.echo **FAIL  BRK  acc

		brk 	A
		brk 	a

		.echo **PASS  BRK  imm

		BRK 	#$12
		BRK 	#bak08
		BRK 	#fwd08

		.echo **PASS  BRK  imp

		BRK 

		.echo **PASS  BRK  pcr  (as zp)

		Brk 	:+
		Brk 	-
		Brk 	+
		Brk 	:-

		.echo **PASS  BRK  zp

		BRK 	$12
		BRK 	bak08
		BRK 	fwd08

		.echo **FAIL  BRK  zpiy

		brk 	($12),Y
		brk 	(bak08),y
		brk 	(fwd08),Y

		.echo **FAIL  BRK  zpx

		brk 	$12,X
		brk 	bak08,x
		brk 	fwd08,X

		.echo **FAIL  BRK  zpxi

		brk 	($12,X)
		brk 	(bak08,x)
		brk 	(fwd08,X)

		.echo **FAIL  BRK  zpy

		brk 	$12,Y
		brk 	bak08,y
		brk 	fwd08,Y


:	; forward ref for BRK

; -------------------------------

:	; backward ref for BVC

		.echo **PASS  BVC  ab  (as pcr)

		Bvc 	$1234
		Bvc 	bak16
		Bvc 	fwd16

		.echo **FAIL  BVC  abi

		bvc 	($1234)
		bvc 	(bak16)
		bvc 	(fwd16)

		.echo **FAIL  BVC  abx

		bvc 	$1234,X
		bvc 	bak16,x
		bvc 	fwd16,X

		.echo **FAIL  BVC  aby

		bvc 	$1234,Y
		bvc 	bak16,y
		bvc 	fwd16,Y

		.echo **FAIL  BVC  acc

		bvc 	A
		bvc 	a

		.echo **FAIL  BVC  imm

		bvc 	#$12
		bvc 	#bak08
		bvc 	#fwd08

		.echo **FAIL  BVC  imp

		bvc 

		.echo **PASS  BVC  pcr

		BVC 	:+
		BVC 	-
		BVC 	+
		BVC 	:-

		.echo **PASS  BVC  zp  (as pcr)

		Bvc 	$12
		Bvc 	bak08
		Bvc 	fwd08

		.echo **FAIL  BVC  zpiy

		bvc 	($12),Y
		bvc 	(bak08),y
		bvc 	(fwd08),Y

		.echo **FAIL  BVC  zpx

		bvc 	$12,X
		bvc 	bak08,x
		bvc 	fwd08,X

		.echo **FAIL  BVC  zpxi

		bvc 	($12,X)
		bvc 	(bak08,x)
		bvc 	(fwd08,X)

		.echo **FAIL  BVC  zpy

		bvc 	$12,Y
		bvc 	bak08,y
		bvc 	fwd08,Y


:	; forward ref for BVC

; -------------------------------

:	; backward ref for BVS

		.echo **PASS  BVS  ab  (as pcr)

		Bvs 	$1234
		Bvs 	bak16
		Bvs 	fwd16

		.echo **FAIL  BVS  abi

		bvs 	($1234)
		bvs 	(bak16)
		bvs 	(fwd16)

		.echo **FAIL  BVS  abx

		bvs 	$1234,X
		bvs 	bak16,x
		bvs 	fwd16,X

		.echo **FAIL  BVS  aby

		bvs 	$1234,Y
		bvs 	bak16,y
		bvs 	fwd16,Y

		.echo **FAIL  BVS  acc

		bvs 	A
		bvs 	a

		.echo **FAIL  BVS  imm

		bvs 	#$12
		bvs 	#bak08
		bvs 	#fwd08

		.echo **FAIL  BVS  imp

		bvs 

		.echo **PASS  BVS  pcr

		BVS 	:+
		BVS 	-
		BVS 	+
		BVS 	:-

		.echo **PASS  BVS  zp  (as pcr)

		Bvs 	$12
		Bvs 	bak08
		Bvs 	fwd08

		.echo **FAIL  BVS  zpiy

		bvs 	($12),Y
		bvs 	(bak08),y
		bvs 	(fwd08),Y

		.echo **FAIL  BVS  zpx

		bvs 	$12,X
		bvs 	bak08,x
		bvs 	fwd08,X

		.echo **FAIL  BVS  zpxi

		bvs 	($12,X)
		bvs 	(bak08,x)
		bvs 	(fwd08,X)

		.echo **FAIL  BVS  zpy

		bvs 	$12,Y
		bvs 	bak08,y
		bvs 	fwd08,Y


:	; forward ref for BVS

; -------------------------------

:	; backward ref for CLC

		.echo **FAIL  CLC  ab

		clc 	$1234
		clc 	bak16
		clc 	fwd16

		.echo **FAIL  CLC  abi

		clc 	($1234)
		clc 	(bak16)
		clc 	(fwd16)

		.echo **FAIL  CLC  abx

		clc 	$1234,X
		clc 	bak16,x
		clc 	fwd16,X

		.echo **FAIL  CLC  aby

		clc 	$1234,Y
		clc 	bak16,y
		clc 	fwd16,Y

		.echo **FAIL  CLC  acc

		clc 	A
		clc 	a

		.echo **FAIL  CLC  imm

		clc 	#$12
		clc 	#bak08
		clc 	#fwd08

		.echo **PASS  CLC  imp

		CLC 

		.echo **FAIL  CLC  pcr

		clc 	:+
		clc 	-
		clc 	+
		clc 	:-

		.echo **FAIL  CLC  zp

		clc 	$12
		clc 	bak08
		clc 	fwd08

		.echo **FAIL  CLC  zpiy

		clc 	($12),Y
		clc 	(bak08),y
		clc 	(fwd08),Y

		.echo **FAIL  CLC  zpx

		clc 	$12,X
		clc 	bak08,x
		clc 	fwd08,X

		.echo **FAIL  CLC  zpxi

		clc 	($12,X)
		clc 	(bak08,x)
		clc 	(fwd08,X)

		.echo **FAIL  CLC  zpy

		clc 	$12,Y
		clc 	bak08,y
		clc 	fwd08,Y


:	; forward ref for CLC

; -------------------------------

:	; backward ref for CLD

		.echo **FAIL  CLD  ab

		cld 	$1234
		cld 	bak16
		cld 	fwd16

		.echo **FAIL  CLD  abi

		cld 	($1234)
		cld 	(bak16)
		cld 	(fwd16)

		.echo **FAIL  CLD  abx

		cld 	$1234,X
		cld 	bak16,x
		cld 	fwd16,X

		.echo **FAIL  CLD  aby

		cld 	$1234,Y
		cld 	bak16,y
		cld 	fwd16,Y

		.echo **FAIL  CLD  acc

		cld 	A
		cld 	a

		.echo **FAIL  CLD  imm

		cld 	#$12
		cld 	#bak08
		cld 	#fwd08

		.echo **PASS  CLD  imp

		CLD 

		.echo **FAIL  CLD  pcr

		cld 	:+
		cld 	-
		cld 	+
		cld 	:-

		.echo **FAIL  CLD  zp

		cld 	$12
		cld 	bak08
		cld 	fwd08

		.echo **FAIL  CLD  zpiy

		cld 	($12),Y
		cld 	(bak08),y
		cld 	(fwd08),Y

		.echo **FAIL  CLD  zpx

		cld 	$12,X
		cld 	bak08,x
		cld 	fwd08,X

		.echo **FAIL  CLD  zpxi

		cld 	($12,X)
		cld 	(bak08,x)
		cld 	(fwd08,X)

		.echo **FAIL  CLD  zpy

		cld 	$12,Y
		cld 	bak08,y
		cld 	fwd08,Y


:	; forward ref for CLD

; -------------------------------

:	; backward ref for CLI

		.echo **FAIL  CLI  ab

		cli 	$1234
		cli 	bak16
		cli 	fwd16

		.echo **FAIL  CLI  abi

		cli 	($1234)
		cli 	(bak16)
		cli 	(fwd16)

		.echo **FAIL  CLI  abx

		cli 	$1234,X
		cli 	bak16,x
		cli 	fwd16,X

		.echo **FAIL  CLI  aby

		cli 	$1234,Y
		cli 	bak16,y
		cli 	fwd16,Y

		.echo **FAIL  CLI  acc

		cli 	A
		cli 	a

		.echo **FAIL  CLI  imm

		cli 	#$12
		cli 	#bak08
		cli 	#fwd08

		.echo **PASS  CLI  imp

		CLI 

		.echo **FAIL  CLI  pcr

		cli 	:+
		cli 	-
		cli 	+
		cli 	:-

		.echo **FAIL  CLI  zp

		cli 	$12
		cli 	bak08
		cli 	fwd08

		.echo **FAIL  CLI  zpiy

		cli 	($12),Y
		cli 	(bak08),y
		cli 	(fwd08),Y

		.echo **FAIL  CLI  zpx

		cli 	$12,X
		cli 	bak08,x
		cli 	fwd08,X

		.echo **FAIL  CLI  zpxi

		cli 	($12,X)
		cli 	(bak08,x)
		cli 	(fwd08,X)

		.echo **FAIL  CLI  zpy

		cli 	$12,Y
		cli 	bak08,y
		cli 	fwd08,Y


:	; forward ref for CLI

; -------------------------------

:	; backward ref for CLV

		.echo **FAIL  CLV  ab

		clv 	$1234
		clv 	bak16
		clv 	fwd16

		.echo **FAIL  CLV  abi

		clv 	($1234)
		clv 	(bak16)
		clv 	(fwd16)

		.echo **FAIL  CLV  abx

		clv 	$1234,X
		clv 	bak16,x
		clv 	fwd16,X

		.echo **FAIL  CLV  aby

		clv 	$1234,Y
		clv 	bak16,y
		clv 	fwd16,Y

		.echo **FAIL  CLV  acc

		clv 	A
		clv 	a

		.echo **FAIL  CLV  imm

		clv 	#$12
		clv 	#bak08
		clv 	#fwd08

		.echo **PASS  CLV  imp

		CLV 

		.echo **FAIL  CLV  pcr

		clv 	:+
		clv 	-
		clv 	+
		clv 	:-

		.echo **FAIL  CLV  zp

		clv 	$12
		clv 	bak08
		clv 	fwd08

		.echo **FAIL  CLV  zpiy

		clv 	($12),Y
		clv 	(bak08),y
		clv 	(fwd08),Y

		.echo **FAIL  CLV  zpx

		clv 	$12,X
		clv 	bak08,x
		clv 	fwd08,X

		.echo **FAIL  CLV  zpxi

		clv 	($12,X)
		clv 	(bak08,x)
		clv 	(fwd08,X)

		.echo **FAIL  CLV  zpy

		clv 	$12,Y
		clv 	bak08,y
		clv 	fwd08,Y


:	; forward ref for CLV

; -------------------------------

:	; backward ref for CMP

		.echo **PASS  CMP  ab

		CMP 	$1234
		CMP 	bak16
		CMP 	fwd16

		.echo **FAIL  CMP  abi

		cmp 	($1234)
		cmp 	(bak16)
		cmp 	(fwd16)

		.echo **PASS  CMP  abx

		CMP 	$1234,X
		CMP 	bak16,x
		CMP 	fwd16,X

		.echo **PASS  CMP  aby

		CMP 	$1234,Y
		CMP 	bak16,y
		CMP 	fwd16,Y

		.echo **FAIL  CMP  acc

		cmp 	A
		cmp 	a

		.echo **PASS  CMP  imm

		CMP 	#$12
		CMP 	#bak08
		CMP 	#fwd08

		.echo **FAIL  CMP  imp

		cmp 

		.echo **PASS  CMP  pcr  (as ab)

		Cmp 	:+
		Cmp 	-
		Cmp 	+
		Cmp 	:-

		.echo **PASS  CMP  zp

		CMP 	$12
		CMP 	bak08
		Cmp 	fwd08   	; (absolute)

		.echo **PASS  CMP  zpiy

		CMP 	($12),Y
		CMP 	(bak08),y
		CMP 	(fwd08),Y

		.echo **PASS  CMP  zpx

		CMP 	$12,X
		CMP 	bak08,x
		Cmp 	fwd08,X 	; (absolute)

		.echo **PASS  CMP  zpxi

		CMP 	($12,X)
		CMP 	(bak08,x)
		CMP 	(fwd08,X)

		.echo **PASS  CMP  zpy  (as aby)

		Cmp 	$12,Y
		Cmp 	bak08,y
		Cmp 	fwd08,Y


:	; forward ref for CMP

; -------------------------------

:	; backward ref for CPX

		.echo **PASS  CPX  ab

		CPX 	$1234
		CPX 	bak16
		CPX 	fwd16

		.echo **FAIL  CPX  abi

		cpx 	($1234)
		cpx 	(bak16)
		cpx 	(fwd16)

		.echo **FAIL  CPX  abx

		cpx 	$1234,X
		cpx 	bak16,x
		cpx 	fwd16,X

		.echo **FAIL  CPX  aby

		cpx 	$1234,Y
		cpx 	bak16,y
		cpx 	fwd16,Y

		.echo **FAIL  CPX  acc

		cpx 	A
		cpx 	a

		.echo **PASS  CPX  imm

		CPX 	#$12
		CPX 	#bak08
		CPX 	#fwd08

		.echo **FAIL  CPX  imp

		cpx 

		.echo **PASS  CPX  pcr  (as ab)

		Cpx 	:+
		Cpx 	-
		Cpx 	+
		Cpx 	:-

		.echo **PASS  CPX  zp

		CPX 	$12
		CPX 	bak08
		Cpx 	fwd08   	; (absolute)

		.echo **FAIL  CPX  zpiy

		cpx 	($12),Y
		cpx 	(bak08),y
		cpx 	(fwd08),Y

		.echo **FAIL  CPX  zpx

		cpx 	$12,X
		cpx 	bak08,x
		cpx 	fwd08,X

		.echo **FAIL  CPX  zpxi

		cpx 	($12,X)
		cpx 	(bak08,x)
		cpx 	(fwd08,X)

		.echo **FAIL  CPX  zpy

		cpx 	$12,Y
		cpx 	bak08,y
		cpx 	fwd08,Y


:	; forward ref for CPX

; -------------------------------

:	; backward ref for CPY

		.echo **PASS  CPY  ab

		CPY 	$1234
		CPY 	bak16
		CPY 	fwd16

		.echo **FAIL  CPY  abi

		cpy 	($1234)
		cpy 	(bak16)
		cpy 	(fwd16)

		.echo **FAIL  CPY  abx

		cpy 	$1234,X
		cpy 	bak16,x
		cpy 	fwd16,X

		.echo **FAIL  CPY  aby

		cpy 	$1234,Y
		cpy 	bak16,y
		cpy 	fwd16,Y

		.echo **FAIL  CPY  acc

		cpy 	A
		cpy 	a

		.echo **PASS  CPY  imm

		CPY 	#$12
		CPY 	#bak08
		CPY 	#fwd08

		.echo **FAIL  CPY  imp

		cpy 

		.echo **PASS  CPY  pcr  (as ab)

		Cpy 	:+
		Cpy 	-
		Cpy 	+
		Cpy 	:-

		.echo **PASS  CPY  zp

		CPY 	$12
		CPY 	bak08
		Cpy 	fwd08   	; (absolute)

		.echo **FAIL  CPY  zpiy

		cpy 	($12),Y
		cpy 	(bak08),y
		cpy 	(fwd08),Y

		.echo **FAIL  CPY  zpx

		cpy 	$12,X
		cpy 	bak08,x
		cpy 	fwd08,X

		.echo **FAIL  CPY  zpxi

		cpy 	($12,X)
		cpy 	(bak08,x)
		cpy 	(fwd08,X)

		.echo **FAIL  CPY  zpy

		cpy 	$12,Y
		cpy 	bak08,y
		cpy 	fwd08,Y


:	; forward ref for CPY

; -------------------------------

:	; backward ref for DEC

		.echo **PASS  DEC  ab

		DEC 	$1234
		DEC 	bak16
		DEC 	fwd16

		.echo **FAIL  DEC  abi

		dec 	($1234)
		dec 	(bak16)
		dec 	(fwd16)

		.echo **PASS  DEC  abx

		DEC 	$1234,X
		DEC 	bak16,x
		DEC 	fwd16,X

		.echo **FAIL  DEC  aby

		dec 	$1234,Y
		dec 	bak16,y
		dec 	fwd16,Y

		.echo **FAIL  DEC  acc

		dec 	A
		dec 	a

		.echo **FAIL  DEC  imm

		dec 	#$12
		dec 	#bak08
		dec 	#fwd08

		.echo **FAIL  DEC  imp

		dec 

		.echo **PASS  DEC  pcr  (as ab)

		Dec 	:+
		Dec 	-
		Dec 	+
		Dec 	:-

		.echo **PASS  DEC  zp

		DEC 	$12
		DEC 	bak08
		Dec 	fwd08   	; (absolute)

		.echo **FAIL  DEC  zpiy

		dec 	($12),Y
		dec 	(bak08),y
		dec 	(fwd08),Y

		.echo **PASS  DEC  zpx

		DEC 	$12,X
		DEC 	bak08,x
		Dec 	fwd08,X 	; (absolute)

		.echo **FAIL  DEC  zpxi

		dec 	($12,X)
		dec 	(bak08,x)
		dec 	(fwd08,X)

		.echo **FAIL  DEC  zpy

		dec 	$12,Y
		dec 	bak08,y
		dec 	fwd08,Y


:	; forward ref for DEC

; -------------------------------

:	; backward ref for DEX

		.echo **FAIL  DEX  ab

		dex 	$1234
		dex 	bak16
		dex 	fwd16

		.echo **FAIL  DEX  abi

		dex 	($1234)
		dex 	(bak16)
		dex 	(fwd16)

		.echo **FAIL  DEX  abx

		dex 	$1234,X
		dex 	bak16,x
		dex 	fwd16,X

		.echo **FAIL  DEX  aby

		dex 	$1234,Y
		dex 	bak16,y
		dex 	fwd16,Y

		.echo **FAIL  DEX  acc

		dex 	A
		dex 	a

		.echo **FAIL  DEX  imm

		dex 	#$12
		dex 	#bak08
		dex 	#fwd08

		.echo **PASS  DEX  imp

		DEX 

		.echo **FAIL  DEX  pcr

		dex 	:+
		dex 	-
		dex 	+
		dex 	:-

		.echo **FAIL  DEX  zp

		dex 	$12
		dex 	bak08
		dex 	fwd08

		.echo **FAIL  DEX  zpiy

		dex 	($12),Y
		dex 	(bak08),y
		dex 	(fwd08),Y

		.echo **FAIL  DEX  zpx

		dex 	$12,X
		dex 	bak08,x
		dex 	fwd08,X

		.echo **FAIL  DEX  zpxi

		dex 	($12,X)
		dex 	(bak08,x)
		dex 	(fwd08,X)

		.echo **FAIL  DEX  zpy

		dex 	$12,Y
		dex 	bak08,y
		dex 	fwd08,Y


:	; forward ref for DEX

; -------------------------------

:	; backward ref for DEY

		.echo **FAIL  DEY  ab

		dey 	$1234
		dey 	bak16
		dey 	fwd16

		.echo **FAIL  DEY  abi

		dey 	($1234)
		dey 	(bak16)
		dey 	(fwd16)

		.echo **FAIL  DEY  abx

		dey 	$1234,X
		dey 	bak16,x
		dey 	fwd16,X

		.echo **FAIL  DEY  aby

		dey 	$1234,Y
		dey 	bak16,y
		dey 	fwd16,Y

		.echo **FAIL  DEY  acc

		dey 	A
		dey 	a

		.echo **FAIL  DEY  imm

		dey 	#$12
		dey 	#bak08
		dey 	#fwd08

		.echo **PASS  DEY  imp

		DEY 

		.echo **FAIL  DEY  pcr

		dey 	:+
		dey 	-
		dey 	+
		dey 	:-

		.echo **FAIL  DEY  zp

		dey 	$12
		dey 	bak08
		dey 	fwd08

		.echo **FAIL  DEY  zpiy

		dey 	($12),Y
		dey 	(bak08),y
		dey 	(fwd08),Y

		.echo **FAIL  DEY  zpx

		dey 	$12,X
		dey 	bak08,x
		dey 	fwd08,X

		.echo **FAIL  DEY  zpxi

		dey 	($12,X)
		dey 	(bak08,x)
		dey 	(fwd08,X)

		.echo **FAIL  DEY  zpy

		dey 	$12,Y
		dey 	bak08,y
		dey 	fwd08,Y


:	; forward ref for DEY

; -------------------------------

:	; backward ref for EOR

		.echo **PASS  EOR  ab

		EOR 	$1234
		EOR 	bak16
		EOR 	fwd16

		.echo **FAIL  EOR  abi

		eor 	($1234)
		eor 	(bak16)
		eor 	(fwd16)

		.echo **PASS  EOR  abx

		EOR 	$1234,X
		EOR 	bak16,x
		EOR 	fwd16,X

		.echo **PASS  EOR  aby

		EOR 	$1234,Y
		EOR 	bak16,y
		EOR 	fwd16,Y

		.echo **FAIL  EOR  acc

		eor 	A
		eor 	a

		.echo **PASS  EOR  imm

		EOR 	#$12
		EOR 	#bak08
		EOR 	#fwd08

		.echo **FAIL  EOR  imp

		eor 

		.echo **PASS  EOR  pcr  (as ab)

		Eor 	:+
		Eor 	-
		Eor 	+
		Eor 	:-

		.echo **PASS  EOR  zp

		EOR 	$12
		EOR 	bak08
		Eor 	fwd08   	; (absolute)

		.echo **PASS  EOR  zpiy

		EOR 	($12),Y
		EOR 	(bak08),y
		EOR 	(fwd08),Y

		.echo **PASS  EOR  zpx

		EOR 	$12,X
		EOR 	bak08,x
		Eor 	fwd08,X 	; (absolute)

		.echo **PASS  EOR  zpxi

		EOR 	($12,X)
		EOR 	(bak08,x)
		EOR 	(fwd08,X)

		.echo **PASS  EOR  zpy  (as aby)

		Eor 	$12,Y
		Eor 	bak08,y
		Eor 	fwd08,Y


:	; forward ref for EOR

; -------------------------------

:	; backward ref for INC

		.echo **PASS  INC  ab

		INC 	$1234
		INC 	bak16
		INC 	fwd16

		.echo **FAIL  INC  abi

		inc 	($1234)
		inc 	(bak16)
		inc 	(fwd16)

		.echo **PASS  INC  abx

		INC 	$1234,X
		INC 	bak16,x
		INC 	fwd16,X

		.echo **FAIL  INC  aby

		inc 	$1234,Y
		inc 	bak16,y
		inc 	fwd16,Y

		.echo **FAIL  INC  acc

		inc 	A
		inc 	a

		.echo **FAIL  INC  imm

		inc 	#$12
		inc 	#bak08
		inc 	#fwd08

		.echo **FAIL  INC  imp

		inc 

		.echo **PASS  INC  pcr  (as ab)

		Inc 	:+
		Inc 	-
		Inc 	+
		Inc 	:-

		.echo **PASS  INC  zp

		INC 	$12
		INC 	bak08
		Inc 	fwd08   	; (absolute)

		.echo **FAIL  INC  zpiy

		inc 	($12),Y
		inc 	(bak08),y
		inc 	(fwd08),Y

		.echo **PASS  INC  zpx

		INC 	$12,X
		INC 	bak08,x
		Inc 	fwd08,X 	; (absolute)

		.echo **FAIL  INC  zpxi

		inc 	($12,X)
		inc 	(bak08,x)
		inc 	(fwd08,X)

		.echo **FAIL  INC  zpy

		inc 	$12,Y
		inc 	bak08,y
		inc 	fwd08,Y


:	; forward ref for INC

; -------------------------------

:	; backward ref for INX

		.echo **FAIL  INX  ab

		inx 	$1234
		inx 	bak16
		inx 	fwd16

		.echo **FAIL  INX  abi

		inx 	($1234)
		inx 	(bak16)
		inx 	(fwd16)

		.echo **FAIL  INX  abx

		inx 	$1234,X
		inx 	bak16,x
		inx 	fwd16,X

		.echo **FAIL  INX  aby

		inx 	$1234,Y
		inx 	bak16,y
		inx 	fwd16,Y

		.echo **FAIL  INX  acc

		inx 	A
		inx 	a

		.echo **FAIL  INX  imm

		inx 	#$12
		inx 	#bak08
		inx 	#fwd08

		.echo **PASS  INX  imp

		INX 

		.echo **FAIL  INX  pcr

		inx 	:+
		inx 	-
		inx 	+
		inx 	:-

		.echo **FAIL  INX  zp

		inx 	$12
		inx 	bak08
		inx 	fwd08

		.echo **FAIL  INX  zpiy

		inx 	($12),Y
		inx 	(bak08),y
		inx 	(fwd08),Y

		.echo **FAIL  INX  zpx

		inx 	$12,X
		inx 	bak08,x
		inx 	fwd08,X

		.echo **FAIL  INX  zpxi

		inx 	($12,X)
		inx 	(bak08,x)
		inx 	(fwd08,X)

		.echo **FAIL  INX  zpy

		inx 	$12,Y
		inx 	bak08,y
		inx 	fwd08,Y


:	; forward ref for INX

; -------------------------------

:	; backward ref for INY

		.echo **FAIL  INY  ab

		iny 	$1234
		iny 	bak16
		iny 	fwd16

		.echo **FAIL  INY  abi

		iny 	($1234)
		iny 	(bak16)
		iny 	(fwd16)

		.echo **FAIL  INY  abx

		iny 	$1234,X
		iny 	bak16,x
		iny 	fwd16,X

		.echo **FAIL  INY  aby

		iny 	$1234,Y
		iny 	bak16,y
		iny 	fwd16,Y

		.echo **FAIL  INY  acc

		iny 	A
		iny 	a

		.echo **FAIL  INY  imm

		iny 	#$12
		iny 	#bak08
		iny 	#fwd08

		.echo **PASS  INY  imp

		INY 

		.echo **FAIL  INY  pcr

		iny 	:+
		iny 	-
		iny 	+
		iny 	:-

		.echo **FAIL  INY  zp

		iny 	$12
		iny 	bak08
		iny 	fwd08

		.echo **FAIL  INY  zpiy

		iny 	($12),Y
		iny 	(bak08),y
		iny 	(fwd08),Y

		.echo **FAIL  INY  zpx

		iny 	$12,X
		iny 	bak08,x
		iny 	fwd08,X

		.echo **FAIL  INY  zpxi

		iny 	($12,X)
		iny 	(bak08,x)
		iny 	(fwd08,X)

		.echo **FAIL  INY  zpy

		iny 	$12,Y
		iny 	bak08,y
		iny 	fwd08,Y


:	; forward ref for INY

; -------------------------------

:	; backward ref for JMP

		.echo **PASS  JMP  ab

		JMP 	$1234
		JMP 	bak16
		JMP 	fwd16

		.echo **PASS  JMP  abi

		JMP 	($1234)
		JMP 	(bak16)
		JMP 	(fwd16)

		.echo **FAIL  JMP  abx

		jmp 	$1234,X
		jmp 	bak16,x
		jmp 	fwd16,X

		.echo **FAIL  JMP  aby

		jmp 	$1234,Y
		jmp 	bak16,y
		jmp 	fwd16,Y

		.echo **FAIL  JMP  acc

		jmp 	A
		jmp 	a

		.echo **FAIL  JMP  imm

		jmp 	#$12
		jmp 	#bak08
		jmp 	#fwd08

		.echo **FAIL  JMP  imp

		jmp 

		.echo **PASS  JMP  pcr  (as ab)

		Jmp 	:+
		Jmp 	-
		Jmp 	+
		Jmp 	:-

		.echo **PASS  JMP  zp  (as ab)

		Jmp 	$12
		Jmp 	bak08
		Jmp 	fwd08

		.echo **FAIL  JMP  zpiy

		jmp 	($12),Y
		jmp 	(bak08),y
		jmp 	(fwd08),Y

		.echo **FAIL  JMP  zpx

		jmp 	$12,X
		jmp 	bak08,x
		jmp 	fwd08,X

		.echo **FAIL  JMP  zpxi

		jmp 	($12,X)
		jmp 	(bak08,x)
		jmp 	(fwd08,X)

		.echo **FAIL  JMP  zpy

		jmp 	$12,Y
		jmp 	bak08,y
		jmp 	fwd08,Y


:	; forward ref for JMP

; -------------------------------

:	; backward ref for JSR

		.echo **PASS  JSR  ab

		JSR 	$1234
		JSR 	bak16
		JSR 	fwd16

		.echo **FAIL  JSR  abi

		jsr 	($1234)
		jsr 	(bak16)
		jsr 	(fwd16)

		.echo **FAIL  JSR  abx

		jsr 	$1234,X
		jsr 	bak16,x
		jsr 	fwd16,X

		.echo **FAIL  JSR  aby

		jsr 	$1234,Y
		jsr 	bak16,y
		jsr 	fwd16,Y

		.echo **FAIL  JSR  acc

		jsr 	A
		jsr 	a

		.echo **FAIL  JSR  imm

		jsr 	#$12
		jsr 	#bak08
		jsr 	#fwd08

		.echo **FAIL  JSR  imp

		jsr 

		.echo **PASS  JSR  pcr  (as ab)

		Jsr 	:+
		Jsr 	-
		Jsr 	+
		Jsr 	:-

		.echo **PASS  JSR  zp  (as ab)

		Jsr 	$12
		Jsr 	bak08
		Jsr 	fwd08

		.echo **FAIL  JSR  zpiy

		jsr 	($12),Y
		jsr 	(bak08),y
		jsr 	(fwd08),Y

		.echo **FAIL  JSR  zpx

		jsr 	$12,X
		jsr 	bak08,x
		jsr 	fwd08,X

		.echo **FAIL  JSR  zpxi

		jsr 	($12,X)
		jsr 	(bak08,x)
		jsr 	(fwd08,X)

		.echo **FAIL  JSR  zpy

		jsr 	$12,Y
		jsr 	bak08,y
		jsr 	fwd08,Y


:	; forward ref for JSR

; -------------------------------

:	; backward ref for LDA

		.echo **PASS  LDA  ab

		LDA 	$1234
		LDA 	bak16
		LDA 	fwd16

		.echo **FAIL  LDA  abi

		lda 	($1234)
		lda 	(bak16)
		lda 	(fwd16)

		.echo **PASS  LDA  abx

		LDA 	$1234,X
		LDA 	bak16,x
		LDA 	fwd16,X

		.echo **PASS  LDA  aby

		LDA 	$1234,Y
		LDA 	bak16,y
		LDA 	fwd16,Y

		.echo **FAIL  LDA  acc

		lda 	A
		lda 	a

		.echo **PASS  LDA  imm

		LDA 	#$12
		LDA 	#bak08
		LDA 	#fwd08

		.echo **FAIL  LDA  imp

		lda 

		.echo **PASS  LDA  pcr  (as ab)

		Lda 	:+
		Lda 	-
		Lda 	+
		Lda 	:-

		.echo **PASS  LDA  zp

		LDA 	$12
		LDA 	bak08
		Lda 	fwd08   	; (absolute)

		.echo **PASS  LDA  zpiy

		LDA 	($12),Y
		LDA 	(bak08),y
		LDA 	(fwd08),Y

		.echo **PASS  LDA  zpx

		LDA 	$12,X
		LDA 	bak08,x
		Lda 	fwd08,X 	; (absolute)

		.echo **PASS  LDA  zpxi

		LDA 	($12,X)
		LDA 	(bak08,x)
		LDA 	(fwd08,X)

		.echo **PASS  LDA  zpy  (as aby)

		Lda 	$12,Y
		Lda 	bak08,y
		Lda 	fwd08,Y


:	; forward ref for LDA

; -------------------------------

:	; backward ref for LDX

		.echo **PASS  LDX  ab

		LDX 	$1234
		LDX 	bak16
		LDX 	fwd16

		.echo **FAIL  LDX  abi

		ldx 	($1234)
		ldx 	(bak16)
		ldx 	(fwd16)

		.echo **FAIL  LDX  abx

		ldx 	$1234,X
		ldx 	bak16,x
		ldx 	fwd16,X

		.echo **PASS  LDX  aby

		LDX 	$1234,Y
		LDX 	bak16,y
		LDX 	fwd16,Y

		.echo **FAIL  LDX  acc

		ldx 	A
		ldx 	a

		.echo **PASS  LDX  imm

		LDX 	#$12
		LDX 	#bak08
		LDX 	#fwd08

		.echo **FAIL  LDX  imp

		ldx 

		.echo **PASS  LDX  pcr  (as ab)

		Ldx 	:+
		Ldx 	-
		Ldx 	+
		Ldx 	:-

		.echo **PASS  LDX  zp

		LDX 	$12
		LDX 	bak08
		Ldx 	fwd08   	; (absolute)

		.echo **FAIL  LDX  zpiy

		ldx 	($12),Y
		ldx 	(bak08),y
		ldx 	(fwd08),Y

		.echo **FAIL  LDX  zpx

		ldx 	$12,X
		ldx 	bak08,x
		ldx 	fwd08,X

		.echo **FAIL  LDX  zpxi

		ldx 	($12,X)
		ldx 	(bak08,x)
		ldx 	(fwd08,X)

		.echo **PASS  LDX  zpy

		LDX 	$12,Y
		LDX 	bak08,y
		Ldx 	fwd08,Y 	; (absolute)


:	; forward ref for LDX

; -------------------------------

:	; backward ref for LDY

		.echo **PASS  LDY  ab

		LDY 	$1234
		LDY 	bak16
		LDY 	fwd16

		.echo **FAIL  LDY  abi

		ldy 	($1234)
		ldy 	(bak16)
		ldy 	(fwd16)

		.echo **PASS  LDY  abx

		LDY 	$1234,X
		LDY 	bak16,x
		LDY 	fwd16,X

		.echo **FAIL  LDY  aby

		ldy 	$1234,Y
		ldy 	bak16,y
		ldy 	fwd16,Y

		.echo **FAIL  LDY  acc

		ldy 	A
		ldy 	a

		.echo **PASS  LDY  imm

		LDY 	#$12
		LDY 	#bak08
		LDY 	#fwd08

		.echo **FAIL  LDY  imp

		ldy 

		.echo **PASS  LDY  pcr  (as ab)

		Ldy 	:+
		Ldy 	-
		Ldy 	+
		Ldy 	:-

		.echo **PASS  LDY  zp

		LDY 	$12
		LDY 	bak08
		Ldy 	fwd08   	; (absolute)

		.echo **FAIL  LDY  zpiy

		ldy 	($12),Y
		ldy 	(bak08),y
		ldy 	(fwd08),Y

		.echo **PASS  LDY  zpx

		LDY 	$12,X
		LDY 	bak08,x
		Ldy 	fwd08,X 	; (absolute)

		.echo **FAIL  LDY  zpxi

		ldy 	($12,X)
		ldy 	(bak08,x)
		ldy 	(fwd08,X)

		.echo **FAIL  LDY  zpy

		ldy 	$12,Y
		ldy 	bak08,y
		ldy 	fwd08,Y


:	; forward ref for LDY

; -------------------------------

:	; backward ref for LSR

		.echo **PASS  LSR  ab

		LSR 	$1234
		LSR 	bak16
		LSR 	fwd16

		.echo **FAIL  LSR  abi

		lsr 	($1234)
		lsr 	(bak16)
		lsr 	(fwd16)

		.echo **PASS  LSR  abx

		LSR 	$1234,X
		LSR 	bak16,x
		LSR 	fwd16,X

		.echo **FAIL  LSR  aby

		lsr 	$1234,Y
		lsr 	bak16,y
		lsr 	fwd16,Y

		.echo **PASS  LSR  acc

		LSR 	A
		LSR 	a

		.echo **FAIL  LSR  imm

		lsr 	#$12
		lsr 	#bak08
		lsr 	#fwd08

		.echo **PASS  LSR  imp

		LSR 

		.echo **PASS  LSR  pcr  (as ab)

		Lsr 	:+
		Lsr 	-
		Lsr 	+
		Lsr 	:-

		.echo **PASS  LSR  zp

		LSR 	$12
		LSR 	bak08
		Lsr 	fwd08   	; (absolute)

		.echo **FAIL  LSR  zpiy

		lsr 	($12),Y
		lsr 	(bak08),y
		lsr 	(fwd08),Y

		.echo **PASS  LSR  zpx

		LSR 	$12,X
		LSR 	bak08,x
		Lsr 	fwd08,X 	; (absolute)

		.echo **FAIL  LSR  zpxi

		lsr 	($12,X)
		lsr 	(bak08,x)
		lsr 	(fwd08,X)

		.echo **FAIL  LSR  zpy

		lsr 	$12,Y
		lsr 	bak08,y
		lsr 	fwd08,Y


:	; forward ref for LSR

; -------------------------------

:	; backward ref for NOP

		.echo **FAIL  NOP  ab

		nop 	$1234
		nop 	bak16
		nop 	fwd16

		.echo **FAIL  NOP  abi

		nop 	($1234)
		nop 	(bak16)
		nop 	(fwd16)

		.echo **FAIL  NOP  abx

		nop 	$1234,X
		nop 	bak16,x
		nop 	fwd16,X

		.echo **FAIL  NOP  aby

		nop 	$1234,Y
		nop 	bak16,y
		nop 	fwd16,Y

		.echo **FAIL  NOP  acc

		nop 	A
		nop 	a

		.echo **FAIL  NOP  imm

		nop 	#$12
		nop 	#bak08
		nop 	#fwd08

		.echo **PASS  NOP  imp

		NOP 

		.echo **FAIL  NOP  pcr

		nop 	:+
		nop 	-
		nop 	+
		nop 	:-

		.echo **FAIL  NOP  zp

		nop 	$12
		nop 	bak08
		nop 	fwd08

		.echo **FAIL  NOP  zpiy

		nop 	($12),Y
		nop 	(bak08),y
		nop 	(fwd08),Y

		.echo **FAIL  NOP  zpx

		nop 	$12,X
		nop 	bak08,x
		nop 	fwd08,X

		.echo **FAIL  NOP  zpxi

		nop 	($12,X)
		nop 	(bak08,x)
		nop 	(fwd08,X)

		.echo **FAIL  NOP  zpy

		nop 	$12,Y
		nop 	bak08,y
		nop 	fwd08,Y


:	; forward ref for NOP

; -------------------------------

:	; backward ref for ORA

		.echo **PASS  ORA  ab

		ORA 	$1234
		ORA 	bak16
		ORA 	fwd16

		.echo **FAIL  ORA  abi

		ora 	($1234)
		ora 	(bak16)
		ora 	(fwd16)

		.echo **PASS  ORA  abx

		ORA 	$1234,X
		ORA 	bak16,x
		ORA 	fwd16,X

		.echo **PASS  ORA  aby

		ORA 	$1234,Y
		ORA 	bak16,y
		ORA 	fwd16,Y

		.echo **FAIL  ORA  acc

		ora 	A
		ora 	a

		.echo **PASS  ORA  imm

		ORA 	#$12
		ORA 	#bak08
		ORA 	#fwd08

		.echo **FAIL  ORA  imp

		ora 

		.echo **PASS  ORA  pcr  (as ab)

		Ora 	:+
		Ora 	-
		Ora 	+
		Ora 	:-

		.echo **PASS  ORA  zp

		ORA 	$12
		ORA 	bak08
		Ora 	fwd08   	; (absolute)

		.echo **PASS  ORA  zpiy

		ORA 	($12),Y
		ORA 	(bak08),y
		ORA 	(fwd08),Y

		.echo **PASS  ORA  zpx

		ORA 	$12,X
		ORA 	bak08,x
		Ora 	fwd08,X 	; (absolute)

		.echo **PASS  ORA  zpxi

		ORA 	($12,X)
		ORA 	(bak08,x)
		ORA 	(fwd08,X)

		.echo **PASS  ORA  zpy  (as aby)

		Ora 	$12,Y
		Ora 	bak08,y
		Ora 	fwd08,Y


:	; forward ref for ORA

; -------------------------------

:	; backward ref for PHA

		.echo **FAIL  PHA  ab

		pha 	$1234
		pha 	bak16
		pha 	fwd16

		.echo **FAIL  PHA  abi

		pha 	($1234)
		pha 	(bak16)
		pha 	(fwd16)

		.echo **FAIL  PHA  abx

		pha 	$1234,X
		pha 	bak16,x
		pha 	fwd16,X

		.echo **FAIL  PHA  aby

		pha 	$1234,Y
		pha 	bak16,y
		pha 	fwd16,Y

		.echo **FAIL  PHA  acc

		pha 	A
		pha 	a

		.echo **FAIL  PHA  imm

		pha 	#$12
		pha 	#bak08
		pha 	#fwd08

		.echo **PASS  PHA  imp

		PHA 

		.echo **FAIL  PHA  pcr

		pha 	:+
		pha 	-
		pha 	+
		pha 	:-

		.echo **FAIL  PHA  zp

		pha 	$12
		pha 	bak08
		pha 	fwd08

		.echo **FAIL  PHA  zpiy

		pha 	($12),Y
		pha 	(bak08),y
		pha 	(fwd08),Y

		.echo **FAIL  PHA  zpx

		pha 	$12,X
		pha 	bak08,x
		pha 	fwd08,X

		.echo **FAIL  PHA  zpxi

		pha 	($12,X)
		pha 	(bak08,x)
		pha 	(fwd08,X)

		.echo **FAIL  PHA  zpy

		pha 	$12,Y
		pha 	bak08,y
		pha 	fwd08,Y


:	; forward ref for PHA

; -------------------------------

:	; backward ref for PHP

		.echo **FAIL  PHP  ab

		php 	$1234
		php 	bak16
		php 	fwd16

		.echo **FAIL  PHP  abi

		php 	($1234)
		php 	(bak16)
		php 	(fwd16)

		.echo **FAIL  PHP  abx

		php 	$1234,X
		php 	bak16,x
		php 	fwd16,X

		.echo **FAIL  PHP  aby

		php 	$1234,Y
		php 	bak16,y
		php 	fwd16,Y

		.echo **FAIL  PHP  acc

		php 	A
		php 	a

		.echo **FAIL  PHP  imm

		php 	#$12
		php 	#bak08
		php 	#fwd08

		.echo **PASS  PHP  imp

		PHP 

		.echo **FAIL  PHP  pcr

		php 	:+
		php 	-
		php 	+
		php 	:-

		.echo **FAIL  PHP  zp

		php 	$12
		php 	bak08
		php 	fwd08

		.echo **FAIL  PHP  zpiy

		php 	($12),Y
		php 	(bak08),y
		php 	(fwd08),Y

		.echo **FAIL  PHP  zpx

		php 	$12,X
		php 	bak08,x
		php 	fwd08,X

		.echo **FAIL  PHP  zpxi

		php 	($12,X)
		php 	(bak08,x)
		php 	(fwd08,X)

		.echo **FAIL  PHP  zpy

		php 	$12,Y
		php 	bak08,y
		php 	fwd08,Y


:	; forward ref for PHP

; -------------------------------

:	; backward ref for PLA

		.echo **FAIL  PLA  ab

		pla 	$1234
		pla 	bak16
		pla 	fwd16

		.echo **FAIL  PLA  abi

		pla 	($1234)
		pla 	(bak16)
		pla 	(fwd16)

		.echo **FAIL  PLA  abx

		pla 	$1234,X
		pla 	bak16,x
		pla 	fwd16,X

		.echo **FAIL  PLA  aby

		pla 	$1234,Y
		pla 	bak16,y
		pla 	fwd16,Y

		.echo **FAIL  PLA  acc

		pla 	A
		pla 	a

		.echo **FAIL  PLA  imm

		pla 	#$12
		pla 	#bak08
		pla 	#fwd08

		.echo **PASS  PLA  imp

		PLA 

		.echo **FAIL  PLA  pcr

		pla 	:+
		pla 	-
		pla 	+
		pla 	:-

		.echo **FAIL  PLA  zp

		pla 	$12
		pla 	bak08
		pla 	fwd08

		.echo **FAIL  PLA  zpiy

		pla 	($12),Y
		pla 	(bak08),y
		pla 	(fwd08),Y

		.echo **FAIL  PLA  zpx

		pla 	$12,X
		pla 	bak08,x
		pla 	fwd08,X

		.echo **FAIL  PLA  zpxi

		pla 	($12,X)
		pla 	(bak08,x)
		pla 	(fwd08,X)

		.echo **FAIL  PLA  zpy

		pla 	$12,Y
		pla 	bak08,y
		pla 	fwd08,Y


:	; forward ref for PLA

; -------------------------------

:	; backward ref for PLP

		.echo **FAIL  PLP  ab

		plp 	$1234
		plp 	bak16
		plp 	fwd16

		.echo **FAIL  PLP  abi

		plp 	($1234)
		plp 	(bak16)
		plp 	(fwd16)

		.echo **FAIL  PLP  abx

		plp 	$1234,X
		plp 	bak16,x
		plp 	fwd16,X

		.echo **FAIL  PLP  aby

		plp 	$1234,Y
		plp 	bak16,y
		plp 	fwd16,Y

		.echo **FAIL  PLP  acc

		plp 	A
		plp 	a

		.echo **FAIL  PLP  imm

		plp 	#$12
		plp 	#bak08
		plp 	#fwd08

		.echo **PASS  PLP  imp

		PLP 

		.echo **FAIL  PLP  pcr

		plp 	:+
		plp 	-
		plp 	+
		plp 	:-

		.echo **FAIL  PLP  zp

		plp 	$12
		plp 	bak08
		plp 	fwd08

		.echo **FAIL  PLP  zpiy

		plp 	($12),Y
		plp 	(bak08),y
		plp 	(fwd08),Y

		.echo **FAIL  PLP  zpx

		plp 	$12,X
		plp 	bak08,x
		plp 	fwd08,X

		.echo **FAIL  PLP  zpxi

		plp 	($12,X)
		plp 	(bak08,x)
		plp 	(fwd08,X)

		.echo **FAIL  PLP  zpy

		plp 	$12,Y
		plp 	bak08,y
		plp 	fwd08,Y


:	; forward ref for PLP

; -------------------------------

:	; backward ref for ROL

		.echo **PASS  ROL  ab

		ROL 	$1234
		ROL 	bak16
		ROL 	fwd16

		.echo **FAIL  ROL  abi

		rol 	($1234)
		rol 	(bak16)
		rol 	(fwd16)

		.echo **PASS  ROL  abx

		ROL 	$1234,X
		ROL 	bak16,x
		ROL 	fwd16,X

		.echo **FAIL  ROL  aby

		rol 	$1234,Y
		rol 	bak16,y
		rol 	fwd16,Y

		.echo **PASS  ROL  acc

		ROL 	A
		ROL 	a

		.echo **FAIL  ROL  imm

		rol 	#$12
		rol 	#bak08
		rol 	#fwd08

		.echo **PASS  ROL  imp

		ROL 

		.echo **PASS  ROL  pcr  (as ab)

		Rol 	:+
		Rol 	-
		Rol 	+
		Rol 	:-

		.echo **PASS  ROL  zp

		ROL 	$12
		ROL 	bak08
		Rol 	fwd08   	; (absolute)

		.echo **FAIL  ROL  zpiy

		rol 	($12),Y
		rol 	(bak08),y
		rol 	(fwd08),Y

		.echo **PASS  ROL  zpx

		ROL 	$12,X
		ROL 	bak08,x
		Rol 	fwd08,X 	; (absolute)

		.echo **FAIL  ROL  zpxi

		rol 	($12,X)
		rol 	(bak08,x)
		rol 	(fwd08,X)

		.echo **FAIL  ROL  zpy

		rol 	$12,Y
		rol 	bak08,y
		rol 	fwd08,Y


:	; forward ref for ROL

; -------------------------------

:	; backward ref for ROR

		.echo **PASS  ROR  ab

		ROR 	$1234
		ROR 	bak16
		ROR 	fwd16

		.echo **FAIL  ROR  abi

		ror 	($1234)
		ror 	(bak16)
		ror 	(fwd16)

		.echo **PASS  ROR  abx

		ROR 	$1234,X
		ROR 	bak16,x
		ROR 	fwd16,X

		.echo **FAIL  ROR  aby

		ror 	$1234,Y
		ror 	bak16,y
		ror 	fwd16,Y

		.echo **PASS  ROR  acc

		ROR 	A
		ROR 	a

		.echo **FAIL  ROR  imm

		ror 	#$12
		ror 	#bak08
		ror 	#fwd08

		.echo **PASS  ROR  imp

		ROR 

		.echo **PASS  ROR  pcr  (as ab)

		Ror 	:+
		Ror 	-
		Ror 	+
		Ror 	:-

		.echo **PASS  ROR  zp

		ROR 	$12
		ROR 	bak08
		Ror 	fwd08   	; (absolute)

		.echo **FAIL  ROR  zpiy

		ror 	($12),Y
		ror 	(bak08),y
		ror 	(fwd08),Y

		.echo **PASS  ROR  zpx

		ROR 	$12,X
		ROR 	bak08,x
		Ror 	fwd08,X 	; (absolute)

		.echo **FAIL  ROR  zpxi

		ror 	($12,X)
		ror 	(bak08,x)
		ror 	(fwd08,X)

		.echo **FAIL  ROR  zpy

		ror 	$12,Y
		ror 	bak08,y
		ror 	fwd08,Y


:	; forward ref for ROR

; -------------------------------

:	; backward ref for RTI

		.echo **FAIL  RTI  ab

		rti 	$1234
		rti 	bak16
		rti 	fwd16

		.echo **FAIL  RTI  abi

		rti 	($1234)
		rti 	(bak16)
		rti 	(fwd16)

		.echo **FAIL  RTI  abx

		rti 	$1234,X
		rti 	bak16,x
		rti 	fwd16,X

		.echo **FAIL  RTI  aby

		rti 	$1234,Y
		rti 	bak16,y
		rti 	fwd16,Y

		.echo **FAIL  RTI  acc

		rti 	A
		rti 	a

		.echo **FAIL  RTI  imm

		rti 	#$12
		rti 	#bak08
		rti 	#fwd08

		.echo **PASS  RTI  imp

		RTI 

		.echo **FAIL  RTI  pcr

		rti 	:+
		rti 	-
		rti 	+
		rti 	:-

		.echo **FAIL  RTI  zp

		rti 	$12
		rti 	bak08
		rti 	fwd08

		.echo **FAIL  RTI  zpiy

		rti 	($12),Y
		rti 	(bak08),y
		rti 	(fwd08),Y

		.echo **FAIL  RTI  zpx

		rti 	$12,X
		rti 	bak08,x
		rti 	fwd08,X

		.echo **FAIL  RTI  zpxi

		rti 	($12,X)
		rti 	(bak08,x)
		rti 	(fwd08,X)

		.echo **FAIL  RTI  zpy

		rti 	$12,Y
		rti 	bak08,y
		rti 	fwd08,Y


:	; forward ref for RTI

; -------------------------------

:	; backward ref for RTS

		.echo **FAIL  RTS  ab

		rts 	$1234
		rts 	bak16
		rts 	fwd16

		.echo **FAIL  RTS  abi

		rts 	($1234)
		rts 	(bak16)
		rts 	(fwd16)

		.echo **FAIL  RTS  abx

		rts 	$1234,X
		rts 	bak16,x
		rts 	fwd16,X

		.echo **FAIL  RTS  aby

		rts 	$1234,Y
		rts 	bak16,y
		rts 	fwd16,Y

		.echo **FAIL  RTS  acc

		rts 	A
		rts 	a

		.echo **FAIL  RTS  imm

		rts 	#$12
		rts 	#bak08
		rts 	#fwd08

		.echo **PASS  RTS  imp

		RTS 

		.echo **FAIL  RTS  pcr

		rts 	:+
		rts 	-
		rts 	+
		rts 	:-

		.echo **FAIL  RTS  zp

		rts 	$12
		rts 	bak08
		rts 	fwd08

		.echo **FAIL  RTS  zpiy

		rts 	($12),Y
		rts 	(bak08),y
		rts 	(fwd08),Y

		.echo **FAIL  RTS  zpx

		rts 	$12,X
		rts 	bak08,x
		rts 	fwd08,X

		.echo **FAIL  RTS  zpxi

		rts 	($12,X)
		rts 	(bak08,x)
		rts 	(fwd08,X)

		.echo **FAIL  RTS  zpy

		rts 	$12,Y
		rts 	bak08,y
		rts 	fwd08,Y


:	; forward ref for RTS

; -------------------------------

:	; backward ref for SBC

		.echo **PASS  SBC  ab

		SBC 	$1234
		SBC 	bak16
		SBC 	fwd16

		.echo **FAIL  SBC  abi

		sbc 	($1234)
		sbc 	(bak16)
		sbc 	(fwd16)

		.echo **PASS  SBC  abx

		SBC 	$1234,X
		SBC 	bak16,x
		SBC 	fwd16,X

		.echo **PASS  SBC  aby

		SBC 	$1234,Y
		SBC 	bak16,y
		SBC 	fwd16,Y

		.echo **FAIL  SBC  acc

		sbc 	A
		sbc 	a

		.echo **PASS  SBC  imm

		SBC 	#$12
		SBC 	#bak08
		SBC 	#fwd08

		.echo **FAIL  SBC  imp

		sbc 

		.echo **PASS  SBC  pcr  (as ab)

		Sbc 	:+
		Sbc 	-
		Sbc 	+
		Sbc 	:-

		.echo **PASS  SBC  zp

		SBC 	$12
		SBC 	bak08
		Sbc 	fwd08   	; (absolute)

		.echo **PASS  SBC  zpiy

		SBC 	($12),Y
		SBC 	(bak08),y
		SBC 	(fwd08),Y

		.echo **PASS  SBC  zpx

		SBC 	$12,X
		SBC 	bak08,x
		Sbc 	fwd08,X 	; (absolute)

		.echo **PASS  SBC  zpxi

		SBC 	($12,X)
		SBC 	(bak08,x)
		SBC 	(fwd08,X)

		.echo **PASS  SBC  zpy  (as aby)

		Sbc 	$12,Y
		Sbc 	bak08,y
		Sbc 	fwd08,Y


:	; forward ref for SBC

; -------------------------------

:	; backward ref for SEC

		.echo **FAIL  SEC  ab

		sec 	$1234
		sec 	bak16
		sec 	fwd16

		.echo **FAIL  SEC  abi

		sec 	($1234)
		sec 	(bak16)
		sec 	(fwd16)

		.echo **FAIL  SEC  abx

		sec 	$1234,X
		sec 	bak16,x
		sec 	fwd16,X

		.echo **FAIL  SEC  aby

		sec 	$1234,Y
		sec 	bak16,y
		sec 	fwd16,Y

		.echo **FAIL  SEC  acc

		sec 	A
		sec 	a

		.echo **FAIL  SEC  imm

		sec 	#$12
		sec 	#bak08
		sec 	#fwd08

		.echo **PASS  SEC  imp

		SEC 

		.echo **FAIL  SEC  pcr

		sec 	:+
		sec 	-
		sec 	+
		sec 	:-

		.echo **FAIL  SEC  zp

		sec 	$12
		sec 	bak08
		sec 	fwd08

		.echo **FAIL  SEC  zpiy

		sec 	($12),Y
		sec 	(bak08),y
		sec 	(fwd08),Y

		.echo **FAIL  SEC  zpx

		sec 	$12,X
		sec 	bak08,x
		sec 	fwd08,X

		.echo **FAIL  SEC  zpxi

		sec 	($12,X)
		sec 	(bak08,x)
		sec 	(fwd08,X)

		.echo **FAIL  SEC  zpy

		sec 	$12,Y
		sec 	bak08,y
		sec 	fwd08,Y


:	; forward ref for SEC

; -------------------------------

:	; backward ref for SED

		.echo **FAIL  SED  ab

		sed 	$1234
		sed 	bak16
		sed 	fwd16

		.echo **FAIL  SED  abi

		sed 	($1234)
		sed 	(bak16)
		sed 	(fwd16)

		.echo **FAIL  SED  abx

		sed 	$1234,X
		sed 	bak16,x
		sed 	fwd16,X

		.echo **FAIL  SED  aby

		sed 	$1234,Y
		sed 	bak16,y
		sed 	fwd16,Y

		.echo **FAIL  SED  acc

		sed 	A
		sed 	a

		.echo **FAIL  SED  imm

		sed 	#$12
		sed 	#bak08
		sed 	#fwd08

		.echo **PASS  SED  imp

		SED 

		.echo **FAIL  SED  pcr

		sed 	:+
		sed 	-
		sed 	+
		sed 	:-

		.echo **FAIL  SED  zp

		sed 	$12
		sed 	bak08
		sed 	fwd08

		.echo **FAIL  SED  zpiy

		sed 	($12),Y
		sed 	(bak08),y
		sed 	(fwd08),Y

		.echo **FAIL  SED  zpx

		sed 	$12,X
		sed 	bak08,x
		sed 	fwd08,X

		.echo **FAIL  SED  zpxi

		sed 	($12,X)
		sed 	(bak08,x)
		sed 	(fwd08,X)

		.echo **FAIL  SED  zpy

		sed 	$12,Y
		sed 	bak08,y
		sed 	fwd08,Y


:	; forward ref for SED

; -------------------------------

:	; backward ref for SEI

		.echo **FAIL  SEI  ab

		sei 	$1234
		sei 	bak16
		sei 	fwd16

		.echo **FAIL  SEI  abi

		sei 	($1234)
		sei 	(bak16)
		sei 	(fwd16)

		.echo **FAIL  SEI  abx

		sei 	$1234,X
		sei 	bak16,x
		sei 	fwd16,X

		.echo **FAIL  SEI  aby

		sei 	$1234,Y
		sei 	bak16,y
		sei 	fwd16,Y

		.echo **FAIL  SEI  acc

		sei 	A
		sei 	a

		.echo **FAIL  SEI  imm

		sei 	#$12
		sei 	#bak08
		sei 	#fwd08

		.echo **PASS  SEI  imp

		SEI 

		.echo **FAIL  SEI  pcr

		sei 	:+
		sei 	-
		sei 	+
		sei 	:-

		.echo **FAIL  SEI  zp

		sei 	$12
		sei 	bak08
		sei 	fwd08

		.echo **FAIL  SEI  zpiy

		sei 	($12),Y
		sei 	(bak08),y
		sei 	(fwd08),Y

		.echo **FAIL  SEI  zpx

		sei 	$12,X
		sei 	bak08,x
		sei 	fwd08,X

		.echo **FAIL  SEI  zpxi

		sei 	($12,X)
		sei 	(bak08,x)
		sei 	(fwd08,X)

		.echo **FAIL  SEI  zpy

		sei 	$12,Y
		sei 	bak08,y
		sei 	fwd08,Y


:	; forward ref for SEI

; -------------------------------

:	; backward ref for STA

		.echo **PASS  STA  ab

		STA 	$1234
		STA 	bak16
		STA 	fwd16

		.echo **FAIL  STA  abi

		sta 	($1234)
		sta 	(bak16)
		sta 	(fwd16)

		.echo **PASS  STA  abx

		STA 	$1234,X
		STA 	bak16,x
		STA 	fwd16,X

		.echo **PASS  STA  aby

		STA 	$1234,Y
		STA 	bak16,y
		STA 	fwd16,Y

		.echo **FAIL  STA  acc

		sta 	A
		sta 	a

		.echo **FAIL  STA  imm

		sta 	#$12
		sta 	#bak08
		sta 	#fwd08

		.echo **FAIL  STA  imp

		sta 

		.echo **PASS  STA  pcr  (as ab)

		Sta 	:+
		Sta 	-
		Sta 	+
		Sta 	:-

		.echo **PASS  STA  zp

		STA 	$12
		STA 	bak08
		Sta 	fwd08   	; (absolute)

		.echo **PASS  STA  zpiy

		STA 	($12),Y
		STA 	(bak08),y
		STA 	(fwd08),Y

		.echo **PASS  STA  zpx

		STA 	$12,X
		STA 	bak08,x
		Sta 	fwd08,X 	; (absolute)

		.echo **PASS  STA  zpxi

		STA 	($12,X)
		STA 	(bak08,x)
		STA 	(fwd08,X)

		.echo **PASS  STA  zpy  (as aby)

		Sta 	$12,Y
		Sta 	bak08,y
		Sta 	fwd08,Y


:	; forward ref for STA

; -------------------------------

:	; backward ref for STX

		.echo **PASS  STX  ab

		STX 	$1234
		STX 	bak16
		STX 	fwd16

		.echo **FAIL  STX  abi

		stx 	($1234)
		stx 	(bak16)
		stx 	(fwd16)

		.echo **FAIL  STX  abx

		stx 	$1234,X
		stx 	bak16,x
		stx 	fwd16,X

		.echo **PASS  STX  aby  (as zpy)

		Stx 	$1234,Y
		Stx 	bak16,y
		Stx 	fwd16,Y

		.echo **FAIL  STX  acc

		stx 	A
		stx 	a

		.echo **FAIL  STX  imm

		stx 	#$12
		stx 	#bak08
		stx 	#fwd08

		.echo **FAIL  STX  imp

		stx 

		.echo **PASS  STX  pcr  (as ab)

		Stx 	:+
		Stx 	-
		Stx 	+
		Stx 	:-

		.echo **PASS  STX  zp

		STX 	$12
		STX 	bak08
		Stx 	fwd08   	; (absolute)

		.echo **FAIL  STX  zpiy

		stx 	($12),Y
		stx 	(bak08),y
		stx 	(fwd08),Y

		.echo **FAIL  STX  zpx

		stx 	$12,X
		stx 	bak08,x
		stx 	fwd08,X

		.echo **FAIL  STX  zpxi

		stx 	($12,X)
		stx 	(bak08,x)
		stx 	(fwd08,X)

		.echo **PASS  STX  zpy

		STX 	$12,Y
		STX 	bak08,y
		STX 	fwd08,Y


:	; forward ref for STX

; -------------------------------

:	; backward ref for STY

		.echo **PASS  STY  ab

		STY 	$1234
		STY 	bak16
		STY 	fwd16

		.echo **FAIL  STY  abi

		sty 	($1234)
		sty 	(bak16)
		sty 	(fwd16)

		.echo **PASS  STY  abx  (as zpx)

		Sty 	$1234,X
		Sty 	bak16,x
		Sty 	fwd16,X

		.echo **FAIL  STY  aby

		sty 	$1234,Y
		sty 	bak16,y
		sty 	fwd16,Y

		.echo **FAIL  STY  acc

		sty 	A
		sty 	a

		.echo **FAIL  STY  imm

		sty 	#$12
		sty 	#bak08
		sty 	#fwd08

		.echo **FAIL  STY  imp

		sty 

		.echo **PASS  STY  pcr  (as ab)

		Sty 	:+
		Sty 	-
		Sty 	+
		Sty 	:-

		.echo **PASS  STY  zp

		STY 	$12
		STY 	bak08
		Sty 	fwd08   	; (absolute)

		.echo **FAIL  STY  zpiy

		sty 	($12),Y
		sty 	(bak08),y
		sty 	(fwd08),Y

		.echo **PASS  STY  zpx

		STY 	$12,X
		STY 	bak08,x
		STY 	fwd08,X

		.echo **FAIL  STY  zpxi

		sty 	($12,X)
		sty 	(bak08,x)
		sty 	(fwd08,X)

		.echo **FAIL  STY  zpy

		sty 	$12,Y
		sty 	bak08,y
		sty 	fwd08,Y


:	; forward ref for STY

; -------------------------------

:	; backward ref for TAX

		.echo **FAIL  TAX  ab

		tax 	$1234
		tax 	bak16
		tax 	fwd16

		.echo **FAIL  TAX  abi

		tax 	($1234)
		tax 	(bak16)
		tax 	(fwd16)

		.echo **FAIL  TAX  abx

		tax 	$1234,X
		tax 	bak16,x
		tax 	fwd16,X

		.echo **FAIL  TAX  aby

		tax 	$1234,Y
		tax 	bak16,y
		tax 	fwd16,Y

		.echo **FAIL  TAX  acc

		tax 	A
		tax 	a

		.echo **FAIL  TAX  imm

		tax 	#$12
		tax 	#bak08
		tax 	#fwd08

		.echo **PASS  TAX  imp

		TAX 

		.echo **FAIL  TAX  pcr

		tax 	:+
		tax 	-
		tax 	+
		tax 	:-

		.echo **FAIL  TAX  zp

		tax 	$12
		tax 	bak08
		tax 	fwd08

		.echo **FAIL  TAX  zpiy

		tax 	($12),Y
		tax 	(bak08),y
		tax 	(fwd08),Y

		.echo **FAIL  TAX  zpx

		tax 	$12,X
		tax 	bak08,x
		tax 	fwd08,X

		.echo **FAIL  TAX  zpxi

		tax 	($12,X)
		tax 	(bak08,x)
		tax 	(fwd08,X)

		.echo **FAIL  TAX  zpy

		tax 	$12,Y
		tax 	bak08,y
		tax 	fwd08,Y


:	; forward ref for TAX

; -------------------------------

:	; backward ref for TAY

		.echo **FAIL  TAY  ab

		tay 	$1234
		tay 	bak16
		tay 	fwd16

		.echo **FAIL  TAY  abi

		tay 	($1234)
		tay 	(bak16)
		tay 	(fwd16)

		.echo **FAIL  TAY  abx

		tay 	$1234,X
		tay 	bak16,x
		tay 	fwd16,X

		.echo **FAIL  TAY  aby

		tay 	$1234,Y
		tay 	bak16,y
		tay 	fwd16,Y

		.echo **FAIL  TAY  acc

		tay 	A
		tay 	a

		.echo **FAIL  TAY  imm

		tay 	#$12
		tay 	#bak08
		tay 	#fwd08

		.echo **PASS  TAY  imp

		TAY 

		.echo **FAIL  TAY  pcr

		tay 	:+
		tay 	-
		tay 	+
		tay 	:-

		.echo **FAIL  TAY  zp

		tay 	$12
		tay 	bak08
		tay 	fwd08

		.echo **FAIL  TAY  zpiy

		tay 	($12),Y
		tay 	(bak08),y
		tay 	(fwd08),Y

		.echo **FAIL  TAY  zpx

		tay 	$12,X
		tay 	bak08,x
		tay 	fwd08,X

		.echo **FAIL  TAY  zpxi

		tay 	($12,X)
		tay 	(bak08,x)
		tay 	(fwd08,X)

		.echo **FAIL  TAY  zpy

		tay 	$12,Y
		tay 	bak08,y
		tay 	fwd08,Y


:	; forward ref for TAY

; -------------------------------

:	; backward ref for TSX

		.echo **FAIL  TSX  ab

		tsx 	$1234
		tsx 	bak16
		tsx 	fwd16

		.echo **FAIL  TSX  abi

		tsx 	($1234)
		tsx 	(bak16)
		tsx 	(fwd16)

		.echo **FAIL  TSX  abx

		tsx 	$1234,X
		tsx 	bak16,x
		tsx 	fwd16,X

		.echo **FAIL  TSX  aby

		tsx 	$1234,Y
		tsx 	bak16,y
		tsx 	fwd16,Y

		.echo **FAIL  TSX  acc

		tsx 	A
		tsx 	a

		.echo **FAIL  TSX  imm

		tsx 	#$12
		tsx 	#bak08
		tsx 	#fwd08

		.echo **PASS  TSX  imp

		TSX 

		.echo **FAIL  TSX  pcr

		tsx 	:+
		tsx 	-
		tsx 	+
		tsx 	:-

		.echo **FAIL  TSX  zp

		tsx 	$12
		tsx 	bak08
		tsx 	fwd08

		.echo **FAIL  TSX  zpiy

		tsx 	($12),Y
		tsx 	(bak08),y
		tsx 	(fwd08),Y

		.echo **FAIL  TSX  zpx

		tsx 	$12,X
		tsx 	bak08,x
		tsx 	fwd08,X

		.echo **FAIL  TSX  zpxi

		tsx 	($12,X)
		tsx 	(bak08,x)
		tsx 	(fwd08,X)

		.echo **FAIL  TSX  zpy

		tsx 	$12,Y
		tsx 	bak08,y
		tsx 	fwd08,Y


:	; forward ref for TSX

; -------------------------------

:	; backward ref for TXA

		.echo **FAIL  TXA  ab

		txa 	$1234
		txa 	bak16
		txa 	fwd16

		.echo **FAIL  TXA  abi

		txa 	($1234)
		txa 	(bak16)
		txa 	(fwd16)

		.echo **FAIL  TXA  abx

		txa 	$1234,X
		txa 	bak16,x
		txa 	fwd16,X

		.echo **FAIL  TXA  aby

		txa 	$1234,Y
		txa 	bak16,y
		txa 	fwd16,Y

		.echo **FAIL  TXA  acc

		txa 	A
		txa 	a

		.echo **FAIL  TXA  imm

		txa 	#$12
		txa 	#bak08
		txa 	#fwd08

		.echo **PASS  TXA  imp

		TXA 

		.echo **FAIL  TXA  pcr

		txa 	:+
		txa 	-
		txa 	+
		txa 	:-

		.echo **FAIL  TXA  zp

		txa 	$12
		txa 	bak08
		txa 	fwd08

		.echo **FAIL  TXA  zpiy

		txa 	($12),Y
		txa 	(bak08),y
		txa 	(fwd08),Y

		.echo **FAIL  TXA  zpx

		txa 	$12,X
		txa 	bak08,x
		txa 	fwd08,X

		.echo **FAIL  TXA  zpxi

		txa 	($12,X)
		txa 	(bak08,x)
		txa 	(fwd08,X)

		.echo **FAIL  TXA  zpy

		txa 	$12,Y
		txa 	bak08,y
		txa 	fwd08,Y


:	; forward ref for TXA

; -------------------------------

:	; backward ref for TXS

		.echo **FAIL  TXS  ab

		txs 	$1234
		txs 	bak16
		txs 	fwd16

		.echo **FAIL  TXS  abi

		txs 	($1234)
		txs 	(bak16)
		txs 	(fwd16)

		.echo **FAIL  TXS  abx

		txs 	$1234,X
		txs 	bak16,x
		txs 	fwd16,X

		.echo **FAIL  TXS  aby

		txs 	$1234,Y
		txs 	bak16,y
		txs 	fwd16,Y

		.echo **FAIL  TXS  acc

		txs 	A
		txs 	a

		.echo **FAIL  TXS  imm

		txs 	#$12
		txs 	#bak08
		txs 	#fwd08

		.echo **PASS  TXS  imp

		TXS 

		.echo **FAIL  TXS  pcr

		txs 	:+
		txs 	-
		txs 	+
		txs 	:-

		.echo **FAIL  TXS  zp

		txs 	$12
		txs 	bak08
		txs 	fwd08

		.echo **FAIL  TXS  zpiy

		txs 	($12),Y
		txs 	(bak08),y
		txs 	(fwd08),Y

		.echo **FAIL  TXS  zpx

		txs 	$12,X
		txs 	bak08,x
		txs 	fwd08,X

		.echo **FAIL  TXS  zpxi

		txs 	($12,X)
		txs 	(bak08,x)
		txs 	(fwd08,X)

		.echo **FAIL  TXS  zpy

		txs 	$12,Y
		txs 	bak08,y
		txs 	fwd08,Y


:	; forward ref for TXS

; -------------------------------

:	; backward ref for TYA

		.echo **FAIL  TYA  ab

		tya 	$1234
		tya 	bak16
		tya 	fwd16

		.echo **FAIL  TYA  abi

		tya 	($1234)
		tya 	(bak16)
		tya 	(fwd16)

		.echo **FAIL  TYA  abx

		tya 	$1234,X
		tya 	bak16,x
		tya 	fwd16,X

		.echo **FAIL  TYA  aby

		tya 	$1234,Y
		tya 	bak16,y
		tya 	fwd16,Y

		.echo **FAIL  TYA  acc

		tya 	A
		tya 	a

		.echo **FAIL  TYA  imm

		tya 	#$12
		tya 	#bak08
		tya 	#fwd08

		.echo **PASS  TYA  imp

		TYA 

		.echo **FAIL  TYA  pcr

		tya 	:+
		tya 	-
		tya 	+
		tya 	:-

		.echo **FAIL  TYA  zp

		tya 	$12
		tya 	bak08
		tya 	fwd08

		.echo **FAIL  TYA  zpiy

		tya 	($12),Y
		tya 	(bak08),y
		tya 	(fwd08),Y

		.echo **FAIL  TYA  zpx

		tya 	$12,X
		tya 	bak08,x
		tya 	fwd08,X

		.echo **FAIL  TYA  zpxi

		tya 	($12,X)
		tya 	(bak08,x)
		tya 	(fwd08,X)

		.echo **FAIL  TYA  zpy

		tya 	$12,Y
		tya 	bak08,y
		tya 	fwd08,Y


:	; forward ref for TYA

; -------------------------------

; forward reference

fwd32	.equ	$89ABCDEF
fwd24	.equ	$456789
fwd16	.equ	$1234
fwd08	.equ	$12

; -------------------------------

		.end

; -------------------------------

; 620 pass
; 1526 fail
