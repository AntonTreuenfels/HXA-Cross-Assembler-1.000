; Hobby Cross-Assembler HXA65 Test W65C816Sd
; W65C816S\Instruction Set
; ok: W65C816S Forced Address Modes

; generated by MODE65.PY - Fri Nov 29 11:59:15 2024

; no errors to detect

; -------------------------------

		.listfile
		.errfile

		.maxerr	10000		; increase default count

; -------------------------------

		.cpu	W65C816S
		.org	$1000

; -------------------------------

; backward reference

bak08	.equ	$12
bak16	.equ	$1234
bak24	.equ	$456789
bak32	.equ	$89ABCDEF

; -------------------------------

		; check ADC
		; 7 mnemonics with modes ['ab', 'abx', 'aby', 'imm', 'lab', 'labx', 'lzpi', 'lzpiy', 'sr', 'sriy', 'zp', 'zpi', 'zpiy', 'zpx', 'zpxi']
		; AND
		; CMP
		; EOR
		; LDA
		; ORA
		; SBC

:	; backward ref for ADC

		; **PASS  ADC  ab as ab

		.assume addr:absolute
		ADC 	$4365
		.assume addr:absolute
		ADC 	fwd16
		.assume addr:absolute
		ADC 	bak16

		; **PASS  ADC  ab as zp

		.assume addr:zeropage
		ADC 	$4365
		.assume addr:zeropage
		ADC 	fwd16
		.assume addr:zeropage
		ADC 	bak16

		; **PASS  ADC  ab as lab

		.assume addr:long
		ADC 	$4365
		.assume addr:long
		ADC 	fwd16
		.assume addr:long
		ADC 	bak16

		; **PASS  ADC  abx as abx

		.assume addr:absolute
		ADC 	$4365,X
		.assume addr:absolute
		ADC 	fwd16,X
		.assume addr:absolute
		ADC 	bak16,X

		; **PASS  ADC  abx as zpx

		.assume addr:zeropage
		ADC 	$4365,X
		.assume addr:zeropage
		ADC 	fwd16,X
		.assume addr:zeropage
		ADC 	bak16,X

		; **PASS  ADC  abx as labx

		.assume addr:long
		ADC 	$4365,X
		.assume addr:long
		ADC 	fwd16,X
		.assume addr:long
		ADC 	bak16,X

		; **PASS  ADC  aby as aby

		.assume addr:absolute
		ADC 	$4365,Y
		.assume addr:absolute
		ADC 	fwd16,Y
		.assume addr:absolute
		ADC 	bak16,Y

; 'imm' cannot be forced

		; **PASS  ADC  lab as ab

		.assume addr:absolute
		ADC 	$547698
		.assume addr:absolute
		ADC 	bak24
		.assume addr:absolute
		ADC 	fwd24

		; **PASS  ADC  lab as zp

		.assume addr:zeropage
		ADC 	$547698
		.assume addr:zeropage
		ADC 	bak24
		.assume addr:zeropage
		ADC 	fwd24

		; **PASS  ADC  lab as lab

		.assume addr:long
		ADC 	$547698
		.assume addr:long
		ADC 	bak24
		.assume addr:long
		ADC 	fwd24

		; **PASS  ADC  labx as abx

		.assume addr:absolute
		ADC 	$547698,x
		.assume addr:absolute
		ADC 	bak24,x
		.assume addr:absolute
		ADC 	fwd24,x

		; **PASS  ADC  labx as zpx

		.assume addr:zeropage
		ADC 	$547698,x
		.assume addr:zeropage
		ADC 	bak24,x
		.assume addr:zeropage
		ADC 	fwd24,x

		; **PASS  ADC  labx as labx

		.assume addr:long
		ADC 	$547698,x
		.assume addr:long
		ADC 	bak24,x
		.assume addr:long
		ADC 	fwd24,x

		; **PASS  ADC  lzpi as zpi

		.assume addr:zeropage
		ADC 	[$32]
		.assume addr:zeropage
		ADC 	[bak08]
		.assume addr:zeropage
		ADC 	[fwd08]

		; **PASS  ADC  lzpi as lzpi

		.assume addr:long
		ADC 	[$32]
		.assume addr:long
		ADC 	[bak08]
		.assume addr:long
		ADC 	[fwd08]

		; **PASS  ADC  lzpiy as zpiy

		.assume addr:zeropage
		ADC 	[$32],Y
		.assume addr:zeropage
		ADC 	[bak08],Y
		.assume addr:zeropage
		ADC 	[fwd08],Y

		; **PASS  ADC  lzpiy as lzpiy

		.assume addr:long
		ADC 	[$32],Y
		.assume addr:long
		ADC 	[bak08],Y
		.assume addr:long
		ADC 	[fwd08],Y

; 'sr' cannot be forced

; 'sriy' cannot be forced

		; **PASS  ADC  zp as ab

		.assume addr:absolute
		ADC 	$32
		.assume addr:absolute
		ADC 	bak08
		.assume addr:absolute
		ADC 	fwd08

		; **PASS  ADC  zp as zp

		.assume addr:zeropage
		ADC 	$32
		.assume addr:zeropage
		ADC 	bak08
		.assume addr:zeropage
		ADC 	fwd08

		; **PASS  ADC  zp as lab

		.assume addr:long
		ADC 	$32
		.assume addr:long
		ADC 	bak08
		.assume addr:long
		ADC 	fwd08

		; **PASS  ADC  zpi as zpi

		.assume addr:zeropage
		ADC 	($32)
		.assume addr:zeropage
		ADC 	(bak08)
		.assume addr:zeropage
		ADC 	(fwd08)

		; **PASS  ADC  zpiy as zpiy

		.assume addr:zeropage
		ADC 	($32),y
		.assume addr:zeropage
		ADC 	(bak08),y
		.assume addr:zeropage
		ADC 	(fwd08),y

		; **PASS  ADC  zpiy as lzpiy

		.assume addr:long
		ADC 	($32),y
		.assume addr:long
		ADC 	(bak08),y
		.assume addr:long
		ADC 	(fwd08),y

		; **PASS  ADC  zpx as abx

		.assume addr:absolute
		ADC 	$32,x
		.assume addr:absolute
		ADC 	bak08,x
		.assume addr:absolute
		ADC 	fwd08,x

		; **PASS  ADC  zpx as zpx

		.assume addr:zeropage
		ADC 	$32,x
		.assume addr:zeropage
		ADC 	bak08,x
		.assume addr:zeropage
		ADC 	fwd08,x

		; **PASS  ADC  zpx as labx

		.assume addr:long
		ADC 	$32,x
		.assume addr:long
		ADC 	bak08,x
		.assume addr:long
		ADC 	fwd08,x

		; **PASS  ADC  zpxi as zpxi

		.assume addr:zeropage
		ADC 	($32,x)
		.assume addr:zeropage
		ADC 	(bak08,x)
		.assume addr:zeropage
		ADC 	(fwd08,x)


:	; forward ref for ADC

; -------------------------------

		; check ASL
		; 6 mnemonics with modes ['ab', 'abx', 'acc', 'imp', 'zp', 'zpx']
		; DEC
		; INC
		; LSR
		; ROL
		; ROR

:	; backward ref for ASL

		; **PASS  ASL  ab as ab

		.assume addr:absolute
		ASL 	$4365
		.assume addr:absolute
		ASL 	fwd16
		.assume addr:absolute
		ASL 	bak16

		; **PASS  ASL  ab as zp

		.assume addr:zeropage
		ASL 	$4365
		.assume addr:zeropage
		ASL 	fwd16
		.assume addr:zeropage
		ASL 	bak16

		; **PASS  ASL  abx as abx

		.assume addr:absolute
		ASL 	$4365,X
		.assume addr:absolute
		ASL 	fwd16,X
		.assume addr:absolute
		ASL 	bak16,X

		; **PASS  ASL  abx as zpx

		.assume addr:zeropage
		ASL 	$4365,X
		.assume addr:zeropage
		ASL 	fwd16,X
		.assume addr:zeropage
		ASL 	bak16,X

; 'acc' cannot be forced

; 'imp' cannot be forced

		; **PASS  ASL  zp as ab

		.assume addr:absolute
		ASL 	$32
		.assume addr:absolute
		ASL 	bak08
		.assume addr:absolute
		ASL 	fwd08

		; **PASS  ASL  zp as zp

		.assume addr:zeropage
		ASL 	$32
		.assume addr:zeropage
		ASL 	bak08
		.assume addr:zeropage
		ASL 	fwd08

		; **PASS  ASL  zpx as abx

		.assume addr:absolute
		ASL 	$32,x
		.assume addr:absolute
		ASL 	bak08,x
		.assume addr:absolute
		ASL 	fwd08,x

		; **PASS  ASL  zpx as zpx

		.assume addr:zeropage
		ASL 	$32,x
		.assume addr:zeropage
		ASL 	bak08,x
		.assume addr:zeropage
		ASL 	fwd08,x


:	; forward ref for ASL

; -------------------------------

		; check BCC
		; 11 mnemonics with modes ['pcr']
		; BCS
		; BEQ
		; BGE
		; BLT
		; BMI
		; BNE
		; BPL
		; BRA
		; BVC
		; BVS

:	; backward ref for BCC

; 'pcr' cannot be forced


:	; forward ref for BCC

; -------------------------------

		; check BIT
		; 2 mnemonics with modes ['ab', 'abx', 'imm', 'zp', 'zpx']
		; LDY

:	; backward ref for BIT

		; **PASS  BIT  ab as ab

		.assume addr:absolute
		BIT 	$4365
		.assume addr:absolute
		BIT 	fwd16
		.assume addr:absolute
		BIT 	bak16

		; **PASS  BIT  ab as zp

		.assume addr:zeropage
		BIT 	$4365
		.assume addr:zeropage
		BIT 	fwd16
		.assume addr:zeropage
		BIT 	bak16

		; **PASS  BIT  abx as abx

		.assume addr:absolute
		BIT 	$4365,X
		.assume addr:absolute
		BIT 	fwd16,X
		.assume addr:absolute
		BIT 	bak16,X

		; **PASS  BIT  abx as zpx

		.assume addr:zeropage
		BIT 	$4365,X
		.assume addr:zeropage
		BIT 	fwd16,X
		.assume addr:zeropage
		BIT 	bak16,X

; 'imm' cannot be forced

		; **PASS  BIT  zp as ab

		.assume addr:absolute
		BIT 	$32
		.assume addr:absolute
		BIT 	bak08
		.assume addr:absolute
		BIT 	fwd08

		; **PASS  BIT  zp as zp

		.assume addr:zeropage
		BIT 	$32
		.assume addr:zeropage
		BIT 	bak08
		.assume addr:zeropage
		BIT 	fwd08

		; **PASS  BIT  zpx as abx

		.assume addr:absolute
		BIT 	$32,x
		.assume addr:absolute
		BIT 	bak08,x
		.assume addr:absolute
		BIT 	fwd08,x

		; **PASS  BIT  zpx as zpx

		.assume addr:zeropage
		BIT 	$32,x
		.assume addr:zeropage
		BIT 	bak08,x
		.assume addr:zeropage
		BIT 	fwd08,x


:	; forward ref for BIT

; -------------------------------

		; check BRK
		; 3 mnemonics with modes ['imm', 'imp', 'zp']
		; COP
		; WDM

:	; backward ref for BRK

; 'imm' cannot be forced

; 'imp' cannot be forced

		; **PASS  BRK  zp as zp

		.assume addr:zeropage
		BRK 	$32
		.assume addr:zeropage
		BRK 	bak08
		.assume addr:zeropage
		BRK 	fwd08


:	; forward ref for BRK

; -------------------------------

		; check BRL
		; 2 mnemonics with modes ['lpcr']
		; PER

:	; backward ref for BRL

; 'lpcr' cannot be forced


:	; forward ref for BRL

; -------------------------------

		; check CLC
		; 51 mnemonics with modes ['imp']
		; CLD
		; CLI
		; CLV
		; DEA
		; DEX
		; DEY
		; INA
		; INX
		; INY
		; NOP
		; PHA
		; PHB
		; PHD
		; PHK
		; PHP
		; PHX
		; PHY
		; PLA
		; PLB
		; PLD
		; PLP
		; PLX
		; PLY
		; RTI
		; RTL
		; RTS
		; SEC
		; SED
		; SEI
		; STP
		; SWP
		; TAD
		; TAS
		; TAX
		; TAY
		; TCD
		; TCS
		; TDA
		; TDC
		; TSA
		; TSC
		; TSX
		; TXA
		; TXS
		; TXY
		; TYA
		; TYX
		; WAI
		; XBA
		; XCE

:	; backward ref for CLC

; 'imp' cannot be forced


:	; forward ref for CLC

; -------------------------------

		; check CPX
		; 2 mnemonics with modes ['ab', 'imm', 'zp']
		; CPY

:	; backward ref for CPX

		; **PASS  CPX  ab as ab

		.assume addr:absolute
		CPX 	$4365
		.assume addr:absolute
		CPX 	fwd16
		.assume addr:absolute
		CPX 	bak16

		; **PASS  CPX  ab as zp

		.assume addr:zeropage
		CPX 	$4365
		.assume addr:zeropage
		CPX 	fwd16
		.assume addr:zeropage
		CPX 	bak16

; 'imm' cannot be forced

		; **PASS  CPX  zp as ab

		.assume addr:absolute
		CPX 	$32
		.assume addr:absolute
		CPX 	bak08
		.assume addr:absolute
		CPX 	fwd08

		; **PASS  CPX  zp as zp

		.assume addr:zeropage
		CPX 	$32
		.assume addr:zeropage
		CPX 	bak08
		.assume addr:zeropage
		CPX 	fwd08


:	; forward ref for CPX

; -------------------------------

		; check JML
		; 1 mnemonics with modes ['abi', 'lab', 'labi']

:	; backward ref for JML

		; **PASS  JML  abi as abi

		.assume addr:absolute
		JML 	($4365)
		.assume addr:absolute
		JML 	(fwd16)
		.assume addr:absolute
		JML 	(bak16)

		; **PASS  JML  abi as labi

		.assume addr:long
		JML 	($4365)
		.assume addr:long
		JML 	(fwd16)
		.assume addr:long
		JML 	(bak16)

		; **PASS  JML  lab as lab

		.assume addr:long
		JML 	$547698
		.assume addr:long
		JML 	bak24
		.assume addr:long
		JML 	fwd24

		; **PASS  JML  labi as abi

		.assume addr:absolute
		JML 	[$4365]
		.assume addr:absolute
		JML 	[fwd16]
		.assume addr:absolute
		JML 	[bak16]

		; **PASS  JML  labi as labi

		.assume addr:long
		JML 	[$4365]
		.assume addr:long
		JML 	[fwd16]
		.assume addr:long
		JML 	[bak16]


:	; forward ref for JML

; -------------------------------

		; check JMP
		; 1 mnemonics with modes ['ab', 'abi', 'abxi', 'labi']

:	; backward ref for JMP

		; **PASS  JMP  ab as ab

		.assume addr:absolute
		JMP 	$4365
		.assume addr:absolute
		JMP 	fwd16
		.assume addr:absolute
		JMP 	bak16

		; **PASS  JMP  abi as abi

		.assume addr:absolute
		JMP 	($4365)
		.assume addr:absolute
		JMP 	(fwd16)
		.assume addr:absolute
		JMP 	(bak16)

		; **PASS  JMP  abi as labi

		.assume addr:long
		JMP 	($4365)
		.assume addr:long
		JMP 	(fwd16)
		.assume addr:long
		JMP 	(bak16)

		; **PASS  JMP  abxi as abxi

		.assume addr:absolute
		JMP 	($4365,X)
		.assume addr:absolute
		JMP 	(fwd16,X)
		.assume addr:absolute
		JMP 	(bak16,X)

		; **PASS  JMP  labi as abi

		.assume addr:absolute
		JMP 	[$4365]
		.assume addr:absolute
		JMP 	[fwd16]
		.assume addr:absolute
		JMP 	[bak16]

		; **PASS  JMP  labi as labi

		.assume addr:long
		JMP 	[$4365]
		.assume addr:long
		JMP 	[fwd16]
		.assume addr:long
		JMP 	[bak16]


:	; forward ref for JMP

; -------------------------------

		; check JSL
		; 1 mnemonics with modes ['lab']

:	; backward ref for JSL

		; **PASS  JSL  lab as lab

		.assume addr:long
		JSL 	$547698
		.assume addr:long
		JSL 	bak24
		.assume addr:long
		JSL 	fwd24


:	; forward ref for JSL

; -------------------------------

		; check JSR
		; 1 mnemonics with modes ['ab', 'abxi']

:	; backward ref for JSR

		; **PASS  JSR  ab as ab

		.assume addr:absolute
		JSR 	$4365
		.assume addr:absolute
		JSR 	fwd16
		.assume addr:absolute
		JSR 	bak16

		; **PASS  JSR  abxi as abxi

		.assume addr:absolute
		JSR 	($4365,X)
		.assume addr:absolute
		JSR 	(fwd16,X)
		.assume addr:absolute
		JSR 	(bak16,X)


:	; forward ref for JSR

; -------------------------------

		; check LDX
		; 1 mnemonics with modes ['ab', 'aby', 'imm', 'zp', 'zpy']

:	; backward ref for LDX

		; **PASS  LDX  ab as ab

		.assume addr:absolute
		LDX 	$4365
		.assume addr:absolute
		LDX 	fwd16
		.assume addr:absolute
		LDX 	bak16

		; **PASS  LDX  ab as zp

		.assume addr:zeropage
		LDX 	$4365
		.assume addr:zeropage
		LDX 	fwd16
		.assume addr:zeropage
		LDX 	bak16

		; **PASS  LDX  aby as aby

		.assume addr:absolute
		LDX 	$4365,Y
		.assume addr:absolute
		LDX 	fwd16,Y
		.assume addr:absolute
		LDX 	bak16,Y

		; **PASS  LDX  aby as zpy

		.assume addr:zeropage
		LDX 	$4365,Y
		.assume addr:zeropage
		LDX 	fwd16,Y
		.assume addr:zeropage
		LDX 	bak16,Y

; 'imm' cannot be forced

		; **PASS  LDX  zp as ab

		.assume addr:absolute
		LDX 	$32
		.assume addr:absolute
		LDX 	bak08
		.assume addr:absolute
		LDX 	fwd08

		; **PASS  LDX  zp as zp

		.assume addr:zeropage
		LDX 	$32
		.assume addr:zeropage
		LDX 	bak08
		.assume addr:zeropage
		LDX 	fwd08

		; **PASS  LDX  zpy as aby

		.assume addr:absolute
		LDX 	$32,y
		.assume addr:absolute
		LDX 	bak08,y
		.assume addr:absolute
		LDX 	fwd08,y

		; **PASS  LDX  zpy as zpy

		.assume addr:zeropage
		LDX 	$32,y
		.assume addr:zeropage
		LDX 	bak08,y
		.assume addr:zeropage
		LDX 	fwd08,y


:	; forward ref for LDX

; -------------------------------

		; check MVN
		; 2 mnemonics with modes ['bmv']
		; MVP

:	; backward ref for MVN

; 'bmv' cannot be forced


:	; forward ref for MVN

; -------------------------------

		; check PEA
		; 1 mnemonics with modes ['ab', 'imm']

:	; backward ref for PEA

		; **PASS  PEA  ab as ab

		.assume addr:absolute
		PEA 	$4365
		.assume addr:absolute
		PEA 	fwd16
		.assume addr:absolute
		PEA 	bak16

; 'imm' cannot be forced


:	; forward ref for PEA

; -------------------------------

		; check PEI
		; 1 mnemonics with modes ['zp', 'zpi']

:	; backward ref for PEI

		; **PASS  PEI  zp as zp

		.assume addr:zeropage
		PEI 	$32
		.assume addr:zeropage
		PEI 	bak08
		.assume addr:zeropage
		PEI 	fwd08

		; **PASS  PEI  zpi as zpi

		.assume addr:zeropage
		PEI 	($32)
		.assume addr:zeropage
		PEI 	(bak08)
		.assume addr:zeropage
		PEI 	(fwd08)


:	; forward ref for PEI

; -------------------------------

		; check REP
		; 2 mnemonics with modes ['imm']
		; SEP

:	; backward ref for REP

; 'imm' cannot be forced


:	; forward ref for REP

; -------------------------------

		; check STA
		; 1 mnemonics with modes ['ab', 'abx', 'aby', 'lab', 'labx', 'lzpi', 'lzpiy', 'sr', 'sriy', 'zp', 'zpi', 'zpiy', 'zpx', 'zpxi']

:	; backward ref for STA

		; **PASS  STA  ab as ab

		.assume addr:absolute
		STA 	$4365
		.assume addr:absolute
		STA 	fwd16
		.assume addr:absolute
		STA 	bak16

		; **PASS  STA  ab as zp

		.assume addr:zeropage
		STA 	$4365
		.assume addr:zeropage
		STA 	fwd16
		.assume addr:zeropage
		STA 	bak16

		; **PASS  STA  ab as lab

		.assume addr:long
		STA 	$4365
		.assume addr:long
		STA 	fwd16
		.assume addr:long
		STA 	bak16

		; **PASS  STA  abx as abx

		.assume addr:absolute
		STA 	$4365,X
		.assume addr:absolute
		STA 	fwd16,X
		.assume addr:absolute
		STA 	bak16,X

		; **PASS  STA  abx as zpx

		.assume addr:zeropage
		STA 	$4365,X
		.assume addr:zeropage
		STA 	fwd16,X
		.assume addr:zeropage
		STA 	bak16,X

		; **PASS  STA  abx as labx

		.assume addr:long
		STA 	$4365,X
		.assume addr:long
		STA 	fwd16,X
		.assume addr:long
		STA 	bak16,X

		; **PASS  STA  aby as aby

		.assume addr:absolute
		STA 	$4365,Y
		.assume addr:absolute
		STA 	fwd16,Y
		.assume addr:absolute
		STA 	bak16,Y

		; **PASS  STA  lab as ab

		.assume addr:absolute
		STA 	$547698
		.assume addr:absolute
		STA 	bak24
		.assume addr:absolute
		STA 	fwd24

		; **PASS  STA  lab as zp

		.assume addr:zeropage
		STA 	$547698
		.assume addr:zeropage
		STA 	bak24
		.assume addr:zeropage
		STA 	fwd24

		; **PASS  STA  lab as lab

		.assume addr:long
		STA 	$547698
		.assume addr:long
		STA 	bak24
		.assume addr:long
		STA 	fwd24

		; **PASS  STA  labx as abx

		.assume addr:absolute
		STA 	$547698,x
		.assume addr:absolute
		STA 	bak24,x
		.assume addr:absolute
		STA 	fwd24,x

		; **PASS  STA  labx as zpx

		.assume addr:zeropage
		STA 	$547698,x
		.assume addr:zeropage
		STA 	bak24,x
		.assume addr:zeropage
		STA 	fwd24,x

		; **PASS  STA  labx as labx

		.assume addr:long
		STA 	$547698,x
		.assume addr:long
		STA 	bak24,x
		.assume addr:long
		STA 	fwd24,x

		; **PASS  STA  lzpi as zpi

		.assume addr:zeropage
		STA 	[$32]
		.assume addr:zeropage
		STA 	[bak08]
		.assume addr:zeropage
		STA 	[fwd08]

		; **PASS  STA  lzpi as lzpi

		.assume addr:long
		STA 	[$32]
		.assume addr:long
		STA 	[bak08]
		.assume addr:long
		STA 	[fwd08]

		; **PASS  STA  lzpiy as zpiy

		.assume addr:zeropage
		STA 	[$32],Y
		.assume addr:zeropage
		STA 	[bak08],Y
		.assume addr:zeropage
		STA 	[fwd08],Y

		; **PASS  STA  lzpiy as lzpiy

		.assume addr:long
		STA 	[$32],Y
		.assume addr:long
		STA 	[bak08],Y
		.assume addr:long
		STA 	[fwd08],Y

; 'sr' cannot be forced

; 'sriy' cannot be forced

		; **PASS  STA  zp as ab

		.assume addr:absolute
		STA 	$32
		.assume addr:absolute
		STA 	bak08
		.assume addr:absolute
		STA 	fwd08

		; **PASS  STA  zp as zp

		.assume addr:zeropage
		STA 	$32
		.assume addr:zeropage
		STA 	bak08
		.assume addr:zeropage
		STA 	fwd08

		; **PASS  STA  zp as lab

		.assume addr:long
		STA 	$32
		.assume addr:long
		STA 	bak08
		.assume addr:long
		STA 	fwd08

		; **PASS  STA  zpi as zpi

		.assume addr:zeropage
		STA 	($32)
		.assume addr:zeropage
		STA 	(bak08)
		.assume addr:zeropage
		STA 	(fwd08)

		; **PASS  STA  zpiy as zpiy

		.assume addr:zeropage
		STA 	($32),y
		.assume addr:zeropage
		STA 	(bak08),y
		.assume addr:zeropage
		STA 	(fwd08),y

		; **PASS  STA  zpiy as lzpiy

		.assume addr:long
		STA 	($32),y
		.assume addr:long
		STA 	(bak08),y
		.assume addr:long
		STA 	(fwd08),y

		; **PASS  STA  zpx as abx

		.assume addr:absolute
		STA 	$32,x
		.assume addr:absolute
		STA 	bak08,x
		.assume addr:absolute
		STA 	fwd08,x

		; **PASS  STA  zpx as zpx

		.assume addr:zeropage
		STA 	$32,x
		.assume addr:zeropage
		STA 	bak08,x
		.assume addr:zeropage
		STA 	fwd08,x

		; **PASS  STA  zpx as labx

		.assume addr:long
		STA 	$32,x
		.assume addr:long
		STA 	bak08,x
		.assume addr:long
		STA 	fwd08,x

		; **PASS  STA  zpxi as zpxi

		.assume addr:zeropage
		STA 	($32,x)
		.assume addr:zeropage
		STA 	(bak08,x)
		.assume addr:zeropage
		STA 	(fwd08,x)


:	; forward ref for STA

; -------------------------------

		; check STX
		; 1 mnemonics with modes ['ab', 'zp', 'zpy']

:	; backward ref for STX

		; **PASS  STX  ab as ab

		.assume addr:absolute
		STX 	$4365
		.assume addr:absolute
		STX 	fwd16
		.assume addr:absolute
		STX 	bak16

		; **PASS  STX  ab as zp

		.assume addr:zeropage
		STX 	$4365
		.assume addr:zeropage
		STX 	fwd16
		.assume addr:zeropage
		STX 	bak16

		; **PASS  STX  zp as ab

		.assume addr:absolute
		STX 	$32
		.assume addr:absolute
		STX 	bak08
		.assume addr:absolute
		STX 	fwd08

		; **PASS  STX  zp as zp

		.assume addr:zeropage
		STX 	$32
		.assume addr:zeropage
		STX 	bak08
		.assume addr:zeropage
		STX 	fwd08

		; **PASS  STX  zpy as zpy

		.assume addr:zeropage
		STX 	$32,y
		.assume addr:zeropage
		STX 	bak08,y
		.assume addr:zeropage
		STX 	fwd08,y


:	; forward ref for STX

; -------------------------------

		; check STY
		; 1 mnemonics with modes ['ab', 'zp', 'zpx']

:	; backward ref for STY

		; **PASS  STY  ab as ab

		.assume addr:absolute
		STY 	$4365
		.assume addr:absolute
		STY 	fwd16
		.assume addr:absolute
		STY 	bak16

		; **PASS  STY  ab as zp

		.assume addr:zeropage
		STY 	$4365
		.assume addr:zeropage
		STY 	fwd16
		.assume addr:zeropage
		STY 	bak16

		; **PASS  STY  zp as ab

		.assume addr:absolute
		STY 	$32
		.assume addr:absolute
		STY 	bak08
		.assume addr:absolute
		STY 	fwd08

		; **PASS  STY  zp as zp

		.assume addr:zeropage
		STY 	$32
		.assume addr:zeropage
		STY 	bak08
		.assume addr:zeropage
		STY 	fwd08

		; **PASS  STY  zpx as zpx

		.assume addr:zeropage
		STY 	$32,x
		.assume addr:zeropage
		STY 	bak08,x
		.assume addr:zeropage
		STY 	fwd08,x


:	; forward ref for STY

; -------------------------------

		; check STZ
		; 1 mnemonics with modes ['ab', 'abx', 'zp', 'zpx']

:	; backward ref for STZ

		; **PASS  STZ  ab as ab

		.assume addr:absolute
		STZ 	$4365
		.assume addr:absolute
		STZ 	fwd16
		.assume addr:absolute
		STZ 	bak16

		; **PASS  STZ  ab as zp

		.assume addr:zeropage
		STZ 	$4365
		.assume addr:zeropage
		STZ 	fwd16
		.assume addr:zeropage
		STZ 	bak16

		; **PASS  STZ  abx as abx

		.assume addr:absolute
		STZ 	$4365,X
		.assume addr:absolute
		STZ 	fwd16,X
		.assume addr:absolute
		STZ 	bak16,X

		; **PASS  STZ  abx as zpx

		.assume addr:zeropage
		STZ 	$4365,X
		.assume addr:zeropage
		STZ 	fwd16,X
		.assume addr:zeropage
		STZ 	bak16,X

		; **PASS  STZ  zp as ab

		.assume addr:absolute
		STZ 	$32
		.assume addr:absolute
		STZ 	bak08
		.assume addr:absolute
		STZ 	fwd08

		; **PASS  STZ  zp as zp

		.assume addr:zeropage
		STZ 	$32
		.assume addr:zeropage
		STZ 	bak08
		.assume addr:zeropage
		STZ 	fwd08

		; **PASS  STZ  zpx as abx

		.assume addr:absolute
		STZ 	$32,x
		.assume addr:absolute
		STZ 	bak08,x
		.assume addr:absolute
		STZ 	fwd08,x

		; **PASS  STZ  zpx as zpx

		.assume addr:zeropage
		STZ 	$32,x
		.assume addr:zeropage
		STZ 	bak08,x
		.assume addr:zeropage
		STZ 	fwd08,x


:	; forward ref for STZ

; -------------------------------

		; check TRB
		; 2 mnemonics with modes ['ab', 'zp']
		; TSB

:	; backward ref for TRB

		; **PASS  TRB  ab as ab

		.assume addr:absolute
		TRB 	$4365
		.assume addr:absolute
		TRB 	fwd16
		.assume addr:absolute
		TRB 	bak16

		; **PASS  TRB  ab as zp

		.assume addr:zeropage
		TRB 	$4365
		.assume addr:zeropage
		TRB 	fwd16
		.assume addr:zeropage
		TRB 	bak16

		; **PASS  TRB  zp as ab

		.assume addr:absolute
		TRB 	$32
		.assume addr:absolute
		TRB 	bak08
		.assume addr:absolute
		TRB 	fwd08

		; **PASS  TRB  zp as zp

		.assume addr:zeropage
		TRB 	$32
		.assume addr:zeropage
		TRB 	bak08
		.assume addr:zeropage
		TRB 	fwd08


:	; forward ref for TRB

; -------------------------------

; forward reference

fwd32	.equ	$89ABCDEF
fwd24	.equ	$456789
fwd16	.equ	$1234
fwd08	.equ	$12

; -------------------------------

		.end

; -------------------------------

; 366 pass
; 0 fail
