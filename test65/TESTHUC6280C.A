; Hobby Cross-Assembler HXA65 Error Test HUC6280c
; HUC6280\Instruction Set
; error: HUC6280 Group Rep Instructions, Not Caught Second Pass

; generated by MODE65.PY - Fri Nov 29 15:28:15 2024


; warning(s):

; errors(s):

; fatal:

; -------------------------------

		.listfile
		.errfile

		.maxerr	10000		; increase default count

; -------------------------------

		.cpu	HUC6280
		.org	$1000

; -------------------------------

; backward reference

bak08	.equ	$12
bak16	.equ	$1234
bak24	.equ	$456789
bak32	.equ	$89ABCDEF

; -------------------------------

:	; backward ref for ADC

		; check ADC
		; 7 mnemonics with modes ['ab', 'abx', 'aby', 'imm', 'zp', 'zpi', 'zpiy', 'zpx', 'zpxi']
		; AND
		; CMP
		; EOR
		; LDA
		; ORA
		; SBC

		; **PASS  ADC  pcr  (as ab)

		Adc 	:+
		Adc 	-
		Adc 	+
		Adc 	:-

		; **PASS  ADC  zpy  (as aby)

		Adc 	$12,Y
		Adc 	bak08,y
		Adc 	fwd08,Y


:	; forward ref for ADC

; -------------------------------

:	; backward ref for ASL

		; check ASL
		; 6 mnemonics with modes ['ab', 'abx', 'acc', 'imp', 'zp', 'zpx']
		; DEC
		; INC
		; LSR
		; ROL
		; ROR

		; **PASS  ASL  pcr  (as ab)

		Asl 	:+
		Asl 	-
		Asl 	+
		Asl 	:-


:	; forward ref for ASL

; -------------------------------

:	; backward ref for BIT

		; check BIT
		; 2 mnemonics with modes ['ab', 'abx', 'imm', 'zp', 'zpx']
		; LDY

		; **PASS  BIT  pcr  (as ab)

		Bit 	:+
		Bit 	-
		Bit 	+
		Bit 	:-


:	; forward ref for BIT

; -------------------------------

:	; backward ref for CPX

		; check CPX
		; 2 mnemonics with modes ['ab', 'imm', 'zp']
		; CPY

		; **PASS  CPX  pcr  (as ab)

		Cpx 	:+
		Cpx 	-
		Cpx 	+
		Cpx 	:-


:	; forward ref for CPX

; -------------------------------

:	; backward ref for JMP

		; check JMP
		; 1 mnemonics with modes ['ab', 'abi', 'abxi']

		; **PASS  JMP  pcr  (as ab)

		Jmp 	:+
		Jmp 	-
		Jmp 	+
		Jmp 	:-

		; **PASS  JMP  zp  (as ab)

		Jmp 	$12
		Jmp 	bak08
		Jmp 	fwd08

		; **PASS  JMP  zpi  (as abi)

		Jmp 	($12)
		Jmp 	(bak08)
		Jmp 	(fwd08)

		; **PASS  JMP  zpxi  (as abxi)

		Jmp 	($12,X)
		Jmp 	(bak08,x)
		Jmp 	(fwd08,X)


:	; forward ref for JMP

; -------------------------------

:	; backward ref for JSR

		; check JSR
		; 1 mnemonics with modes ['ab']

		; **PASS  JSR  pcr  (as ab)

		Jsr 	:+
		Jsr 	-
		Jsr 	+
		Jsr 	:-

		; **PASS  JSR  zp  (as ab)

		Jsr 	$12
		Jsr 	bak08
		Jsr 	fwd08


:	; forward ref for JSR

; -------------------------------

:	; backward ref for LDX

		; check LDX
		; 1 mnemonics with modes ['ab', 'aby', 'imm', 'zp', 'zpy']

		; **PASS  LDX  pcr  (as ab)

		Ldx 	:+
		Ldx 	-
		Ldx 	+
		Ldx 	:-


:	; forward ref for LDX

; -------------------------------

:	; backward ref for STA

		; check STA
		; 1 mnemonics with modes ['ab', 'abx', 'aby', 'zp', 'zpi', 'zpiy', 'zpx', 'zpxi']

		; **PASS  STA  pcr  (as ab)

		Sta 	:+
		Sta 	-
		Sta 	+
		Sta 	:-

		; **PASS  STA  zpy  (as aby)

		Sta 	$12,Y
		Sta 	bak08,y
		Sta 	fwd08,Y


:	; forward ref for STA

; -------------------------------

:	; backward ref for STX

		; check STX
		; 1 mnemonics with modes ['ab', 'zp', 'zpy']

		; **PASS  STX  pcr  (as ab)

		Stx 	:+
		Stx 	-
		Stx 	+
		Stx 	:-


:	; forward ref for STX

; -------------------------------

:	; backward ref for STY

		; check STY
		; 1 mnemonics with modes ['ab', 'zp', 'zpx']

		; **PASS  STY  pcr  (as ab)

		Sty 	:+
		Sty 	-
		Sty 	+
		Sty 	:-


:	; forward ref for STY

; -------------------------------

:	; backward ref for STZ

		; check STZ
		; 1 mnemonics with modes ['ab', 'abx', 'zp', 'zpx']

		; **PASS  STZ  pcr  (as ab)

		Stz 	:+
		Stz 	-
		Stz 	+
		Stz 	:-


:	; forward ref for STZ

; -------------------------------

:	; backward ref for TRB

		; check TRB
		; 2 mnemonics with modes ['ab', 'zp']
		; TSB

		; **PASS  TRB  pcr  (as ab)

		Trb 	:+
		Trb 	-
		Trb 	+
		Trb 	:-


:	; forward ref for TRB

; -------------------------------

; forward reference

fwd32	.equ	$89ABCDEF
fwd24	.equ	$456789
fwd16	.equ	$1234
fwd08	.equ	$12

; -------------------------------

		.end

; -------------------------------

; 66 pass
; 0 fail
