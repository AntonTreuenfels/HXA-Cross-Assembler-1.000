; Hobby Cross-Assembler HXA65 Error Test 65C02h
; 65C02\Instruction Set
; error: 65C02 Group Rep Instructions, Illegal Forced Modes

; generated by MODE65.PY - Fri Nov 29 14:29:53 2024


; warning(s):

; errors(s):

; fatal:

; -------------------------------

		.listfile
		.errfile

		.maxerr	10000		; increase default count

; -------------------------------

		.cpu	65C02
		.org	$1000

; -------------------------------

; backward reference

bak08	.equ	$12
bak16	.equ	$1234
bak24	.equ	$456789
bak32	.equ	$89ABCDEF

; -------------------------------

		; check ADC
		; 7 mnemonics with modes ['ab', 'abx', 'aby', 'imm', 'zp', 'zpi', 'zpiy', 'zpx', 'zpxi']
		; AND
		; CMP
		; EOR
		; LDA
		; ORA
		; SBC

; checking ADC ab

; ab cannot be forced to lab

		.echo **FAIL  ADC  ab as long

		.assume addr:long
		adc 	$4365
		.assume addr:long
		adc 	fwd16
		.assume addr:long
		adc 	bak16

; checking ADC abi

; abi cannot be forced to labi

		.echo **FAIL  ADC  abi as long

		.assume addr:long
		adc 	($4365)
		.assume addr:long
		adc 	(fwd16)
		.assume addr:long
		adc 	(bak16)

; checking ADC abx

; abx cannot be forced to labx

		.echo **FAIL  ADC  abx as long

		.assume addr:long
		adc 	$4365,X
		.assume addr:long
		adc 	fwd16,X
		.assume addr:long
		adc 	bak16,X

; checking ADC abxi

; abxi cannot be forced to @

		.echo **FAIL  ADC  abxi as long

		.assume addr:long
		adc 	($4365,X)
		.assume addr:long
		adc 	(fwd16,X)
		.assume addr:long
		adc 	(bak16,X)

; checking ADC aby

; aby cannot be forced to zpy

		.echo **FAIL  ADC  aby as zeropage

		.assume addr:zeropage
		adc 	$4365,Y
		.assume addr:zeropage
		adc 	fwd16,Y
		.assume addr:zeropage
		adc 	bak16,Y

; aby cannot be forced to @

		.echo **FAIL  ADC  aby as long

		.assume addr:long
		adc 	$4365,Y
		.assume addr:long
		adc 	fwd16,Y
		.assume addr:long
		adc 	bak16,Y

; checking ADC acc

; absolute is not forcible

		.echo **FAIL  ADC  acc as absolute

		.assume addr:absolute
		adc 	A
		.assume addr:absolute
		adc 	a

; zeropage is not forcible

		.echo **FAIL  ADC  acc as zeropage

		.assume addr:zeropage
		adc 	A
		.assume addr:zeropage
		adc 	a

; long is not forcible

		.echo **FAIL  ADC  acc as long

		.assume addr:long
		adc 	A
		.assume addr:long
		adc 	a

; checking ADC imm

; absolute is not forcible

		.echo **FAIL  ADC  imm as absolute

		.assume addr:absolute
		adc 	#$32
		.assume addr:absolute
		adc 	#bak08
		.assume addr:absolute
		adc 	#fwd08

; zeropage is not forcible

		.echo **FAIL  ADC  imm as zeropage

		.assume addr:zeropage
		adc 	#$32
		.assume addr:zeropage
		adc 	#bak08
		.assume addr:zeropage
		adc 	#fwd08

; long is not forcible

		.echo **FAIL  ADC  imm as long

		.assume addr:long
		adc 	#$32
		.assume addr:long
		adc 	#bak08
		.assume addr:long
		adc 	#fwd08

; checking ADC imp

; absolute is not forcible

		.echo **FAIL  ADC  imp as absolute

		.assume addr:absolute
		adc 

; zeropage is not forcible

		.echo **FAIL  ADC  imp as zeropage

		.assume addr:zeropage
		adc 

; long is not forcible

		.echo **FAIL  ADC  imp as long

		.assume addr:long
		adc 

; checking ADC pcr

; pcr cannot be forced to @

		.echo **FAIL  ADC  pcr as long

		.assume addr:long
		adc 	:+
		.assume addr:long
		adc 	-
		.assume addr:long
		adc 	+
		.assume addr:long
		adc 	:-

; checking ADC zp

; zp cannot be forced to lab

		.echo **FAIL  ADC  zp as long

		.assume addr:long
		adc 	$32
		.assume addr:long
		adc 	bak08
		.assume addr:long
		adc 	fwd08

; checking ADC zpi

; zpi cannot be forced to abi

		.echo **FAIL  ADC  zpi as absolute

		.assume addr:absolute
		adc 	($32)
		.assume addr:absolute
		adc 	(bak08)
		.assume addr:absolute
		adc 	(fwd08)

; zpi cannot be forced to labi

		.echo **FAIL  ADC  zpi as long

		.assume addr:long
		adc 	($32)
		.assume addr:long
		adc 	(bak08)
		.assume addr:long
		adc 	(fwd08)

; checking ADC zpiy

; zpiy cannot be forced to @

		.echo **FAIL  ADC  zpiy as absolute

		.assume addr:absolute
		adc 	($32),y
		.assume addr:absolute
		adc 	(bak08),y
		.assume addr:absolute
		adc 	(fwd08),y

; zpiy cannot be forced to lzpiy

		.echo **FAIL  ADC  zpiy as long

		.assume addr:long
		adc 	($32),y
		.assume addr:long
		adc 	(bak08),y
		.assume addr:long
		adc 	(fwd08),y

; checking ADC zpx

; zpx cannot be forced to labx

		.echo **FAIL  ADC  zpx as long

		.assume addr:long
		adc 	$32,x
		.assume addr:long
		adc 	bak08,x
		.assume addr:long
		adc 	fwd08,x

; checking ADC zpxi

; zpxi cannot be forced to abxi

		.echo **FAIL  ADC  zpxi as absolute

		.assume addr:absolute
		adc 	($32,x)
		.assume addr:absolute
		adc 	(bak08,x)
		.assume addr:absolute
		adc 	(fwd08,x)

; zpxi cannot be forced to @

		.echo **FAIL  ADC  zpxi as long

		.assume addr:long
		adc 	($32,x)
		.assume addr:long
		adc 	(bak08,x)
		.assume addr:long
		adc 	(fwd08,x)

; checking ADC zpy

; zpy cannot be forced to @

		.echo **FAIL  ADC  zpy as long

		.assume addr:long
		adc 	$32,y
		.assume addr:long
		adc 	bak08,y
		.assume addr:long
		adc 	fwd08,y


; -------------------------------


; -------------------------------

		; check ASL
		; 6 mnemonics with modes ['ab', 'abx', 'acc', 'imp', 'zp', 'zpx']
		; DEC
		; INC
		; LSR
		; ROL
		; ROR

; checking ASL ab

; ab cannot be forced to lab

		.echo **FAIL  ASL  ab as long

		.assume addr:long
		asl 	$4365
		.assume addr:long
		asl 	fwd16
		.assume addr:long
		asl 	bak16

; checking ASL abi

; abi cannot be forced to zpi

		.echo **FAIL  ASL  abi as zeropage

		.assume addr:zeropage
		asl 	($4365)
		.assume addr:zeropage
		asl 	(fwd16)
		.assume addr:zeropage
		asl 	(bak16)

; abi cannot be forced to labi

		.echo **FAIL  ASL  abi as long

		.assume addr:long
		asl 	($4365)
		.assume addr:long
		asl 	(fwd16)
		.assume addr:long
		asl 	(bak16)

; checking ASL abx

; abx cannot be forced to labx

		.echo **FAIL  ASL  abx as long

		.assume addr:long
		asl 	$4365,X
		.assume addr:long
		asl 	fwd16,X
		.assume addr:long
		asl 	bak16,X

; checking ASL abxi

; abxi cannot be forced to zpxi

		.echo **FAIL  ASL  abxi as zeropage

		.assume addr:zeropage
		asl 	($4365,X)
		.assume addr:zeropage
		asl 	(fwd16,X)
		.assume addr:zeropage
		asl 	(bak16,X)

; abxi cannot be forced to @

		.echo **FAIL  ASL  abxi as long

		.assume addr:long
		asl 	($4365,X)
		.assume addr:long
		asl 	(fwd16,X)
		.assume addr:long
		asl 	(bak16,X)

; checking ASL aby

; aby cannot be forced to zpy

		.echo **FAIL  ASL  aby as zeropage

		.assume addr:zeropage
		asl 	$4365,Y
		.assume addr:zeropage
		asl 	fwd16,Y
		.assume addr:zeropage
		asl 	bak16,Y

; aby cannot be forced to @

		.echo **FAIL  ASL  aby as long

		.assume addr:long
		asl 	$4365,Y
		.assume addr:long
		asl 	fwd16,Y
		.assume addr:long
		asl 	bak16,Y

; checking ASL acc

; absolute is not forcible

		.echo **FAIL  ASL  acc as absolute

		.assume addr:absolute
		asl 	A
		.assume addr:absolute
		asl 	a

; zeropage is not forcible

		.echo **FAIL  ASL  acc as zeropage

		.assume addr:zeropage
		asl 	A
		.assume addr:zeropage
		asl 	a

; long is not forcible

		.echo **FAIL  ASL  acc as long

		.assume addr:long
		asl 	A
		.assume addr:long
		asl 	a

; checking ASL imm

; absolute is not forcible

		.echo **FAIL  ASL  imm as absolute

		.assume addr:absolute
		asl 	#$32
		.assume addr:absolute
		asl 	#bak08
		.assume addr:absolute
		asl 	#fwd08

; zeropage is not forcible

		.echo **FAIL  ASL  imm as zeropage

		.assume addr:zeropage
		asl 	#$32
		.assume addr:zeropage
		asl 	#bak08
		.assume addr:zeropage
		asl 	#fwd08

; long is not forcible

		.echo **FAIL  ASL  imm as long

		.assume addr:long
		asl 	#$32
		.assume addr:long
		asl 	#bak08
		.assume addr:long
		asl 	#fwd08

; checking ASL imp

; absolute is not forcible

		.echo **FAIL  ASL  imp as absolute

		.assume addr:absolute
		asl 

; zeropage is not forcible

		.echo **FAIL  ASL  imp as zeropage

		.assume addr:zeropage
		asl 

; long is not forcible

		.echo **FAIL  ASL  imp as long

		.assume addr:long
		asl 

; checking ASL pcr

; pcr cannot be forced to @

		.echo **FAIL  ASL  pcr as long

		.assume addr:long
		asl 	:+
		.assume addr:long
		asl 	-
		.assume addr:long
		asl 	+
		.assume addr:long
		asl 	:-

; checking ASL zp

; zp cannot be forced to lab

		.echo **FAIL  ASL  zp as long

		.assume addr:long
		asl 	$32
		.assume addr:long
		asl 	bak08
		.assume addr:long
		asl 	fwd08

; checking ASL zpi

; zpi cannot be forced to abi

		.echo **FAIL  ASL  zpi as absolute

		.assume addr:absolute
		asl 	($32)
		.assume addr:absolute
		asl 	(bak08)
		.assume addr:absolute
		asl 	(fwd08)

; zpi cannot be forced to labi

		.echo **FAIL  ASL  zpi as long

		.assume addr:long
		asl 	($32)
		.assume addr:long
		asl 	(bak08)
		.assume addr:long
		asl 	(fwd08)

; checking ASL zpiy

; zpiy cannot be forced to @

		.echo **FAIL  ASL  zpiy as absolute

		.assume addr:absolute
		asl 	($32),y
		.assume addr:absolute
		asl 	(bak08),y
		.assume addr:absolute
		asl 	(fwd08),y

; zpiy cannot be forced to lzpiy

		.echo **FAIL  ASL  zpiy as long

		.assume addr:long
		asl 	($32),y
		.assume addr:long
		asl 	(bak08),y
		.assume addr:long
		asl 	(fwd08),y

; checking ASL zpx

; zpx cannot be forced to labx

		.echo **FAIL  ASL  zpx as long

		.assume addr:long
		asl 	$32,x
		.assume addr:long
		asl 	bak08,x
		.assume addr:long
		asl 	fwd08,x

; checking ASL zpxi

; zpxi cannot be forced to abxi

		.echo **FAIL  ASL  zpxi as absolute

		.assume addr:absolute
		asl 	($32,x)
		.assume addr:absolute
		asl 	(bak08,x)
		.assume addr:absolute
		asl 	(fwd08,x)

; zpxi cannot be forced to @

		.echo **FAIL  ASL  zpxi as long

		.assume addr:long
		asl 	($32,x)
		.assume addr:long
		asl 	(bak08,x)
		.assume addr:long
		asl 	(fwd08,x)

; checking ASL zpy

; zpy cannot be forced to aby

		.echo **FAIL  ASL  zpy as absolute

		.assume addr:absolute
		asl 	$32,y
		.assume addr:absolute
		asl 	bak08,y
		.assume addr:absolute
		asl 	fwd08,y

; zpy cannot be forced to @

		.echo **FAIL  ASL  zpy as long

		.assume addr:long
		asl 	$32,y
		.assume addr:long
		asl 	bak08,y
		.assume addr:long
		asl 	fwd08,y


; -------------------------------


; -------------------------------

		; check BCC
		; 11 mnemonics with modes ['pcr']
		; BCS
		; BEQ
		; BGE
		; BLT
		; BMI
		; BNE
		; BPL
		; BRA
		; BVC
		; BVS

; checking BCC ab

; ab cannot be forced to zp

		.echo **FAIL  BCC  ab as zeropage

		.assume addr:zeropage
		bcc 	$4365
		.assume addr:zeropage
		bcc 	fwd16
		.assume addr:zeropage
		bcc 	bak16

; ab cannot be forced to lab

		.echo **FAIL  BCC  ab as long

		.assume addr:long
		bcc 	$4365
		.assume addr:long
		bcc 	fwd16
		.assume addr:long
		bcc 	bak16

; checking BCC abi

; abi cannot be forced to zpi

		.echo **FAIL  BCC  abi as zeropage

		.assume addr:zeropage
		bcc 	($4365)
		.assume addr:zeropage
		bcc 	(fwd16)
		.assume addr:zeropage
		bcc 	(bak16)

; abi cannot be forced to labi

		.echo **FAIL  BCC  abi as long

		.assume addr:long
		bcc 	($4365)
		.assume addr:long
		bcc 	(fwd16)
		.assume addr:long
		bcc 	(bak16)

; checking BCC abx

; abx cannot be forced to zpx

		.echo **FAIL  BCC  abx as zeropage

		.assume addr:zeropage
		bcc 	$4365,X
		.assume addr:zeropage
		bcc 	fwd16,X
		.assume addr:zeropage
		bcc 	bak16,X

; abx cannot be forced to labx

		.echo **FAIL  BCC  abx as long

		.assume addr:long
		bcc 	$4365,X
		.assume addr:long
		bcc 	fwd16,X
		.assume addr:long
		bcc 	bak16,X

; checking BCC abxi

; abxi cannot be forced to zpxi

		.echo **FAIL  BCC  abxi as zeropage

		.assume addr:zeropage
		bcc 	($4365,X)
		.assume addr:zeropage
		bcc 	(fwd16,X)
		.assume addr:zeropage
		bcc 	(bak16,X)

; abxi cannot be forced to @

		.echo **FAIL  BCC  abxi as long

		.assume addr:long
		bcc 	($4365,X)
		.assume addr:long
		bcc 	(fwd16,X)
		.assume addr:long
		bcc 	(bak16,X)

; checking BCC aby

; aby cannot be forced to zpy

		.echo **FAIL  BCC  aby as zeropage

		.assume addr:zeropage
		bcc 	$4365,Y
		.assume addr:zeropage
		bcc 	fwd16,Y
		.assume addr:zeropage
		bcc 	bak16,Y

; aby cannot be forced to @

		.echo **FAIL  BCC  aby as long

		.assume addr:long
		bcc 	$4365,Y
		.assume addr:long
		bcc 	fwd16,Y
		.assume addr:long
		bcc 	bak16,Y

; checking BCC acc

; absolute is not forcible

		.echo **FAIL  BCC  acc as absolute

		.assume addr:absolute
		bcc 	A
		.assume addr:absolute
		bcc 	a

; zeropage is not forcible

		.echo **FAIL  BCC  acc as zeropage

		.assume addr:zeropage
		bcc 	A
		.assume addr:zeropage
		bcc 	a

; long is not forcible

		.echo **FAIL  BCC  acc as long

		.assume addr:long
		bcc 	A
		.assume addr:long
		bcc 	a

; checking BCC imm

; absolute is not forcible

		.echo **FAIL  BCC  imm as absolute

		.assume addr:absolute
		bcc 	#$32
		.assume addr:absolute
		bcc 	#bak08
		.assume addr:absolute
		bcc 	#fwd08

; zeropage is not forcible

		.echo **FAIL  BCC  imm as zeropage

		.assume addr:zeropage
		bcc 	#$32
		.assume addr:zeropage
		bcc 	#bak08
		.assume addr:zeropage
		bcc 	#fwd08

; long is not forcible

		.echo **FAIL  BCC  imm as long

		.assume addr:long
		bcc 	#$32
		.assume addr:long
		bcc 	#bak08
		.assume addr:long
		bcc 	#fwd08

; checking BCC imp

; absolute is not forcible

		.echo **FAIL  BCC  imp as absolute

		.assume addr:absolute
		bcc 

; zeropage is not forcible

		.echo **FAIL  BCC  imp as zeropage

		.assume addr:zeropage
		bcc 

; long is not forcible

		.echo **FAIL  BCC  imp as long

		.assume addr:long
		bcc 

; checking BCC pcr

; pcr cannot be forced to @

		.echo **FAIL  BCC  pcr as absolute

		.assume addr:absolute
		bcc 	:+
		.assume addr:absolute
		bcc 	-
		.assume addr:absolute
		bcc 	+
		.assume addr:absolute
		bcc 	:-

; pcr cannot be forced to @

		.echo **FAIL  BCC  pcr as zeropage

		.assume addr:zeropage
		bcc 	:+
		.assume addr:zeropage
		bcc 	-
		.assume addr:zeropage
		bcc 	+
		.assume addr:zeropage
		bcc 	:-

; pcr cannot be forced to @

		.echo **FAIL  BCC  pcr as long

		.assume addr:long
		bcc 	:+
		.assume addr:long
		bcc 	-
		.assume addr:long
		bcc 	+
		.assume addr:long
		bcc 	:-

; checking BCC zp

; zp cannot be forced to ab

		.echo **FAIL  BCC  zp as absolute

		.assume addr:absolute
		bcc 	$32
		.assume addr:absolute
		bcc 	bak08
		.assume addr:absolute
		bcc 	fwd08

; zp cannot be forced to lab

		.echo **FAIL  BCC  zp as long

		.assume addr:long
		bcc 	$32
		.assume addr:long
		bcc 	bak08
		.assume addr:long
		bcc 	fwd08

; checking BCC zpi

; zpi cannot be forced to abi

		.echo **FAIL  BCC  zpi as absolute

		.assume addr:absolute
		bcc 	($32)
		.assume addr:absolute
		bcc 	(bak08)
		.assume addr:absolute
		bcc 	(fwd08)

; zpi cannot be forced to labi

		.echo **FAIL  BCC  zpi as long

		.assume addr:long
		bcc 	($32)
		.assume addr:long
		bcc 	(bak08)
		.assume addr:long
		bcc 	(fwd08)

; checking BCC zpiy

; zpiy cannot be forced to @

		.echo **FAIL  BCC  zpiy as absolute

		.assume addr:absolute
		bcc 	($32),y
		.assume addr:absolute
		bcc 	(bak08),y
		.assume addr:absolute
		bcc 	(fwd08),y

; zpiy cannot be forced to lzpiy

		.echo **FAIL  BCC  zpiy as long

		.assume addr:long
		bcc 	($32),y
		.assume addr:long
		bcc 	(bak08),y
		.assume addr:long
		bcc 	(fwd08),y

; checking BCC zpx

; zpx cannot be forced to abx

		.echo **FAIL  BCC  zpx as absolute

		.assume addr:absolute
		bcc 	$32,x
		.assume addr:absolute
		bcc 	bak08,x
		.assume addr:absolute
		bcc 	fwd08,x

; zpx cannot be forced to labx

		.echo **FAIL  BCC  zpx as long

		.assume addr:long
		bcc 	$32,x
		.assume addr:long
		bcc 	bak08,x
		.assume addr:long
		bcc 	fwd08,x

; checking BCC zpxi

; zpxi cannot be forced to abxi

		.echo **FAIL  BCC  zpxi as absolute

		.assume addr:absolute
		bcc 	($32,x)
		.assume addr:absolute
		bcc 	(bak08,x)
		.assume addr:absolute
		bcc 	(fwd08,x)

; zpxi cannot be forced to @

		.echo **FAIL  BCC  zpxi as long

		.assume addr:long
		bcc 	($32,x)
		.assume addr:long
		bcc 	(bak08,x)
		.assume addr:long
		bcc 	(fwd08,x)

; checking BCC zpy

; zpy cannot be forced to aby

		.echo **FAIL  BCC  zpy as absolute

		.assume addr:absolute
		bcc 	$32,y
		.assume addr:absolute
		bcc 	bak08,y
		.assume addr:absolute
		bcc 	fwd08,y

; zpy cannot be forced to @

		.echo **FAIL  BCC  zpy as long

		.assume addr:long
		bcc 	$32,y
		.assume addr:long
		bcc 	bak08,y
		.assume addr:long
		bcc 	fwd08,y


; -------------------------------


; -------------------------------

		; check BIT
		; 2 mnemonics with modes ['ab', 'abx', 'imm', 'zp', 'zpx']
		; LDY

; checking BIT ab

; ab cannot be forced to lab

		.echo **FAIL  BIT  ab as long

		.assume addr:long
		bit 	$4365
		.assume addr:long
		bit 	fwd16
		.assume addr:long
		bit 	bak16

; checking BIT abi

; abi cannot be forced to zpi

		.echo **FAIL  BIT  abi as zeropage

		.assume addr:zeropage
		bit 	($4365)
		.assume addr:zeropage
		bit 	(fwd16)
		.assume addr:zeropage
		bit 	(bak16)

; abi cannot be forced to labi

		.echo **FAIL  BIT  abi as long

		.assume addr:long
		bit 	($4365)
		.assume addr:long
		bit 	(fwd16)
		.assume addr:long
		bit 	(bak16)

; checking BIT abx

; abx cannot be forced to labx

		.echo **FAIL  BIT  abx as long

		.assume addr:long
		bit 	$4365,X
		.assume addr:long
		bit 	fwd16,X
		.assume addr:long
		bit 	bak16,X

; checking BIT abxi

; abxi cannot be forced to zpxi

		.echo **FAIL  BIT  abxi as zeropage

		.assume addr:zeropage
		bit 	($4365,X)
		.assume addr:zeropage
		bit 	(fwd16,X)
		.assume addr:zeropage
		bit 	(bak16,X)

; abxi cannot be forced to @

		.echo **FAIL  BIT  abxi as long

		.assume addr:long
		bit 	($4365,X)
		.assume addr:long
		bit 	(fwd16,X)
		.assume addr:long
		bit 	(bak16,X)

; checking BIT aby

; aby cannot be forced to zpy

		.echo **FAIL  BIT  aby as zeropage

		.assume addr:zeropage
		bit 	$4365,Y
		.assume addr:zeropage
		bit 	fwd16,Y
		.assume addr:zeropage
		bit 	bak16,Y

; aby cannot be forced to @

		.echo **FAIL  BIT  aby as long

		.assume addr:long
		bit 	$4365,Y
		.assume addr:long
		bit 	fwd16,Y
		.assume addr:long
		bit 	bak16,Y

; checking BIT acc

; absolute is not forcible

		.echo **FAIL  BIT  acc as absolute

		.assume addr:absolute
		bit 	A
		.assume addr:absolute
		bit 	a

; zeropage is not forcible

		.echo **FAIL  BIT  acc as zeropage

		.assume addr:zeropage
		bit 	A
		.assume addr:zeropage
		bit 	a

; long is not forcible

		.echo **FAIL  BIT  acc as long

		.assume addr:long
		bit 	A
		.assume addr:long
		bit 	a

; checking BIT imm

; absolute is not forcible

		.echo **FAIL  BIT  imm as absolute

		.assume addr:absolute
		bit 	#$32
		.assume addr:absolute
		bit 	#bak08
		.assume addr:absolute
		bit 	#fwd08

; zeropage is not forcible

		.echo **FAIL  BIT  imm as zeropage

		.assume addr:zeropage
		bit 	#$32
		.assume addr:zeropage
		bit 	#bak08
		.assume addr:zeropage
		bit 	#fwd08

; long is not forcible

		.echo **FAIL  BIT  imm as long

		.assume addr:long
		bit 	#$32
		.assume addr:long
		bit 	#bak08
		.assume addr:long
		bit 	#fwd08

; checking BIT imp

; absolute is not forcible

		.echo **FAIL  BIT  imp as absolute

		.assume addr:absolute
		bit 

; zeropage is not forcible

		.echo **FAIL  BIT  imp as zeropage

		.assume addr:zeropage
		bit 

; long is not forcible

		.echo **FAIL  BIT  imp as long

		.assume addr:long
		bit 

; checking BIT pcr

; pcr cannot be forced to @

		.echo **FAIL  BIT  pcr as long

		.assume addr:long
		bit 	:+
		.assume addr:long
		bit 	-
		.assume addr:long
		bit 	+
		.assume addr:long
		bit 	:-

; checking BIT zp

; zp cannot be forced to lab

		.echo **FAIL  BIT  zp as long

		.assume addr:long
		bit 	$32
		.assume addr:long
		bit 	bak08
		.assume addr:long
		bit 	fwd08

; checking BIT zpi

; zpi cannot be forced to abi

		.echo **FAIL  BIT  zpi as absolute

		.assume addr:absolute
		bit 	($32)
		.assume addr:absolute
		bit 	(bak08)
		.assume addr:absolute
		bit 	(fwd08)

; zpi cannot be forced to labi

		.echo **FAIL  BIT  zpi as long

		.assume addr:long
		bit 	($32)
		.assume addr:long
		bit 	(bak08)
		.assume addr:long
		bit 	(fwd08)

; checking BIT zpiy

; zpiy cannot be forced to @

		.echo **FAIL  BIT  zpiy as absolute

		.assume addr:absolute
		bit 	($32),y
		.assume addr:absolute
		bit 	(bak08),y
		.assume addr:absolute
		bit 	(fwd08),y

; zpiy cannot be forced to lzpiy

		.echo **FAIL  BIT  zpiy as long

		.assume addr:long
		bit 	($32),y
		.assume addr:long
		bit 	(bak08),y
		.assume addr:long
		bit 	(fwd08),y

; checking BIT zpx

; zpx cannot be forced to labx

		.echo **FAIL  BIT  zpx as long

		.assume addr:long
		bit 	$32,x
		.assume addr:long
		bit 	bak08,x
		.assume addr:long
		bit 	fwd08,x

; checking BIT zpxi

; zpxi cannot be forced to abxi

		.echo **FAIL  BIT  zpxi as absolute

		.assume addr:absolute
		bit 	($32,x)
		.assume addr:absolute
		bit 	(bak08,x)
		.assume addr:absolute
		bit 	(fwd08,x)

; zpxi cannot be forced to @

		.echo **FAIL  BIT  zpxi as long

		.assume addr:long
		bit 	($32,x)
		.assume addr:long
		bit 	(bak08,x)
		.assume addr:long
		bit 	(fwd08,x)

; checking BIT zpy

; zpy cannot be forced to aby

		.echo **FAIL  BIT  zpy as absolute

		.assume addr:absolute
		bit 	$32,y
		.assume addr:absolute
		bit 	bak08,y
		.assume addr:absolute
		bit 	fwd08,y

; zpy cannot be forced to @

		.echo **FAIL  BIT  zpy as long

		.assume addr:long
		bit 	$32,y
		.assume addr:long
		bit 	bak08,y
		.assume addr:long
		bit 	fwd08,y


; -------------------------------


; -------------------------------

		; check BRK
		; 1 mnemonics with modes ['imm', 'imp', 'zp']

; checking BRK ab

; ab cannot be forced to lab

		.echo **FAIL  BRK  ab as long

		.assume addr:long
		brk 	$4365
		.assume addr:long
		brk 	fwd16
		.assume addr:long
		brk 	bak16

; checking BRK abi

; abi cannot be forced to zpi

		.echo **FAIL  BRK  abi as zeropage

		.assume addr:zeropage
		brk 	($4365)
		.assume addr:zeropage
		brk 	(fwd16)
		.assume addr:zeropage
		brk 	(bak16)

; abi cannot be forced to labi

		.echo **FAIL  BRK  abi as long

		.assume addr:long
		brk 	($4365)
		.assume addr:long
		brk 	(fwd16)
		.assume addr:long
		brk 	(bak16)

; checking BRK abx

; abx cannot be forced to zpx

		.echo **FAIL  BRK  abx as zeropage

		.assume addr:zeropage
		brk 	$4365,X
		.assume addr:zeropage
		brk 	fwd16,X
		.assume addr:zeropage
		brk 	bak16,X

; abx cannot be forced to labx

		.echo **FAIL  BRK  abx as long

		.assume addr:long
		brk 	$4365,X
		.assume addr:long
		brk 	fwd16,X
		.assume addr:long
		brk 	bak16,X

; checking BRK abxi

; abxi cannot be forced to zpxi

		.echo **FAIL  BRK  abxi as zeropage

		.assume addr:zeropage
		brk 	($4365,X)
		.assume addr:zeropage
		brk 	(fwd16,X)
		.assume addr:zeropage
		brk 	(bak16,X)

; abxi cannot be forced to @

		.echo **FAIL  BRK  abxi as long

		.assume addr:long
		brk 	($4365,X)
		.assume addr:long
		brk 	(fwd16,X)
		.assume addr:long
		brk 	(bak16,X)

; checking BRK aby

; aby cannot be forced to zpy

		.echo **FAIL  BRK  aby as zeropage

		.assume addr:zeropage
		brk 	$4365,Y
		.assume addr:zeropage
		brk 	fwd16,Y
		.assume addr:zeropage
		brk 	bak16,Y

; aby cannot be forced to @

		.echo **FAIL  BRK  aby as long

		.assume addr:long
		brk 	$4365,Y
		.assume addr:long
		brk 	fwd16,Y
		.assume addr:long
		brk 	bak16,Y

; checking BRK acc

; absolute is not forcible

		.echo **FAIL  BRK  acc as absolute

		.assume addr:absolute
		brk 	A
		.assume addr:absolute
		brk 	a

; zeropage is not forcible

		.echo **FAIL  BRK  acc as zeropage

		.assume addr:zeropage
		brk 	A
		.assume addr:zeropage
		brk 	a

; long is not forcible

		.echo **FAIL  BRK  acc as long

		.assume addr:long
		brk 	A
		.assume addr:long
		brk 	a

; checking BRK imm

; absolute is not forcible

		.echo **FAIL  BRK  imm as absolute

		.assume addr:absolute
		brk 	#$32
		.assume addr:absolute
		brk 	#bak08
		.assume addr:absolute
		brk 	#fwd08

; zeropage is not forcible

		.echo **FAIL  BRK  imm as zeropage

		.assume addr:zeropage
		brk 	#$32
		.assume addr:zeropage
		brk 	#bak08
		.assume addr:zeropage
		brk 	#fwd08

; long is not forcible

		.echo **FAIL  BRK  imm as long

		.assume addr:long
		brk 	#$32
		.assume addr:long
		brk 	#bak08
		.assume addr:long
		brk 	#fwd08

; checking BRK imp

; absolute is not forcible

		.echo **FAIL  BRK  imp as absolute

		.assume addr:absolute
		brk 

; zeropage is not forcible

		.echo **FAIL  BRK  imp as zeropage

		.assume addr:zeropage
		brk 

; long is not forcible

		.echo **FAIL  BRK  imp as long

		.assume addr:long
		brk 

; checking BRK pcr

; pcr cannot be forced to @

		.echo **FAIL  BRK  pcr as absolute

		.assume addr:absolute
		brk 	:+
		.assume addr:absolute
		brk 	-
		.assume addr:absolute
		brk 	+
		.assume addr:absolute
		brk 	:-

; pcr cannot be forced to @

		.echo **FAIL  BRK  pcr as long

		.assume addr:long
		brk 	:+
		.assume addr:long
		brk 	-
		.assume addr:long
		brk 	+
		.assume addr:long
		brk 	:-

; checking BRK zp

; zp cannot be forced to ab

		.echo **FAIL  BRK  zp as absolute

		.assume addr:absolute
		brk 	$32
		.assume addr:absolute
		brk 	bak08
		.assume addr:absolute
		brk 	fwd08

; zp cannot be forced to lab

		.echo **FAIL  BRK  zp as long

		.assume addr:long
		brk 	$32
		.assume addr:long
		brk 	bak08
		.assume addr:long
		brk 	fwd08

; checking BRK zpi

; zpi cannot be forced to abi

		.echo **FAIL  BRK  zpi as absolute

		.assume addr:absolute
		brk 	($32)
		.assume addr:absolute
		brk 	(bak08)
		.assume addr:absolute
		brk 	(fwd08)

; zpi cannot be forced to labi

		.echo **FAIL  BRK  zpi as long

		.assume addr:long
		brk 	($32)
		.assume addr:long
		brk 	(bak08)
		.assume addr:long
		brk 	(fwd08)

; checking BRK zpiy

; zpiy cannot be forced to @

		.echo **FAIL  BRK  zpiy as absolute

		.assume addr:absolute
		brk 	($32),y
		.assume addr:absolute
		brk 	(bak08),y
		.assume addr:absolute
		brk 	(fwd08),y

; zpiy cannot be forced to lzpiy

		.echo **FAIL  BRK  zpiy as long

		.assume addr:long
		brk 	($32),y
		.assume addr:long
		brk 	(bak08),y
		.assume addr:long
		brk 	(fwd08),y

; checking BRK zpx

; zpx cannot be forced to abx

		.echo **FAIL  BRK  zpx as absolute

		.assume addr:absolute
		brk 	$32,x
		.assume addr:absolute
		brk 	bak08,x
		.assume addr:absolute
		brk 	fwd08,x

; zpx cannot be forced to labx

		.echo **FAIL  BRK  zpx as long

		.assume addr:long
		brk 	$32,x
		.assume addr:long
		brk 	bak08,x
		.assume addr:long
		brk 	fwd08,x

; checking BRK zpxi

; zpxi cannot be forced to abxi

		.echo **FAIL  BRK  zpxi as absolute

		.assume addr:absolute
		brk 	($32,x)
		.assume addr:absolute
		brk 	(bak08,x)
		.assume addr:absolute
		brk 	(fwd08,x)

; zpxi cannot be forced to @

		.echo **FAIL  BRK  zpxi as long

		.assume addr:long
		brk 	($32,x)
		.assume addr:long
		brk 	(bak08,x)
		.assume addr:long
		brk 	(fwd08,x)

; checking BRK zpy

; zpy cannot be forced to aby

		.echo **FAIL  BRK  zpy as absolute

		.assume addr:absolute
		brk 	$32,y
		.assume addr:absolute
		brk 	bak08,y
		.assume addr:absolute
		brk 	fwd08,y

; zpy cannot be forced to @

		.echo **FAIL  BRK  zpy as long

		.assume addr:long
		brk 	$32,y
		.assume addr:long
		brk 	bak08,y
		.assume addr:long
		brk 	fwd08,y


; -------------------------------


; -------------------------------

		; check CLC
		; 30 mnemonics with modes ['imp']
		; CLD
		; CLI
		; CLV
		; DEA
		; DEX
		; DEY
		; INA
		; INX
		; INY
		; NOP
		; PHA
		; PHP
		; PHX
		; PHY
		; PLA
		; PLP
		; PLX
		; PLY
		; RTI
		; RTS
		; SEC
		; SED
		; SEI
		; TAX
		; TAY
		; TSX
		; TXA
		; TXS
		; TYA

; checking CLC ab

; ab cannot be forced to zp

		.echo **FAIL  CLC  ab as zeropage

		.assume addr:zeropage
		clc 	$4365
		.assume addr:zeropage
		clc 	fwd16
		.assume addr:zeropage
		clc 	bak16

; ab cannot be forced to lab

		.echo **FAIL  CLC  ab as long

		.assume addr:long
		clc 	$4365
		.assume addr:long
		clc 	fwd16
		.assume addr:long
		clc 	bak16

; checking CLC abi

; abi cannot be forced to zpi

		.echo **FAIL  CLC  abi as zeropage

		.assume addr:zeropage
		clc 	($4365)
		.assume addr:zeropage
		clc 	(fwd16)
		.assume addr:zeropage
		clc 	(bak16)

; abi cannot be forced to labi

		.echo **FAIL  CLC  abi as long

		.assume addr:long
		clc 	($4365)
		.assume addr:long
		clc 	(fwd16)
		.assume addr:long
		clc 	(bak16)

; checking CLC abx

; abx cannot be forced to zpx

		.echo **FAIL  CLC  abx as zeropage

		.assume addr:zeropage
		clc 	$4365,X
		.assume addr:zeropage
		clc 	fwd16,X
		.assume addr:zeropage
		clc 	bak16,X

; abx cannot be forced to labx

		.echo **FAIL  CLC  abx as long

		.assume addr:long
		clc 	$4365,X
		.assume addr:long
		clc 	fwd16,X
		.assume addr:long
		clc 	bak16,X

; checking CLC abxi

; abxi cannot be forced to zpxi

		.echo **FAIL  CLC  abxi as zeropage

		.assume addr:zeropage
		clc 	($4365,X)
		.assume addr:zeropage
		clc 	(fwd16,X)
		.assume addr:zeropage
		clc 	(bak16,X)

; abxi cannot be forced to @

		.echo **FAIL  CLC  abxi as long

		.assume addr:long
		clc 	($4365,X)
		.assume addr:long
		clc 	(fwd16,X)
		.assume addr:long
		clc 	(bak16,X)

; checking CLC aby

; aby cannot be forced to zpy

		.echo **FAIL  CLC  aby as zeropage

		.assume addr:zeropage
		clc 	$4365,Y
		.assume addr:zeropage
		clc 	fwd16,Y
		.assume addr:zeropage
		clc 	bak16,Y

; aby cannot be forced to @

		.echo **FAIL  CLC  aby as long

		.assume addr:long
		clc 	$4365,Y
		.assume addr:long
		clc 	fwd16,Y
		.assume addr:long
		clc 	bak16,Y

; checking CLC acc

; absolute is not forcible

		.echo **FAIL  CLC  acc as absolute

		.assume addr:absolute
		clc 	A
		.assume addr:absolute
		clc 	a

; zeropage is not forcible

		.echo **FAIL  CLC  acc as zeropage

		.assume addr:zeropage
		clc 	A
		.assume addr:zeropage
		clc 	a

; long is not forcible

		.echo **FAIL  CLC  acc as long

		.assume addr:long
		clc 	A
		.assume addr:long
		clc 	a

; checking CLC imm

; absolute is not forcible

		.echo **FAIL  CLC  imm as absolute

		.assume addr:absolute
		clc 	#$32
		.assume addr:absolute
		clc 	#bak08
		.assume addr:absolute
		clc 	#fwd08

; zeropage is not forcible

		.echo **FAIL  CLC  imm as zeropage

		.assume addr:zeropage
		clc 	#$32
		.assume addr:zeropage
		clc 	#bak08
		.assume addr:zeropage
		clc 	#fwd08

; long is not forcible

		.echo **FAIL  CLC  imm as long

		.assume addr:long
		clc 	#$32
		.assume addr:long
		clc 	#bak08
		.assume addr:long
		clc 	#fwd08

; checking CLC imp

; absolute is not forcible

		.echo **FAIL  CLC  imp as absolute

		.assume addr:absolute
		clc 

; zeropage is not forcible

		.echo **FAIL  CLC  imp as zeropage

		.assume addr:zeropage
		clc 

; long is not forcible

		.echo **FAIL  CLC  imp as long

		.assume addr:long
		clc 

; checking CLC pcr

; pcr cannot be forced to @

		.echo **FAIL  CLC  pcr as absolute

		.assume addr:absolute
		clc 	:+
		.assume addr:absolute
		clc 	-
		.assume addr:absolute
		clc 	+
		.assume addr:absolute
		clc 	:-

; pcr cannot be forced to @

		.echo **FAIL  CLC  pcr as zeropage

		.assume addr:zeropage
		clc 	:+
		.assume addr:zeropage
		clc 	-
		.assume addr:zeropage
		clc 	+
		.assume addr:zeropage
		clc 	:-

; pcr cannot be forced to @

		.echo **FAIL  CLC  pcr as long

		.assume addr:long
		clc 	:+
		.assume addr:long
		clc 	-
		.assume addr:long
		clc 	+
		.assume addr:long
		clc 	:-

; checking CLC zp

; zp cannot be forced to ab

		.echo **FAIL  CLC  zp as absolute

		.assume addr:absolute
		clc 	$32
		.assume addr:absolute
		clc 	bak08
		.assume addr:absolute
		clc 	fwd08

; zp cannot be forced to lab

		.echo **FAIL  CLC  zp as long

		.assume addr:long
		clc 	$32
		.assume addr:long
		clc 	bak08
		.assume addr:long
		clc 	fwd08

; checking CLC zpi

; zpi cannot be forced to abi

		.echo **FAIL  CLC  zpi as absolute

		.assume addr:absolute
		clc 	($32)
		.assume addr:absolute
		clc 	(bak08)
		.assume addr:absolute
		clc 	(fwd08)

; zpi cannot be forced to labi

		.echo **FAIL  CLC  zpi as long

		.assume addr:long
		clc 	($32)
		.assume addr:long
		clc 	(bak08)
		.assume addr:long
		clc 	(fwd08)

; checking CLC zpiy

; zpiy cannot be forced to @

		.echo **FAIL  CLC  zpiy as absolute

		.assume addr:absolute
		clc 	($32),y
		.assume addr:absolute
		clc 	(bak08),y
		.assume addr:absolute
		clc 	(fwd08),y

; zpiy cannot be forced to lzpiy

		.echo **FAIL  CLC  zpiy as long

		.assume addr:long
		clc 	($32),y
		.assume addr:long
		clc 	(bak08),y
		.assume addr:long
		clc 	(fwd08),y

; checking CLC zpx

; zpx cannot be forced to abx

		.echo **FAIL  CLC  zpx as absolute

		.assume addr:absolute
		clc 	$32,x
		.assume addr:absolute
		clc 	bak08,x
		.assume addr:absolute
		clc 	fwd08,x

; zpx cannot be forced to labx

		.echo **FAIL  CLC  zpx as long

		.assume addr:long
		clc 	$32,x
		.assume addr:long
		clc 	bak08,x
		.assume addr:long
		clc 	fwd08,x

; checking CLC zpxi

; zpxi cannot be forced to abxi

		.echo **FAIL  CLC  zpxi as absolute

		.assume addr:absolute
		clc 	($32,x)
		.assume addr:absolute
		clc 	(bak08,x)
		.assume addr:absolute
		clc 	(fwd08,x)

; zpxi cannot be forced to @

		.echo **FAIL  CLC  zpxi as long

		.assume addr:long
		clc 	($32,x)
		.assume addr:long
		clc 	(bak08,x)
		.assume addr:long
		clc 	(fwd08,x)

; checking CLC zpy

; zpy cannot be forced to aby

		.echo **FAIL  CLC  zpy as absolute

		.assume addr:absolute
		clc 	$32,y
		.assume addr:absolute
		clc 	bak08,y
		.assume addr:absolute
		clc 	fwd08,y

; zpy cannot be forced to @

		.echo **FAIL  CLC  zpy as long

		.assume addr:long
		clc 	$32,y
		.assume addr:long
		clc 	bak08,y
		.assume addr:long
		clc 	fwd08,y


; -------------------------------


; -------------------------------

		; check CPX
		; 2 mnemonics with modes ['ab', 'imm', 'zp']
		; CPY

; checking CPX ab

; ab cannot be forced to lab

		.echo **FAIL  CPX  ab as long

		.assume addr:long
		cpx 	$4365
		.assume addr:long
		cpx 	fwd16
		.assume addr:long
		cpx 	bak16

; checking CPX abi

; abi cannot be forced to zpi

		.echo **FAIL  CPX  abi as zeropage

		.assume addr:zeropage
		cpx 	($4365)
		.assume addr:zeropage
		cpx 	(fwd16)
		.assume addr:zeropage
		cpx 	(bak16)

; abi cannot be forced to labi

		.echo **FAIL  CPX  abi as long

		.assume addr:long
		cpx 	($4365)
		.assume addr:long
		cpx 	(fwd16)
		.assume addr:long
		cpx 	(bak16)

; checking CPX abx

; abx cannot be forced to zpx

		.echo **FAIL  CPX  abx as zeropage

		.assume addr:zeropage
		cpx 	$4365,X
		.assume addr:zeropage
		cpx 	fwd16,X
		.assume addr:zeropage
		cpx 	bak16,X

; abx cannot be forced to labx

		.echo **FAIL  CPX  abx as long

		.assume addr:long
		cpx 	$4365,X
		.assume addr:long
		cpx 	fwd16,X
		.assume addr:long
		cpx 	bak16,X

; checking CPX abxi

; abxi cannot be forced to zpxi

		.echo **FAIL  CPX  abxi as zeropage

		.assume addr:zeropage
		cpx 	($4365,X)
		.assume addr:zeropage
		cpx 	(fwd16,X)
		.assume addr:zeropage
		cpx 	(bak16,X)

; abxi cannot be forced to @

		.echo **FAIL  CPX  abxi as long

		.assume addr:long
		cpx 	($4365,X)
		.assume addr:long
		cpx 	(fwd16,X)
		.assume addr:long
		cpx 	(bak16,X)

; checking CPX aby

; aby cannot be forced to zpy

		.echo **FAIL  CPX  aby as zeropage

		.assume addr:zeropage
		cpx 	$4365,Y
		.assume addr:zeropage
		cpx 	fwd16,Y
		.assume addr:zeropage
		cpx 	bak16,Y

; aby cannot be forced to @

		.echo **FAIL  CPX  aby as long

		.assume addr:long
		cpx 	$4365,Y
		.assume addr:long
		cpx 	fwd16,Y
		.assume addr:long
		cpx 	bak16,Y

; checking CPX acc

; absolute is not forcible

		.echo **FAIL  CPX  acc as absolute

		.assume addr:absolute
		cpx 	A
		.assume addr:absolute
		cpx 	a

; zeropage is not forcible

		.echo **FAIL  CPX  acc as zeropage

		.assume addr:zeropage
		cpx 	A
		.assume addr:zeropage
		cpx 	a

; long is not forcible

		.echo **FAIL  CPX  acc as long

		.assume addr:long
		cpx 	A
		.assume addr:long
		cpx 	a

; checking CPX imm

; absolute is not forcible

		.echo **FAIL  CPX  imm as absolute

		.assume addr:absolute
		cpx 	#$32
		.assume addr:absolute
		cpx 	#bak08
		.assume addr:absolute
		cpx 	#fwd08

; zeropage is not forcible

		.echo **FAIL  CPX  imm as zeropage

		.assume addr:zeropage
		cpx 	#$32
		.assume addr:zeropage
		cpx 	#bak08
		.assume addr:zeropage
		cpx 	#fwd08

; long is not forcible

		.echo **FAIL  CPX  imm as long

		.assume addr:long
		cpx 	#$32
		.assume addr:long
		cpx 	#bak08
		.assume addr:long
		cpx 	#fwd08

; checking CPX imp

; absolute is not forcible

		.echo **FAIL  CPX  imp as absolute

		.assume addr:absolute
		cpx 

; zeropage is not forcible

		.echo **FAIL  CPX  imp as zeropage

		.assume addr:zeropage
		cpx 

; long is not forcible

		.echo **FAIL  CPX  imp as long

		.assume addr:long
		cpx 

; checking CPX pcr

; pcr cannot be forced to @

		.echo **FAIL  CPX  pcr as long

		.assume addr:long
		cpx 	:+
		.assume addr:long
		cpx 	-
		.assume addr:long
		cpx 	+
		.assume addr:long
		cpx 	:-

; checking CPX zp

; zp cannot be forced to lab

		.echo **FAIL  CPX  zp as long

		.assume addr:long
		cpx 	$32
		.assume addr:long
		cpx 	bak08
		.assume addr:long
		cpx 	fwd08

; checking CPX zpi

; zpi cannot be forced to abi

		.echo **FAIL  CPX  zpi as absolute

		.assume addr:absolute
		cpx 	($32)
		.assume addr:absolute
		cpx 	(bak08)
		.assume addr:absolute
		cpx 	(fwd08)

; zpi cannot be forced to labi

		.echo **FAIL  CPX  zpi as long

		.assume addr:long
		cpx 	($32)
		.assume addr:long
		cpx 	(bak08)
		.assume addr:long
		cpx 	(fwd08)

; checking CPX zpiy

; zpiy cannot be forced to @

		.echo **FAIL  CPX  zpiy as absolute

		.assume addr:absolute
		cpx 	($32),y
		.assume addr:absolute
		cpx 	(bak08),y
		.assume addr:absolute
		cpx 	(fwd08),y

; zpiy cannot be forced to lzpiy

		.echo **FAIL  CPX  zpiy as long

		.assume addr:long
		cpx 	($32),y
		.assume addr:long
		cpx 	(bak08),y
		.assume addr:long
		cpx 	(fwd08),y

; checking CPX zpx

; zpx cannot be forced to abx

		.echo **FAIL  CPX  zpx as absolute

		.assume addr:absolute
		cpx 	$32,x
		.assume addr:absolute
		cpx 	bak08,x
		.assume addr:absolute
		cpx 	fwd08,x

; zpx cannot be forced to labx

		.echo **FAIL  CPX  zpx as long

		.assume addr:long
		cpx 	$32,x
		.assume addr:long
		cpx 	bak08,x
		.assume addr:long
		cpx 	fwd08,x

; checking CPX zpxi

; zpxi cannot be forced to abxi

		.echo **FAIL  CPX  zpxi as absolute

		.assume addr:absolute
		cpx 	($32,x)
		.assume addr:absolute
		cpx 	(bak08,x)
		.assume addr:absolute
		cpx 	(fwd08,x)

; zpxi cannot be forced to @

		.echo **FAIL  CPX  zpxi as long

		.assume addr:long
		cpx 	($32,x)
		.assume addr:long
		cpx 	(bak08,x)
		.assume addr:long
		cpx 	(fwd08,x)

; checking CPX zpy

; zpy cannot be forced to aby

		.echo **FAIL  CPX  zpy as absolute

		.assume addr:absolute
		cpx 	$32,y
		.assume addr:absolute
		cpx 	bak08,y
		.assume addr:absolute
		cpx 	fwd08,y

; zpy cannot be forced to @

		.echo **FAIL  CPX  zpy as long

		.assume addr:long
		cpx 	$32,y
		.assume addr:long
		cpx 	bak08,y
		.assume addr:long
		cpx 	fwd08,y


; -------------------------------


; -------------------------------

		; check JMP
		; 1 mnemonics with modes ['ab', 'abi', 'abxi']

; checking JMP ab

; ab cannot be forced to zp

		.echo **FAIL  JMP  ab as zeropage

		.assume addr:zeropage
		jmp 	$4365
		.assume addr:zeropage
		jmp 	fwd16
		.assume addr:zeropage
		jmp 	bak16

; ab cannot be forced to lab

		.echo **FAIL  JMP  ab as long

		.assume addr:long
		jmp 	$4365
		.assume addr:long
		jmp 	fwd16
		.assume addr:long
		jmp 	bak16

; checking JMP abi

; abi cannot be forced to zpi

		.echo **FAIL  JMP  abi as zeropage

		.assume addr:zeropage
		jmp 	($4365)
		.assume addr:zeropage
		jmp 	(fwd16)
		.assume addr:zeropage
		jmp 	(bak16)

; abi cannot be forced to labi

		.echo **FAIL  JMP  abi as long

		.assume addr:long
		jmp 	($4365)
		.assume addr:long
		jmp 	(fwd16)
		.assume addr:long
		jmp 	(bak16)

; checking JMP abx

; abx cannot be forced to zpx

		.echo **FAIL  JMP  abx as zeropage

		.assume addr:zeropage
		jmp 	$4365,X
		.assume addr:zeropage
		jmp 	fwd16,X
		.assume addr:zeropage
		jmp 	bak16,X

; abx cannot be forced to labx

		.echo **FAIL  JMP  abx as long

		.assume addr:long
		jmp 	$4365,X
		.assume addr:long
		jmp 	fwd16,X
		.assume addr:long
		jmp 	bak16,X

; checking JMP abxi

; abxi cannot be forced to zpxi

		.echo **FAIL  JMP  abxi as zeropage

		.assume addr:zeropage
		jmp 	($4365,X)
		.assume addr:zeropage
		jmp 	(fwd16,X)
		.assume addr:zeropage
		jmp 	(bak16,X)

; abxi cannot be forced to @

		.echo **FAIL  JMP  abxi as long

		.assume addr:long
		jmp 	($4365,X)
		.assume addr:long
		jmp 	(fwd16,X)
		.assume addr:long
		jmp 	(bak16,X)

; checking JMP aby

; aby cannot be forced to zpy

		.echo **FAIL  JMP  aby as zeropage

		.assume addr:zeropage
		jmp 	$4365,Y
		.assume addr:zeropage
		jmp 	fwd16,Y
		.assume addr:zeropage
		jmp 	bak16,Y

; aby cannot be forced to @

		.echo **FAIL  JMP  aby as long

		.assume addr:long
		jmp 	$4365,Y
		.assume addr:long
		jmp 	fwd16,Y
		.assume addr:long
		jmp 	bak16,Y

; checking JMP acc

; absolute is not forcible

		.echo **FAIL  JMP  acc as absolute

		.assume addr:absolute
		jmp 	A
		.assume addr:absolute
		jmp 	a

; zeropage is not forcible

		.echo **FAIL  JMP  acc as zeropage

		.assume addr:zeropage
		jmp 	A
		.assume addr:zeropage
		jmp 	a

; long is not forcible

		.echo **FAIL  JMP  acc as long

		.assume addr:long
		jmp 	A
		.assume addr:long
		jmp 	a

; checking JMP imm

; absolute is not forcible

		.echo **FAIL  JMP  imm as absolute

		.assume addr:absolute
		jmp 	#$32
		.assume addr:absolute
		jmp 	#bak08
		.assume addr:absolute
		jmp 	#fwd08

; zeropage is not forcible

		.echo **FAIL  JMP  imm as zeropage

		.assume addr:zeropage
		jmp 	#$32
		.assume addr:zeropage
		jmp 	#bak08
		.assume addr:zeropage
		jmp 	#fwd08

; long is not forcible

		.echo **FAIL  JMP  imm as long

		.assume addr:long
		jmp 	#$32
		.assume addr:long
		jmp 	#bak08
		.assume addr:long
		jmp 	#fwd08

; checking JMP imp

; absolute is not forcible

		.echo **FAIL  JMP  imp as absolute

		.assume addr:absolute
		jmp 

; zeropage is not forcible

		.echo **FAIL  JMP  imp as zeropage

		.assume addr:zeropage
		jmp 

; long is not forcible

		.echo **FAIL  JMP  imp as long

		.assume addr:long
		jmp 

; checking JMP pcr

; pcr cannot be forced to @

		.echo **FAIL  JMP  pcr as zeropage

		.assume addr:zeropage
		jmp 	:+
		.assume addr:zeropage
		jmp 	-
		.assume addr:zeropage
		jmp 	+
		.assume addr:zeropage
		jmp 	:-

; pcr cannot be forced to @

		.echo **FAIL  JMP  pcr as long

		.assume addr:long
		jmp 	:+
		.assume addr:long
		jmp 	-
		.assume addr:long
		jmp 	+
		.assume addr:long
		jmp 	:-

; checking JMP zp

; zp cannot be forced to lab

		.echo **FAIL  JMP  zp as long

		.assume addr:long
		jmp 	$32
		.assume addr:long
		jmp 	bak08
		.assume addr:long
		jmp 	fwd08

; checking JMP zpi

; zpi cannot be forced to labi

		.echo **FAIL  JMP  zpi as long

		.assume addr:long
		jmp 	($32)
		.assume addr:long
		jmp 	(bak08)
		.assume addr:long
		jmp 	(fwd08)

; checking JMP zpiy

; zpiy cannot be forced to @

		.echo **FAIL  JMP  zpiy as absolute

		.assume addr:absolute
		jmp 	($32),y
		.assume addr:absolute
		jmp 	(bak08),y
		.assume addr:absolute
		jmp 	(fwd08),y

; zpiy cannot be forced to lzpiy

		.echo **FAIL  JMP  zpiy as long

		.assume addr:long
		jmp 	($32),y
		.assume addr:long
		jmp 	(bak08),y
		.assume addr:long
		jmp 	(fwd08),y

; checking JMP zpx

; zpx cannot be forced to abx

		.echo **FAIL  JMP  zpx as absolute

		.assume addr:absolute
		jmp 	$32,x
		.assume addr:absolute
		jmp 	bak08,x
		.assume addr:absolute
		jmp 	fwd08,x

; zpx cannot be forced to labx

		.echo **FAIL  JMP  zpx as long

		.assume addr:long
		jmp 	$32,x
		.assume addr:long
		jmp 	bak08,x
		.assume addr:long
		jmp 	fwd08,x

; checking JMP zpxi

; zpxi cannot be forced to @

		.echo **FAIL  JMP  zpxi as long

		.assume addr:long
		jmp 	($32,x)
		.assume addr:long
		jmp 	(bak08,x)
		.assume addr:long
		jmp 	(fwd08,x)

; checking JMP zpy

; zpy cannot be forced to aby

		.echo **FAIL  JMP  zpy as absolute

		.assume addr:absolute
		jmp 	$32,y
		.assume addr:absolute
		jmp 	bak08,y
		.assume addr:absolute
		jmp 	fwd08,y

; zpy cannot be forced to @

		.echo **FAIL  JMP  zpy as long

		.assume addr:long
		jmp 	$32,y
		.assume addr:long
		jmp 	bak08,y
		.assume addr:long
		jmp 	fwd08,y


; -------------------------------


; -------------------------------

		; check JSR
		; 1 mnemonics with modes ['ab']

; checking JSR ab

; ab cannot be forced to zp

		.echo **FAIL  JSR  ab as zeropage

		.assume addr:zeropage
		jsr 	$4365
		.assume addr:zeropage
		jsr 	fwd16
		.assume addr:zeropage
		jsr 	bak16

; ab cannot be forced to lab

		.echo **FAIL  JSR  ab as long

		.assume addr:long
		jsr 	$4365
		.assume addr:long
		jsr 	fwd16
		.assume addr:long
		jsr 	bak16

; checking JSR abi

; abi cannot be forced to zpi

		.echo **FAIL  JSR  abi as zeropage

		.assume addr:zeropage
		jsr 	($4365)
		.assume addr:zeropage
		jsr 	(fwd16)
		.assume addr:zeropage
		jsr 	(bak16)

; abi cannot be forced to labi

		.echo **FAIL  JSR  abi as long

		.assume addr:long
		jsr 	($4365)
		.assume addr:long
		jsr 	(fwd16)
		.assume addr:long
		jsr 	(bak16)

; checking JSR abx

; abx cannot be forced to zpx

		.echo **FAIL  JSR  abx as zeropage

		.assume addr:zeropage
		jsr 	$4365,X
		.assume addr:zeropage
		jsr 	fwd16,X
		.assume addr:zeropage
		jsr 	bak16,X

; abx cannot be forced to labx

		.echo **FAIL  JSR  abx as long

		.assume addr:long
		jsr 	$4365,X
		.assume addr:long
		jsr 	fwd16,X
		.assume addr:long
		jsr 	bak16,X

; checking JSR abxi

; abxi cannot be forced to zpxi

		.echo **FAIL  JSR  abxi as zeropage

		.assume addr:zeropage
		jsr 	($4365,X)
		.assume addr:zeropage
		jsr 	(fwd16,X)
		.assume addr:zeropage
		jsr 	(bak16,X)

; abxi cannot be forced to @

		.echo **FAIL  JSR  abxi as long

		.assume addr:long
		jsr 	($4365,X)
		.assume addr:long
		jsr 	(fwd16,X)
		.assume addr:long
		jsr 	(bak16,X)

; checking JSR aby

; aby cannot be forced to zpy

		.echo **FAIL  JSR  aby as zeropage

		.assume addr:zeropage
		jsr 	$4365,Y
		.assume addr:zeropage
		jsr 	fwd16,Y
		.assume addr:zeropage
		jsr 	bak16,Y

; aby cannot be forced to @

		.echo **FAIL  JSR  aby as long

		.assume addr:long
		jsr 	$4365,Y
		.assume addr:long
		jsr 	fwd16,Y
		.assume addr:long
		jsr 	bak16,Y

; checking JSR acc

; absolute is not forcible

		.echo **FAIL  JSR  acc as absolute

		.assume addr:absolute
		jsr 	A
		.assume addr:absolute
		jsr 	a

; zeropage is not forcible

		.echo **FAIL  JSR  acc as zeropage

		.assume addr:zeropage
		jsr 	A
		.assume addr:zeropage
		jsr 	a

; long is not forcible

		.echo **FAIL  JSR  acc as long

		.assume addr:long
		jsr 	A
		.assume addr:long
		jsr 	a

; checking JSR imm

; absolute is not forcible

		.echo **FAIL  JSR  imm as absolute

		.assume addr:absolute
		jsr 	#$32
		.assume addr:absolute
		jsr 	#bak08
		.assume addr:absolute
		jsr 	#fwd08

; zeropage is not forcible

		.echo **FAIL  JSR  imm as zeropage

		.assume addr:zeropage
		jsr 	#$32
		.assume addr:zeropage
		jsr 	#bak08
		.assume addr:zeropage
		jsr 	#fwd08

; long is not forcible

		.echo **FAIL  JSR  imm as long

		.assume addr:long
		jsr 	#$32
		.assume addr:long
		jsr 	#bak08
		.assume addr:long
		jsr 	#fwd08

; checking JSR imp

; absolute is not forcible

		.echo **FAIL  JSR  imp as absolute

		.assume addr:absolute
		jsr 

; zeropage is not forcible

		.echo **FAIL  JSR  imp as zeropage

		.assume addr:zeropage
		jsr 

; long is not forcible

		.echo **FAIL  JSR  imp as long

		.assume addr:long
		jsr 

; checking JSR pcr

; pcr cannot be forced to @

		.echo **FAIL  JSR  pcr as zeropage

		.assume addr:zeropage
		jsr 	:+
		.assume addr:zeropage
		jsr 	-
		.assume addr:zeropage
		jsr 	+
		.assume addr:zeropage
		jsr 	:-

; pcr cannot be forced to @

		.echo **FAIL  JSR  pcr as long

		.assume addr:long
		jsr 	:+
		.assume addr:long
		jsr 	-
		.assume addr:long
		jsr 	+
		.assume addr:long
		jsr 	:-

; checking JSR zp

; zp cannot be forced to lab

		.echo **FAIL  JSR  zp as long

		.assume addr:long
		jsr 	$32
		.assume addr:long
		jsr 	bak08
		.assume addr:long
		jsr 	fwd08

; checking JSR zpi

; zpi cannot be forced to abi

		.echo **FAIL  JSR  zpi as absolute

		.assume addr:absolute
		jsr 	($32)
		.assume addr:absolute
		jsr 	(bak08)
		.assume addr:absolute
		jsr 	(fwd08)

; zpi cannot be forced to labi

		.echo **FAIL  JSR  zpi as long

		.assume addr:long
		jsr 	($32)
		.assume addr:long
		jsr 	(bak08)
		.assume addr:long
		jsr 	(fwd08)

; checking JSR zpiy

; zpiy cannot be forced to @

		.echo **FAIL  JSR  zpiy as absolute

		.assume addr:absolute
		jsr 	($32),y
		.assume addr:absolute
		jsr 	(bak08),y
		.assume addr:absolute
		jsr 	(fwd08),y

; zpiy cannot be forced to lzpiy

		.echo **FAIL  JSR  zpiy as long

		.assume addr:long
		jsr 	($32),y
		.assume addr:long
		jsr 	(bak08),y
		.assume addr:long
		jsr 	(fwd08),y

; checking JSR zpx

; zpx cannot be forced to abx

		.echo **FAIL  JSR  zpx as absolute

		.assume addr:absolute
		jsr 	$32,x
		.assume addr:absolute
		jsr 	bak08,x
		.assume addr:absolute
		jsr 	fwd08,x

; zpx cannot be forced to labx

		.echo **FAIL  JSR  zpx as long

		.assume addr:long
		jsr 	$32,x
		.assume addr:long
		jsr 	bak08,x
		.assume addr:long
		jsr 	fwd08,x

; checking JSR zpxi

; zpxi cannot be forced to abxi

		.echo **FAIL  JSR  zpxi as absolute

		.assume addr:absolute
		jsr 	($32,x)
		.assume addr:absolute
		jsr 	(bak08,x)
		.assume addr:absolute
		jsr 	(fwd08,x)

; zpxi cannot be forced to @

		.echo **FAIL  JSR  zpxi as long

		.assume addr:long
		jsr 	($32,x)
		.assume addr:long
		jsr 	(bak08,x)
		.assume addr:long
		jsr 	(fwd08,x)

; checking JSR zpy

; zpy cannot be forced to aby

		.echo **FAIL  JSR  zpy as absolute

		.assume addr:absolute
		jsr 	$32,y
		.assume addr:absolute
		jsr 	bak08,y
		.assume addr:absolute
		jsr 	fwd08,y

; zpy cannot be forced to @

		.echo **FAIL  JSR  zpy as long

		.assume addr:long
		jsr 	$32,y
		.assume addr:long
		jsr 	bak08,y
		.assume addr:long
		jsr 	fwd08,y


; -------------------------------


; -------------------------------

		; check LDX
		; 1 mnemonics with modes ['ab', 'aby', 'imm', 'zp', 'zpy']

; checking LDX ab

; ab cannot be forced to lab

		.echo **FAIL  LDX  ab as long

		.assume addr:long
		ldx 	$4365
		.assume addr:long
		ldx 	fwd16
		.assume addr:long
		ldx 	bak16

; checking LDX abi

; abi cannot be forced to zpi

		.echo **FAIL  LDX  abi as zeropage

		.assume addr:zeropage
		ldx 	($4365)
		.assume addr:zeropage
		ldx 	(fwd16)
		.assume addr:zeropage
		ldx 	(bak16)

; abi cannot be forced to labi

		.echo **FAIL  LDX  abi as long

		.assume addr:long
		ldx 	($4365)
		.assume addr:long
		ldx 	(fwd16)
		.assume addr:long
		ldx 	(bak16)

; checking LDX abx

; abx cannot be forced to zpx

		.echo **FAIL  LDX  abx as zeropage

		.assume addr:zeropage
		ldx 	$4365,X
		.assume addr:zeropage
		ldx 	fwd16,X
		.assume addr:zeropage
		ldx 	bak16,X

; abx cannot be forced to labx

		.echo **FAIL  LDX  abx as long

		.assume addr:long
		ldx 	$4365,X
		.assume addr:long
		ldx 	fwd16,X
		.assume addr:long
		ldx 	bak16,X

; checking LDX abxi

; abxi cannot be forced to zpxi

		.echo **FAIL  LDX  abxi as zeropage

		.assume addr:zeropage
		ldx 	($4365,X)
		.assume addr:zeropage
		ldx 	(fwd16,X)
		.assume addr:zeropage
		ldx 	(bak16,X)

; abxi cannot be forced to @

		.echo **FAIL  LDX  abxi as long

		.assume addr:long
		ldx 	($4365,X)
		.assume addr:long
		ldx 	(fwd16,X)
		.assume addr:long
		ldx 	(bak16,X)

; checking LDX aby

; aby cannot be forced to @

		.echo **FAIL  LDX  aby as long

		.assume addr:long
		ldx 	$4365,Y
		.assume addr:long
		ldx 	fwd16,Y
		.assume addr:long
		ldx 	bak16,Y

; checking LDX acc

; absolute is not forcible

		.echo **FAIL  LDX  acc as absolute

		.assume addr:absolute
		ldx 	A
		.assume addr:absolute
		ldx 	a

; zeropage is not forcible

		.echo **FAIL  LDX  acc as zeropage

		.assume addr:zeropage
		ldx 	A
		.assume addr:zeropage
		ldx 	a

; long is not forcible

		.echo **FAIL  LDX  acc as long

		.assume addr:long
		ldx 	A
		.assume addr:long
		ldx 	a

; checking LDX imm

; absolute is not forcible

		.echo **FAIL  LDX  imm as absolute

		.assume addr:absolute
		ldx 	#$32
		.assume addr:absolute
		ldx 	#bak08
		.assume addr:absolute
		ldx 	#fwd08

; zeropage is not forcible

		.echo **FAIL  LDX  imm as zeropage

		.assume addr:zeropage
		ldx 	#$32
		.assume addr:zeropage
		ldx 	#bak08
		.assume addr:zeropage
		ldx 	#fwd08

; long is not forcible

		.echo **FAIL  LDX  imm as long

		.assume addr:long
		ldx 	#$32
		.assume addr:long
		ldx 	#bak08
		.assume addr:long
		ldx 	#fwd08

; checking LDX imp

; absolute is not forcible

		.echo **FAIL  LDX  imp as absolute

		.assume addr:absolute
		ldx 

; zeropage is not forcible

		.echo **FAIL  LDX  imp as zeropage

		.assume addr:zeropage
		ldx 

; long is not forcible

		.echo **FAIL  LDX  imp as long

		.assume addr:long
		ldx 

; checking LDX pcr

; pcr cannot be forced to @

		.echo **FAIL  LDX  pcr as long

		.assume addr:long
		ldx 	:+
		.assume addr:long
		ldx 	-
		.assume addr:long
		ldx 	+
		.assume addr:long
		ldx 	:-

; checking LDX zp

; zp cannot be forced to lab

		.echo **FAIL  LDX  zp as long

		.assume addr:long
		ldx 	$32
		.assume addr:long
		ldx 	bak08
		.assume addr:long
		ldx 	fwd08

; checking LDX zpi

; zpi cannot be forced to abi

		.echo **FAIL  LDX  zpi as absolute

		.assume addr:absolute
		ldx 	($32)
		.assume addr:absolute
		ldx 	(bak08)
		.assume addr:absolute
		ldx 	(fwd08)

; zpi cannot be forced to labi

		.echo **FAIL  LDX  zpi as long

		.assume addr:long
		ldx 	($32)
		.assume addr:long
		ldx 	(bak08)
		.assume addr:long
		ldx 	(fwd08)

; checking LDX zpiy

; zpiy cannot be forced to @

		.echo **FAIL  LDX  zpiy as absolute

		.assume addr:absolute
		ldx 	($32),y
		.assume addr:absolute
		ldx 	(bak08),y
		.assume addr:absolute
		ldx 	(fwd08),y

; zpiy cannot be forced to lzpiy

		.echo **FAIL  LDX  zpiy as long

		.assume addr:long
		ldx 	($32),y
		.assume addr:long
		ldx 	(bak08),y
		.assume addr:long
		ldx 	(fwd08),y

; checking LDX zpx

; zpx cannot be forced to abx

		.echo **FAIL  LDX  zpx as absolute

		.assume addr:absolute
		ldx 	$32,x
		.assume addr:absolute
		ldx 	bak08,x
		.assume addr:absolute
		ldx 	fwd08,x

; zpx cannot be forced to labx

		.echo **FAIL  LDX  zpx as long

		.assume addr:long
		ldx 	$32,x
		.assume addr:long
		ldx 	bak08,x
		.assume addr:long
		ldx 	fwd08,x

; checking LDX zpxi

; zpxi cannot be forced to abxi

		.echo **FAIL  LDX  zpxi as absolute

		.assume addr:absolute
		ldx 	($32,x)
		.assume addr:absolute
		ldx 	(bak08,x)
		.assume addr:absolute
		ldx 	(fwd08,x)

; zpxi cannot be forced to @

		.echo **FAIL  LDX  zpxi as long

		.assume addr:long
		ldx 	($32,x)
		.assume addr:long
		ldx 	(bak08,x)
		.assume addr:long
		ldx 	(fwd08,x)

; checking LDX zpy

; zpy cannot be forced to @

		.echo **FAIL  LDX  zpy as long

		.assume addr:long
		ldx 	$32,y
		.assume addr:long
		ldx 	bak08,y
		.assume addr:long
		ldx 	fwd08,y


; -------------------------------


; -------------------------------

		; check STA
		; 1 mnemonics with modes ['ab', 'abx', 'aby', 'zp', 'zpi', 'zpiy', 'zpx', 'zpxi']

; checking STA ab

; ab cannot be forced to lab

		.echo **FAIL  STA  ab as long

		.assume addr:long
		sta 	$4365
		.assume addr:long
		sta 	fwd16
		.assume addr:long
		sta 	bak16

; checking STA abi

; abi cannot be forced to labi

		.echo **FAIL  STA  abi as long

		.assume addr:long
		sta 	($4365)
		.assume addr:long
		sta 	(fwd16)
		.assume addr:long
		sta 	(bak16)

; checking STA abx

; abx cannot be forced to labx

		.echo **FAIL  STA  abx as long

		.assume addr:long
		sta 	$4365,X
		.assume addr:long
		sta 	fwd16,X
		.assume addr:long
		sta 	bak16,X

; checking STA abxi

; abxi cannot be forced to @

		.echo **FAIL  STA  abxi as long

		.assume addr:long
		sta 	($4365,X)
		.assume addr:long
		sta 	(fwd16,X)
		.assume addr:long
		sta 	(bak16,X)

; checking STA aby

; aby cannot be forced to zpy

		.echo **FAIL  STA  aby as zeropage

		.assume addr:zeropage
		sta 	$4365,Y
		.assume addr:zeropage
		sta 	fwd16,Y
		.assume addr:zeropage
		sta 	bak16,Y

; aby cannot be forced to @

		.echo **FAIL  STA  aby as long

		.assume addr:long
		sta 	$4365,Y
		.assume addr:long
		sta 	fwd16,Y
		.assume addr:long
		sta 	bak16,Y

; checking STA acc

; absolute is not forcible

		.echo **FAIL  STA  acc as absolute

		.assume addr:absolute
		sta 	A
		.assume addr:absolute
		sta 	a

; zeropage is not forcible

		.echo **FAIL  STA  acc as zeropage

		.assume addr:zeropage
		sta 	A
		.assume addr:zeropage
		sta 	a

; long is not forcible

		.echo **FAIL  STA  acc as long

		.assume addr:long
		sta 	A
		.assume addr:long
		sta 	a

; checking STA imm

; absolute is not forcible

		.echo **FAIL  STA  imm as absolute

		.assume addr:absolute
		sta 	#$32
		.assume addr:absolute
		sta 	#bak08
		.assume addr:absolute
		sta 	#fwd08

; zeropage is not forcible

		.echo **FAIL  STA  imm as zeropage

		.assume addr:zeropage
		sta 	#$32
		.assume addr:zeropage
		sta 	#bak08
		.assume addr:zeropage
		sta 	#fwd08

; long is not forcible

		.echo **FAIL  STA  imm as long

		.assume addr:long
		sta 	#$32
		.assume addr:long
		sta 	#bak08
		.assume addr:long
		sta 	#fwd08

; checking STA imp

; absolute is not forcible

		.echo **FAIL  STA  imp as absolute

		.assume addr:absolute
		sta 

; zeropage is not forcible

		.echo **FAIL  STA  imp as zeropage

		.assume addr:zeropage
		sta 

; long is not forcible

		.echo **FAIL  STA  imp as long

		.assume addr:long
		sta 

; checking STA pcr

; pcr cannot be forced to @

		.echo **FAIL  STA  pcr as long

		.assume addr:long
		sta 	:+
		.assume addr:long
		sta 	-
		.assume addr:long
		sta 	+
		.assume addr:long
		sta 	:-

; checking STA zp

; zp cannot be forced to lab

		.echo **FAIL  STA  zp as long

		.assume addr:long
		sta 	$32
		.assume addr:long
		sta 	bak08
		.assume addr:long
		sta 	fwd08

; checking STA zpi

; zpi cannot be forced to abi

		.echo **FAIL  STA  zpi as absolute

		.assume addr:absolute
		sta 	($32)
		.assume addr:absolute
		sta 	(bak08)
		.assume addr:absolute
		sta 	(fwd08)

; zpi cannot be forced to labi

		.echo **FAIL  STA  zpi as long

		.assume addr:long
		sta 	($32)
		.assume addr:long
		sta 	(bak08)
		.assume addr:long
		sta 	(fwd08)

; checking STA zpiy

; zpiy cannot be forced to @

		.echo **FAIL  STA  zpiy as absolute

		.assume addr:absolute
		sta 	($32),y
		.assume addr:absolute
		sta 	(bak08),y
		.assume addr:absolute
		sta 	(fwd08),y

; zpiy cannot be forced to lzpiy

		.echo **FAIL  STA  zpiy as long

		.assume addr:long
		sta 	($32),y
		.assume addr:long
		sta 	(bak08),y
		.assume addr:long
		sta 	(fwd08),y

; checking STA zpx

; zpx cannot be forced to labx

		.echo **FAIL  STA  zpx as long

		.assume addr:long
		sta 	$32,x
		.assume addr:long
		sta 	bak08,x
		.assume addr:long
		sta 	fwd08,x

; checking STA zpxi

; zpxi cannot be forced to abxi

		.echo **FAIL  STA  zpxi as absolute

		.assume addr:absolute
		sta 	($32,x)
		.assume addr:absolute
		sta 	(bak08,x)
		.assume addr:absolute
		sta 	(fwd08,x)

; zpxi cannot be forced to @

		.echo **FAIL  STA  zpxi as long

		.assume addr:long
		sta 	($32,x)
		.assume addr:long
		sta 	(bak08,x)
		.assume addr:long
		sta 	(fwd08,x)

; checking STA zpy

; zpy cannot be forced to @

		.echo **FAIL  STA  zpy as long

		.assume addr:long
		sta 	$32,y
		.assume addr:long
		sta 	bak08,y
		.assume addr:long
		sta 	fwd08,y


; -------------------------------


; -------------------------------

		; check STX
		; 1 mnemonics with modes ['ab', 'zp', 'zpy']

; checking STX ab

; ab cannot be forced to lab

		.echo **FAIL  STX  ab as long

		.assume addr:long
		stx 	$4365
		.assume addr:long
		stx 	fwd16
		.assume addr:long
		stx 	bak16

; checking STX abi

; abi cannot be forced to zpi

		.echo **FAIL  STX  abi as zeropage

		.assume addr:zeropage
		stx 	($4365)
		.assume addr:zeropage
		stx 	(fwd16)
		.assume addr:zeropage
		stx 	(bak16)

; abi cannot be forced to labi

		.echo **FAIL  STX  abi as long

		.assume addr:long
		stx 	($4365)
		.assume addr:long
		stx 	(fwd16)
		.assume addr:long
		stx 	(bak16)

; checking STX abx

; abx cannot be forced to zpx

		.echo **FAIL  STX  abx as zeropage

		.assume addr:zeropage
		stx 	$4365,X
		.assume addr:zeropage
		stx 	fwd16,X
		.assume addr:zeropage
		stx 	bak16,X

; abx cannot be forced to labx

		.echo **FAIL  STX  abx as long

		.assume addr:long
		stx 	$4365,X
		.assume addr:long
		stx 	fwd16,X
		.assume addr:long
		stx 	bak16,X

; checking STX abxi

; abxi cannot be forced to zpxi

		.echo **FAIL  STX  abxi as zeropage

		.assume addr:zeropage
		stx 	($4365,X)
		.assume addr:zeropage
		stx 	(fwd16,X)
		.assume addr:zeropage
		stx 	(bak16,X)

; abxi cannot be forced to @

		.echo **FAIL  STX  abxi as long

		.assume addr:long
		stx 	($4365,X)
		.assume addr:long
		stx 	(fwd16,X)
		.assume addr:long
		stx 	(bak16,X)

; checking STX aby

; aby cannot be forced to @

		.echo **FAIL  STX  aby as long

		.assume addr:long
		stx 	$4365,Y
		.assume addr:long
		stx 	fwd16,Y
		.assume addr:long
		stx 	bak16,Y

; checking STX acc

; absolute is not forcible

		.echo **FAIL  STX  acc as absolute

		.assume addr:absolute
		stx 	A
		.assume addr:absolute
		stx 	a

; zeropage is not forcible

		.echo **FAIL  STX  acc as zeropage

		.assume addr:zeropage
		stx 	A
		.assume addr:zeropage
		stx 	a

; long is not forcible

		.echo **FAIL  STX  acc as long

		.assume addr:long
		stx 	A
		.assume addr:long
		stx 	a

; checking STX imm

; absolute is not forcible

		.echo **FAIL  STX  imm as absolute

		.assume addr:absolute
		stx 	#$32
		.assume addr:absolute
		stx 	#bak08
		.assume addr:absolute
		stx 	#fwd08

; zeropage is not forcible

		.echo **FAIL  STX  imm as zeropage

		.assume addr:zeropage
		stx 	#$32
		.assume addr:zeropage
		stx 	#bak08
		.assume addr:zeropage
		stx 	#fwd08

; long is not forcible

		.echo **FAIL  STX  imm as long

		.assume addr:long
		stx 	#$32
		.assume addr:long
		stx 	#bak08
		.assume addr:long
		stx 	#fwd08

; checking STX imp

; absolute is not forcible

		.echo **FAIL  STX  imp as absolute

		.assume addr:absolute
		stx 

; zeropage is not forcible

		.echo **FAIL  STX  imp as zeropage

		.assume addr:zeropage
		stx 

; long is not forcible

		.echo **FAIL  STX  imp as long

		.assume addr:long
		stx 

; checking STX pcr

; pcr cannot be forced to @

		.echo **FAIL  STX  pcr as long

		.assume addr:long
		stx 	:+
		.assume addr:long
		stx 	-
		.assume addr:long
		stx 	+
		.assume addr:long
		stx 	:-

; checking STX zp

; zp cannot be forced to lab

		.echo **FAIL  STX  zp as long

		.assume addr:long
		stx 	$32
		.assume addr:long
		stx 	bak08
		.assume addr:long
		stx 	fwd08

; checking STX zpi

; zpi cannot be forced to abi

		.echo **FAIL  STX  zpi as absolute

		.assume addr:absolute
		stx 	($32)
		.assume addr:absolute
		stx 	(bak08)
		.assume addr:absolute
		stx 	(fwd08)

; zpi cannot be forced to labi

		.echo **FAIL  STX  zpi as long

		.assume addr:long
		stx 	($32)
		.assume addr:long
		stx 	(bak08)
		.assume addr:long
		stx 	(fwd08)

; checking STX zpiy

; zpiy cannot be forced to @

		.echo **FAIL  STX  zpiy as absolute

		.assume addr:absolute
		stx 	($32),y
		.assume addr:absolute
		stx 	(bak08),y
		.assume addr:absolute
		stx 	(fwd08),y

; zpiy cannot be forced to lzpiy

		.echo **FAIL  STX  zpiy as long

		.assume addr:long
		stx 	($32),y
		.assume addr:long
		stx 	(bak08),y
		.assume addr:long
		stx 	(fwd08),y

; checking STX zpx

; zpx cannot be forced to abx

		.echo **FAIL  STX  zpx as absolute

		.assume addr:absolute
		stx 	$32,x
		.assume addr:absolute
		stx 	bak08,x
		.assume addr:absolute
		stx 	fwd08,x

; zpx cannot be forced to labx

		.echo **FAIL  STX  zpx as long

		.assume addr:long
		stx 	$32,x
		.assume addr:long
		stx 	bak08,x
		.assume addr:long
		stx 	fwd08,x

; checking STX zpxi

; zpxi cannot be forced to abxi

		.echo **FAIL  STX  zpxi as absolute

		.assume addr:absolute
		stx 	($32,x)
		.assume addr:absolute
		stx 	(bak08,x)
		.assume addr:absolute
		stx 	(fwd08,x)

; zpxi cannot be forced to @

		.echo **FAIL  STX  zpxi as long

		.assume addr:long
		stx 	($32,x)
		.assume addr:long
		stx 	(bak08,x)
		.assume addr:long
		stx 	(fwd08,x)

; checking STX zpy

; zpy cannot be forced to aby

		.echo **FAIL  STX  zpy as absolute

		.assume addr:absolute
		stx 	$32,y
		.assume addr:absolute
		stx 	bak08,y
		.assume addr:absolute
		stx 	fwd08,y

; zpy cannot be forced to @

		.echo **FAIL  STX  zpy as long

		.assume addr:long
		stx 	$32,y
		.assume addr:long
		stx 	bak08,y
		.assume addr:long
		stx 	fwd08,y


; -------------------------------


; -------------------------------

		; check STY
		; 1 mnemonics with modes ['ab', 'zp', 'zpx']

; checking STY ab

; ab cannot be forced to lab

		.echo **FAIL  STY  ab as long

		.assume addr:long
		sty 	$4365
		.assume addr:long
		sty 	fwd16
		.assume addr:long
		sty 	bak16

; checking STY abi

; abi cannot be forced to zpi

		.echo **FAIL  STY  abi as zeropage

		.assume addr:zeropage
		sty 	($4365)
		.assume addr:zeropage
		sty 	(fwd16)
		.assume addr:zeropage
		sty 	(bak16)

; abi cannot be forced to labi

		.echo **FAIL  STY  abi as long

		.assume addr:long
		sty 	($4365)
		.assume addr:long
		sty 	(fwd16)
		.assume addr:long
		sty 	(bak16)

; checking STY abx

; abx cannot be forced to labx

		.echo **FAIL  STY  abx as long

		.assume addr:long
		sty 	$4365,X
		.assume addr:long
		sty 	fwd16,X
		.assume addr:long
		sty 	bak16,X

; checking STY abxi

; abxi cannot be forced to zpxi

		.echo **FAIL  STY  abxi as zeropage

		.assume addr:zeropage
		sty 	($4365,X)
		.assume addr:zeropage
		sty 	(fwd16,X)
		.assume addr:zeropage
		sty 	(bak16,X)

; abxi cannot be forced to @

		.echo **FAIL  STY  abxi as long

		.assume addr:long
		sty 	($4365,X)
		.assume addr:long
		sty 	(fwd16,X)
		.assume addr:long
		sty 	(bak16,X)

; checking STY aby

; aby cannot be forced to zpy

		.echo **FAIL  STY  aby as zeropage

		.assume addr:zeropage
		sty 	$4365,Y
		.assume addr:zeropage
		sty 	fwd16,Y
		.assume addr:zeropage
		sty 	bak16,Y

; aby cannot be forced to @

		.echo **FAIL  STY  aby as long

		.assume addr:long
		sty 	$4365,Y
		.assume addr:long
		sty 	fwd16,Y
		.assume addr:long
		sty 	bak16,Y

; checking STY acc

; absolute is not forcible

		.echo **FAIL  STY  acc as absolute

		.assume addr:absolute
		sty 	A
		.assume addr:absolute
		sty 	a

; zeropage is not forcible

		.echo **FAIL  STY  acc as zeropage

		.assume addr:zeropage
		sty 	A
		.assume addr:zeropage
		sty 	a

; long is not forcible

		.echo **FAIL  STY  acc as long

		.assume addr:long
		sty 	A
		.assume addr:long
		sty 	a

; checking STY imm

; absolute is not forcible

		.echo **FAIL  STY  imm as absolute

		.assume addr:absolute
		sty 	#$32
		.assume addr:absolute
		sty 	#bak08
		.assume addr:absolute
		sty 	#fwd08

; zeropage is not forcible

		.echo **FAIL  STY  imm as zeropage

		.assume addr:zeropage
		sty 	#$32
		.assume addr:zeropage
		sty 	#bak08
		.assume addr:zeropage
		sty 	#fwd08

; long is not forcible

		.echo **FAIL  STY  imm as long

		.assume addr:long
		sty 	#$32
		.assume addr:long
		sty 	#bak08
		.assume addr:long
		sty 	#fwd08

; checking STY imp

; absolute is not forcible

		.echo **FAIL  STY  imp as absolute

		.assume addr:absolute
		sty 

; zeropage is not forcible

		.echo **FAIL  STY  imp as zeropage

		.assume addr:zeropage
		sty 

; long is not forcible

		.echo **FAIL  STY  imp as long

		.assume addr:long
		sty 

; checking STY pcr

; pcr cannot be forced to @

		.echo **FAIL  STY  pcr as long

		.assume addr:long
		sty 	:+
		.assume addr:long
		sty 	-
		.assume addr:long
		sty 	+
		.assume addr:long
		sty 	:-

; checking STY zp

; zp cannot be forced to lab

		.echo **FAIL  STY  zp as long

		.assume addr:long
		sty 	$32
		.assume addr:long
		sty 	bak08
		.assume addr:long
		sty 	fwd08

; checking STY zpi

; zpi cannot be forced to abi

		.echo **FAIL  STY  zpi as absolute

		.assume addr:absolute
		sty 	($32)
		.assume addr:absolute
		sty 	(bak08)
		.assume addr:absolute
		sty 	(fwd08)

; zpi cannot be forced to labi

		.echo **FAIL  STY  zpi as long

		.assume addr:long
		sty 	($32)
		.assume addr:long
		sty 	(bak08)
		.assume addr:long
		sty 	(fwd08)

; checking STY zpiy

; zpiy cannot be forced to @

		.echo **FAIL  STY  zpiy as absolute

		.assume addr:absolute
		sty 	($32),y
		.assume addr:absolute
		sty 	(bak08),y
		.assume addr:absolute
		sty 	(fwd08),y

; zpiy cannot be forced to lzpiy

		.echo **FAIL  STY  zpiy as long

		.assume addr:long
		sty 	($32),y
		.assume addr:long
		sty 	(bak08),y
		.assume addr:long
		sty 	(fwd08),y

; checking STY zpx

; zpx cannot be forced to abx

		.echo **FAIL  STY  zpx as absolute

		.assume addr:absolute
		sty 	$32,x
		.assume addr:absolute
		sty 	bak08,x
		.assume addr:absolute
		sty 	fwd08,x

; zpx cannot be forced to labx

		.echo **FAIL  STY  zpx as long

		.assume addr:long
		sty 	$32,x
		.assume addr:long
		sty 	bak08,x
		.assume addr:long
		sty 	fwd08,x

; checking STY zpxi

; zpxi cannot be forced to abxi

		.echo **FAIL  STY  zpxi as absolute

		.assume addr:absolute
		sty 	($32,x)
		.assume addr:absolute
		sty 	(bak08,x)
		.assume addr:absolute
		sty 	(fwd08,x)

; zpxi cannot be forced to @

		.echo **FAIL  STY  zpxi as long

		.assume addr:long
		sty 	($32,x)
		.assume addr:long
		sty 	(bak08,x)
		.assume addr:long
		sty 	(fwd08,x)

; checking STY zpy

; zpy cannot be forced to aby

		.echo **FAIL  STY  zpy as absolute

		.assume addr:absolute
		sty 	$32,y
		.assume addr:absolute
		sty 	bak08,y
		.assume addr:absolute
		sty 	fwd08,y

; zpy cannot be forced to @

		.echo **FAIL  STY  zpy as long

		.assume addr:long
		sty 	$32,y
		.assume addr:long
		sty 	bak08,y
		.assume addr:long
		sty 	fwd08,y


; -------------------------------


; -------------------------------

		; check STZ
		; 1 mnemonics with modes ['ab', 'abx', 'zp', 'zpx']

; checking STZ ab

; ab cannot be forced to lab

		.echo **FAIL  STZ  ab as long

		.assume addr:long
		stz 	$4365
		.assume addr:long
		stz 	fwd16
		.assume addr:long
		stz 	bak16

; checking STZ abi

; abi cannot be forced to zpi

		.echo **FAIL  STZ  abi as zeropage

		.assume addr:zeropage
		stz 	($4365)
		.assume addr:zeropage
		stz 	(fwd16)
		.assume addr:zeropage
		stz 	(bak16)

; abi cannot be forced to labi

		.echo **FAIL  STZ  abi as long

		.assume addr:long
		stz 	($4365)
		.assume addr:long
		stz 	(fwd16)
		.assume addr:long
		stz 	(bak16)

; checking STZ abx

; abx cannot be forced to labx

		.echo **FAIL  STZ  abx as long

		.assume addr:long
		stz 	$4365,X
		.assume addr:long
		stz 	fwd16,X
		.assume addr:long
		stz 	bak16,X

; checking STZ abxi

; abxi cannot be forced to zpxi

		.echo **FAIL  STZ  abxi as zeropage

		.assume addr:zeropage
		stz 	($4365,X)
		.assume addr:zeropage
		stz 	(fwd16,X)
		.assume addr:zeropage
		stz 	(bak16,X)

; abxi cannot be forced to @

		.echo **FAIL  STZ  abxi as long

		.assume addr:long
		stz 	($4365,X)
		.assume addr:long
		stz 	(fwd16,X)
		.assume addr:long
		stz 	(bak16,X)

; checking STZ aby

; aby cannot be forced to zpy

		.echo **FAIL  STZ  aby as zeropage

		.assume addr:zeropage
		stz 	$4365,Y
		.assume addr:zeropage
		stz 	fwd16,Y
		.assume addr:zeropage
		stz 	bak16,Y

; aby cannot be forced to @

		.echo **FAIL  STZ  aby as long

		.assume addr:long
		stz 	$4365,Y
		.assume addr:long
		stz 	fwd16,Y
		.assume addr:long
		stz 	bak16,Y

; checking STZ acc

; absolute is not forcible

		.echo **FAIL  STZ  acc as absolute

		.assume addr:absolute
		stz 	A
		.assume addr:absolute
		stz 	a

; zeropage is not forcible

		.echo **FAIL  STZ  acc as zeropage

		.assume addr:zeropage
		stz 	A
		.assume addr:zeropage
		stz 	a

; long is not forcible

		.echo **FAIL  STZ  acc as long

		.assume addr:long
		stz 	A
		.assume addr:long
		stz 	a

; checking STZ imm

; absolute is not forcible

		.echo **FAIL  STZ  imm as absolute

		.assume addr:absolute
		stz 	#$32
		.assume addr:absolute
		stz 	#bak08
		.assume addr:absolute
		stz 	#fwd08

; zeropage is not forcible

		.echo **FAIL  STZ  imm as zeropage

		.assume addr:zeropage
		stz 	#$32
		.assume addr:zeropage
		stz 	#bak08
		.assume addr:zeropage
		stz 	#fwd08

; long is not forcible

		.echo **FAIL  STZ  imm as long

		.assume addr:long
		stz 	#$32
		.assume addr:long
		stz 	#bak08
		.assume addr:long
		stz 	#fwd08

; checking STZ imp

; absolute is not forcible

		.echo **FAIL  STZ  imp as absolute

		.assume addr:absolute
		stz 

; zeropage is not forcible

		.echo **FAIL  STZ  imp as zeropage

		.assume addr:zeropage
		stz 

; long is not forcible

		.echo **FAIL  STZ  imp as long

		.assume addr:long
		stz 

; checking STZ pcr

; pcr cannot be forced to @

		.echo **FAIL  STZ  pcr as long

		.assume addr:long
		stz 	:+
		.assume addr:long
		stz 	-
		.assume addr:long
		stz 	+
		.assume addr:long
		stz 	:-

; checking STZ zp

; zp cannot be forced to lab

		.echo **FAIL  STZ  zp as long

		.assume addr:long
		stz 	$32
		.assume addr:long
		stz 	bak08
		.assume addr:long
		stz 	fwd08

; checking STZ zpi

; zpi cannot be forced to abi

		.echo **FAIL  STZ  zpi as absolute

		.assume addr:absolute
		stz 	($32)
		.assume addr:absolute
		stz 	(bak08)
		.assume addr:absolute
		stz 	(fwd08)

; zpi cannot be forced to labi

		.echo **FAIL  STZ  zpi as long

		.assume addr:long
		stz 	($32)
		.assume addr:long
		stz 	(bak08)
		.assume addr:long
		stz 	(fwd08)

; checking STZ zpiy

; zpiy cannot be forced to @

		.echo **FAIL  STZ  zpiy as absolute

		.assume addr:absolute
		stz 	($32),y
		.assume addr:absolute
		stz 	(bak08),y
		.assume addr:absolute
		stz 	(fwd08),y

; zpiy cannot be forced to lzpiy

		.echo **FAIL  STZ  zpiy as long

		.assume addr:long
		stz 	($32),y
		.assume addr:long
		stz 	(bak08),y
		.assume addr:long
		stz 	(fwd08),y

; checking STZ zpx

; zpx cannot be forced to labx

		.echo **FAIL  STZ  zpx as long

		.assume addr:long
		stz 	$32,x
		.assume addr:long
		stz 	bak08,x
		.assume addr:long
		stz 	fwd08,x

; checking STZ zpxi

; zpxi cannot be forced to abxi

		.echo **FAIL  STZ  zpxi as absolute

		.assume addr:absolute
		stz 	($32,x)
		.assume addr:absolute
		stz 	(bak08,x)
		.assume addr:absolute
		stz 	(fwd08,x)

; zpxi cannot be forced to @

		.echo **FAIL  STZ  zpxi as long

		.assume addr:long
		stz 	($32,x)
		.assume addr:long
		stz 	(bak08,x)
		.assume addr:long
		stz 	(fwd08,x)

; checking STZ zpy

; zpy cannot be forced to aby

		.echo **FAIL  STZ  zpy as absolute

		.assume addr:absolute
		stz 	$32,y
		.assume addr:absolute
		stz 	bak08,y
		.assume addr:absolute
		stz 	fwd08,y

; zpy cannot be forced to @

		.echo **FAIL  STZ  zpy as long

		.assume addr:long
		stz 	$32,y
		.assume addr:long
		stz 	bak08,y
		.assume addr:long
		stz 	fwd08,y


; -------------------------------


; -------------------------------

		; check TRB
		; 2 mnemonics with modes ['ab', 'zp']
		; TSB

; checking TRB ab

; ab cannot be forced to lab

		.echo **FAIL  TRB  ab as long

		.assume addr:long
		trb 	$4365
		.assume addr:long
		trb 	fwd16
		.assume addr:long
		trb 	bak16

; checking TRB abi

; abi cannot be forced to zpi

		.echo **FAIL  TRB  abi as zeropage

		.assume addr:zeropage
		trb 	($4365)
		.assume addr:zeropage
		trb 	(fwd16)
		.assume addr:zeropage
		trb 	(bak16)

; abi cannot be forced to labi

		.echo **FAIL  TRB  abi as long

		.assume addr:long
		trb 	($4365)
		.assume addr:long
		trb 	(fwd16)
		.assume addr:long
		trb 	(bak16)

; checking TRB abx

; abx cannot be forced to zpx

		.echo **FAIL  TRB  abx as zeropage

		.assume addr:zeropage
		trb 	$4365,X
		.assume addr:zeropage
		trb 	fwd16,X
		.assume addr:zeropage
		trb 	bak16,X

; abx cannot be forced to labx

		.echo **FAIL  TRB  abx as long

		.assume addr:long
		trb 	$4365,X
		.assume addr:long
		trb 	fwd16,X
		.assume addr:long
		trb 	bak16,X

; checking TRB abxi

; abxi cannot be forced to zpxi

		.echo **FAIL  TRB  abxi as zeropage

		.assume addr:zeropage
		trb 	($4365,X)
		.assume addr:zeropage
		trb 	(fwd16,X)
		.assume addr:zeropage
		trb 	(bak16,X)

; abxi cannot be forced to @

		.echo **FAIL  TRB  abxi as long

		.assume addr:long
		trb 	($4365,X)
		.assume addr:long
		trb 	(fwd16,X)
		.assume addr:long
		trb 	(bak16,X)

; checking TRB aby

; aby cannot be forced to zpy

		.echo **FAIL  TRB  aby as zeropage

		.assume addr:zeropage
		trb 	$4365,Y
		.assume addr:zeropage
		trb 	fwd16,Y
		.assume addr:zeropage
		trb 	bak16,Y

; aby cannot be forced to @

		.echo **FAIL  TRB  aby as long

		.assume addr:long
		trb 	$4365,Y
		.assume addr:long
		trb 	fwd16,Y
		.assume addr:long
		trb 	bak16,Y

; checking TRB acc

; absolute is not forcible

		.echo **FAIL  TRB  acc as absolute

		.assume addr:absolute
		trb 	A
		.assume addr:absolute
		trb 	a

; zeropage is not forcible

		.echo **FAIL  TRB  acc as zeropage

		.assume addr:zeropage
		trb 	A
		.assume addr:zeropage
		trb 	a

; long is not forcible

		.echo **FAIL  TRB  acc as long

		.assume addr:long
		trb 	A
		.assume addr:long
		trb 	a

; checking TRB imm

; absolute is not forcible

		.echo **FAIL  TRB  imm as absolute

		.assume addr:absolute
		trb 	#$32
		.assume addr:absolute
		trb 	#bak08
		.assume addr:absolute
		trb 	#fwd08

; zeropage is not forcible

		.echo **FAIL  TRB  imm as zeropage

		.assume addr:zeropage
		trb 	#$32
		.assume addr:zeropage
		trb 	#bak08
		.assume addr:zeropage
		trb 	#fwd08

; long is not forcible

		.echo **FAIL  TRB  imm as long

		.assume addr:long
		trb 	#$32
		.assume addr:long
		trb 	#bak08
		.assume addr:long
		trb 	#fwd08

; checking TRB imp

; absolute is not forcible

		.echo **FAIL  TRB  imp as absolute

		.assume addr:absolute
		trb 

; zeropage is not forcible

		.echo **FAIL  TRB  imp as zeropage

		.assume addr:zeropage
		trb 

; long is not forcible

		.echo **FAIL  TRB  imp as long

		.assume addr:long
		trb 

; checking TRB pcr

; pcr cannot be forced to @

		.echo **FAIL  TRB  pcr as long

		.assume addr:long
		trb 	:+
		.assume addr:long
		trb 	-
		.assume addr:long
		trb 	+
		.assume addr:long
		trb 	:-

; checking TRB zp

; zp cannot be forced to lab

		.echo **FAIL  TRB  zp as long

		.assume addr:long
		trb 	$32
		.assume addr:long
		trb 	bak08
		.assume addr:long
		trb 	fwd08

; checking TRB zpi

; zpi cannot be forced to abi

		.echo **FAIL  TRB  zpi as absolute

		.assume addr:absolute
		trb 	($32)
		.assume addr:absolute
		trb 	(bak08)
		.assume addr:absolute
		trb 	(fwd08)

; zpi cannot be forced to labi

		.echo **FAIL  TRB  zpi as long

		.assume addr:long
		trb 	($32)
		.assume addr:long
		trb 	(bak08)
		.assume addr:long
		trb 	(fwd08)

; checking TRB zpiy

; zpiy cannot be forced to @

		.echo **FAIL  TRB  zpiy as absolute

		.assume addr:absolute
		trb 	($32),y
		.assume addr:absolute
		trb 	(bak08),y
		.assume addr:absolute
		trb 	(fwd08),y

; zpiy cannot be forced to lzpiy

		.echo **FAIL  TRB  zpiy as long

		.assume addr:long
		trb 	($32),y
		.assume addr:long
		trb 	(bak08),y
		.assume addr:long
		trb 	(fwd08),y

; checking TRB zpx

; zpx cannot be forced to abx

		.echo **FAIL  TRB  zpx as absolute

		.assume addr:absolute
		trb 	$32,x
		.assume addr:absolute
		trb 	bak08,x
		.assume addr:absolute
		trb 	fwd08,x

; zpx cannot be forced to labx

		.echo **FAIL  TRB  zpx as long

		.assume addr:long
		trb 	$32,x
		.assume addr:long
		trb 	bak08,x
		.assume addr:long
		trb 	fwd08,x

; checking TRB zpxi

; zpxi cannot be forced to abxi

		.echo **FAIL  TRB  zpxi as absolute

		.assume addr:absolute
		trb 	($32,x)
		.assume addr:absolute
		trb 	(bak08,x)
		.assume addr:absolute
		trb 	(fwd08,x)

; zpxi cannot be forced to @

		.echo **FAIL  TRB  zpxi as long

		.assume addr:long
		trb 	($32,x)
		.assume addr:long
		trb 	(bak08,x)
		.assume addr:long
		trb 	(fwd08,x)

; checking TRB zpy

; zpy cannot be forced to aby

		.echo **FAIL  TRB  zpy as absolute

		.assume addr:absolute
		trb 	$32,y
		.assume addr:absolute
		trb 	bak08,y
		.assume addr:absolute
		trb 	fwd08,y

; zpy cannot be forced to @

		.echo **FAIL  TRB  zpy as long

		.assume addr:long
		trb 	$32,y
		.assume addr:long
		trb 	bak08,y
		.assume addr:long
		trb 	fwd08,y


; -------------------------------


; -------------------------------

; forward reference

fwd32	.equ	$89ABCDEF
fwd24	.equ	$456789
fwd16	.equ	$1234
fwd08	.equ	$12

; -------------------------------

		.end

; -------------------------------

; 0 pass
; 1213 fail
