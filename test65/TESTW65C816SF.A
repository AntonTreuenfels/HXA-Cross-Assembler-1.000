; Hobby Cross-Assembler HXA65 Error Test W65C816Sf
; W65C816S\Instruction Set
; error: W65C816S Group Rep Instructions, Caught First Pass

; generated by MODE65.PY - Fri Nov 29 11:59:15 2024


; warning(s):

; errors(s):

; fatal:

; -------------------------------

		.listfile
		.errfile

		.maxerr	10000		; increase default count

; -------------------------------

		.cpu	W65C816S
		.org	$1000

; -------------------------------

; backward reference

bak08	.equ	$12
bak16	.equ	$1234
bak24	.equ	$456789
bak32	.equ	$89ABCDEF

; -------------------------------

:	; backward ref for ADC

		; check ADC
		; 7 mnemonics with modes ['ab', 'abx', 'aby', 'imm', 'lab', 'labx', 'lzpi', 'lzpiy', 'sr', 'sriy', 'zp', 'zpi', 'zpiy', 'zpx', 'zpxi']
		; AND
		; CMP
		; EOR
		; LDA
		; ORA
		; SBC

		.echo **PASS  ADC  ab

		ADC 	$1234
		ADC 	bak16
		ADC 	fwd16

		.echo **PASS  ADC  abi  (as zpi)

		Adc 	($1234)
		Adc 	(bak16)
		Adc 	(fwd16)

		.echo **PASS  ADC  abx

		ADC 	$1234,X
		ADC 	bak16,x
		ADC 	fwd16,X

		.echo **PASS  ADC  abxi  (as zpxi)

		Adc 	($1234,X)
		Adc 	(bak16,x)
		Adc 	(fwd16,X)

		.echo **PASS  ADC  aby

		ADC 	$1234,Y
		ADC 	bak16,y
		ADC 	fwd16,Y

		.echo **FAIL  ADC  acc

		adc 	A
		adc 	a

		.echo **FAIL  ADC  bmv

		adc 	#$12, #$34
		adc 	#bak08, #fwd08
		adc 	$123456, $789ABC
		adc 	bak24, fwd24

		.echo **PASS  ADC  imm

		ADC 	#$12
		ADC 	#bak08
		ADC 	#fwd08

		.echo **FAIL  ADC  imp

		adc 

		.echo **PASS  ADC  lab

		ADC 	$123456
		ADC 	bak24
		ADC 	fwd24

		.echo **PASS  ADC  labi  (as lzpi)

		Adc 	[$123456]
		Adc 	[bak24]
		Adc 	[fwd24]

		.echo **PASS  ADC  labx

		ADC 	$123456,X
		ADC 	bak24,x
		ADC 	fwd24,X

		.echo **PASS  ADC  lpcr  (as ab)

		Adc 	:+
		Adc 	-
		Adc 	+
		Adc 	:-

		.echo **PASS  ADC  lzpi

		ADC 	[$12]
		ADC 	[bak08]
		ADC 	[fwd08]

		.echo **PASS  ADC  lzpiy

		ADC 	[$12],Y
		ADC 	[bak08],y
		ADC 	[fwd08],Y

		.echo **PASS  ADC  pcr  (as ab)

		Adc 	:+
		Adc 	-
		Adc 	+
		Adc 	:-

		.echo **PASS  ADC  sr

		ADC 	$12,S
		ADC 	bak08,s
		ADC 	fwd08,S

		.echo **PASS  ADC  sriy

		ADC 	($12,s),Y
		ADC 	(bak08,S),y
		ADC 	(fwd08,s),Y

		.echo **PASS  ADC  zp

		ADC 	$12
		ADC 	bak08
		Adc 	fwd08   	; (absolute)

		.echo **PASS  ADC  zpi

		ADC 	($12)
		ADC 	(bak08)
		ADC 	(fwd08)

		.echo **PASS  ADC  zpiy

		ADC 	($12),Y
		ADC 	(bak08),y
		ADC 	(fwd08),Y

		.echo **PASS  ADC  zpx

		ADC 	$12,X
		ADC 	bak08,x
		Adc 	fwd08,X 	; (absolute)

		.echo **PASS  ADC  zpxi

		ADC 	($12,X)
		ADC 	(bak08,x)
		ADC 	(fwd08,X)

		.echo **PASS  ADC  zpy  (as aby)

		Adc 	$12,Y
		Adc 	bak08,y
		Adc 	fwd08,Y


:	; forward ref for ADC

; -------------------------------

:	; backward ref for ASL

		; check ASL
		; 6 mnemonics with modes ['ab', 'abx', 'acc', 'imp', 'zp', 'zpx']
		; DEC
		; INC
		; LSR
		; ROL
		; ROR

		.echo **PASS  ASL  ab

		ASL 	$1234
		ASL 	bak16
		ASL 	fwd16

		.echo **FAIL  ASL  abi

		asl 	($1234)
		asl 	(bak16)
		asl 	(fwd16)

		.echo **PASS  ASL  abx

		ASL 	$1234,X
		ASL 	bak16,x
		ASL 	fwd16,X

		.echo **FAIL  ASL  abxi

		asl 	($1234,X)
		asl 	(bak16,x)
		asl 	(fwd16,X)

		.echo **FAIL  ASL  aby

		asl 	$1234,Y
		asl 	bak16,y
		asl 	fwd16,Y

		.echo **PASS  ASL  acc

		ASL 	A
		ASL 	a

		.echo **FAIL  ASL  bmv

		asl 	#$12, #$34
		asl 	#bak08, #fwd08
		asl 	$123456, $789ABC
		asl 	bak24, fwd24

		.echo **FAIL  ASL  imm

		asl 	#$12
		asl 	#bak08
		asl 	#fwd08

		.echo **PASS  ASL  imp

		ASL 

		.echo **PASS  ASL  lab  (as ab)

		Asl 	$123456
		Asl 	bak24
		Asl 	fwd24

		.echo **FAIL  ASL  labi

		asl 	[$123456]
		asl 	[bak24]
		asl 	[fwd24]

		.echo **PASS  ASL  labx  (as abx)

		Asl 	$123456,X
		Asl 	bak24,x
		Asl 	fwd24,X

		.echo **PASS  ASL  lpcr  (as ab)

		Asl 	:+
		Asl 	-
		Asl 	+
		Asl 	:-

		.echo **FAIL  ASL  lzpi

		asl 	[$12]
		asl 	[bak08]
		asl 	[fwd08]

		.echo **FAIL  ASL  lzpiy

		asl 	[$12],Y
		asl 	[bak08],y
		asl 	[fwd08],Y

		.echo **PASS  ASL  pcr  (as ab)

		Asl 	:+
		Asl 	-
		Asl 	+
		Asl 	:-

		.echo **FAIL  ASL  sr

		asl 	$12,S
		asl 	bak08,s
		asl 	fwd08,S

		.echo **FAIL  ASL  sriy

		asl 	($12,s),Y
		asl 	(bak08,S),y
		asl 	(fwd08,s),Y

		.echo **PASS  ASL  zp

		ASL 	$12
		ASL 	bak08
		Asl 	fwd08   	; (absolute)

		.echo **FAIL  ASL  zpi

		asl 	($12)
		asl 	(bak08)
		asl 	(fwd08)

		.echo **FAIL  ASL  zpiy

		asl 	($12),Y
		asl 	(bak08),y
		asl 	(fwd08),Y

		.echo **PASS  ASL  zpx

		ASL 	$12,X
		ASL 	bak08,x
		Asl 	fwd08,X 	; (absolute)

		.echo **FAIL  ASL  zpxi

		asl 	($12,X)
		asl 	(bak08,x)
		asl 	(fwd08,X)

		.echo **FAIL  ASL  zpy

		asl 	$12,Y
		asl 	bak08,y
		asl 	fwd08,Y


:	; forward ref for ASL

; -------------------------------

:	; backward ref for BCC

		; check BCC
		; 11 mnemonics with modes ['pcr']
		; BCS
		; BEQ
		; BGE
		; BLT
		; BMI
		; BNE
		; BPL
		; BRA
		; BVC
		; BVS

		.echo **PASS  BCC  ab  (as pcr)

		Bcc 	$1234
		Bcc 	bak16
		Bcc 	fwd16

		.echo **FAIL  BCC  abi

		bcc 	($1234)
		bcc 	(bak16)
		bcc 	(fwd16)

		.echo **FAIL  BCC  abx

		bcc 	$1234,X
		bcc 	bak16,x
		bcc 	fwd16,X

		.echo **FAIL  BCC  abxi

		bcc 	($1234,X)
		bcc 	(bak16,x)
		bcc 	(fwd16,X)

		.echo **FAIL  BCC  aby

		bcc 	$1234,Y
		bcc 	bak16,y
		bcc 	fwd16,Y

		.echo **FAIL  BCC  acc

		bcc 	A
		bcc 	a

		.echo **FAIL  BCC  bmv

		bcc 	#$12, #$34
		bcc 	#bak08, #fwd08
		bcc 	$123456, $789ABC
		bcc 	bak24, fwd24

		.echo **FAIL  BCC  imm

		bcc 	#$12
		bcc 	#bak08
		bcc 	#fwd08

		.echo **FAIL  BCC  imp

		bcc 

		.echo **PASS  BCC  lab  (as pcr)

		Bcc 	$123456
		Bcc 	bak24
		Bcc 	fwd24

		.echo **FAIL  BCC  labi

		bcc 	[$123456]
		bcc 	[bak24]
		bcc 	[fwd24]

		.echo **FAIL  BCC  labx

		bcc 	$123456,X
		bcc 	bak24,x
		bcc 	fwd24,X

		.echo **PASS  BCC  lpcr  (as pcr)

		Bcc 	:+
		Bcc 	-
		Bcc 	+
		Bcc 	:-

		.echo **FAIL  BCC  lzpi

		bcc 	[$12]
		bcc 	[bak08]
		bcc 	[fwd08]

		.echo **FAIL  BCC  lzpiy

		bcc 	[$12],Y
		bcc 	[bak08],y
		bcc 	[fwd08],Y

		.echo **PASS  BCC  pcr

		BCC 	:+
		BCC 	-
		BCC 	+
		BCC 	:-

		.echo **FAIL  BCC  sr

		bcc 	$12,S
		bcc 	bak08,s
		bcc 	fwd08,S

		.echo **FAIL  BCC  sriy

		bcc 	($12,s),Y
		bcc 	(bak08,S),y
		bcc 	(fwd08,s),Y

		.echo **PASS  BCC  zp  (as pcr)

		Bcc 	$12
		Bcc 	bak08
		Bcc 	fwd08

		.echo **FAIL  BCC  zpi

		bcc 	($12)
		bcc 	(bak08)
		bcc 	(fwd08)

		.echo **FAIL  BCC  zpiy

		bcc 	($12),Y
		bcc 	(bak08),y
		bcc 	(fwd08),Y

		.echo **FAIL  BCC  zpx

		bcc 	$12,X
		bcc 	bak08,x
		bcc 	fwd08,X

		.echo **FAIL  BCC  zpxi

		bcc 	($12,X)
		bcc 	(bak08,x)
		bcc 	(fwd08,X)

		.echo **FAIL  BCC  zpy

		bcc 	$12,Y
		bcc 	bak08,y
		bcc 	fwd08,Y


:	; forward ref for BCC

; -------------------------------

:	; backward ref for BIT

		; check BIT
		; 2 mnemonics with modes ['ab', 'abx', 'imm', 'zp', 'zpx']
		; LDY

		.echo **PASS  BIT  ab

		BIT 	$1234
		BIT 	bak16
		BIT 	fwd16

		.echo **FAIL  BIT  abi

		bit 	($1234)
		bit 	(bak16)
		bit 	(fwd16)

		.echo **PASS  BIT  abx

		BIT 	$1234,X
		BIT 	bak16,x
		BIT 	fwd16,X

		.echo **FAIL  BIT  abxi

		bit 	($1234,X)
		bit 	(bak16,x)
		bit 	(fwd16,X)

		.echo **FAIL  BIT  aby

		bit 	$1234,Y
		bit 	bak16,y
		bit 	fwd16,Y

		.echo **FAIL  BIT  acc

		bit 	A
		bit 	a

		.echo **FAIL  BIT  bmv

		bit 	#$12, #$34
		bit 	#bak08, #fwd08
		bit 	$123456, $789ABC
		bit 	bak24, fwd24

		.echo **PASS  BIT  imm

		BIT 	#$12
		BIT 	#bak08
		BIT 	#fwd08

		.echo **FAIL  BIT  imp

		bit 

		.echo **PASS  BIT  lab  (as ab)

		Bit 	$123456
		Bit 	bak24
		Bit 	fwd24

		.echo **FAIL  BIT  labi

		bit 	[$123456]
		bit 	[bak24]
		bit 	[fwd24]

		.echo **PASS  BIT  labx  (as abx)

		Bit 	$123456,X
		Bit 	bak24,x
		Bit 	fwd24,X

		.echo **PASS  BIT  lpcr  (as ab)

		Bit 	:+
		Bit 	-
		Bit 	+
		Bit 	:-

		.echo **FAIL  BIT  lzpi

		bit 	[$12]
		bit 	[bak08]
		bit 	[fwd08]

		.echo **FAIL  BIT  lzpiy

		bit 	[$12],Y
		bit 	[bak08],y
		bit 	[fwd08],Y

		.echo **PASS  BIT  pcr  (as ab)

		Bit 	:+
		Bit 	-
		Bit 	+
		Bit 	:-

		.echo **FAIL  BIT  sr

		bit 	$12,S
		bit 	bak08,s
		bit 	fwd08,S

		.echo **FAIL  BIT  sriy

		bit 	($12,s),Y
		bit 	(bak08,S),y
		bit 	(fwd08,s),Y

		.echo **PASS  BIT  zp

		BIT 	$12
		BIT 	bak08
		Bit 	fwd08   	; (absolute)

		.echo **FAIL  BIT  zpi

		bit 	($12)
		bit 	(bak08)
		bit 	(fwd08)

		.echo **FAIL  BIT  zpiy

		bit 	($12),Y
		bit 	(bak08),y
		bit 	(fwd08),Y

		.echo **PASS  BIT  zpx

		BIT 	$12,X
		BIT 	bak08,x
		Bit 	fwd08,X 	; (absolute)

		.echo **FAIL  BIT  zpxi

		bit 	($12,X)
		bit 	(bak08,x)
		bit 	(fwd08,X)

		.echo **FAIL  BIT  zpy

		bit 	$12,Y
		bit 	bak08,y
		bit 	fwd08,Y


:	; forward ref for BIT

; -------------------------------

:	; backward ref for BRK

		; check BRK
		; 3 mnemonics with modes ['imm', 'imp', 'zp']
		; COP
		; WDM

		.echo **PASS  BRK  ab  (as zp)

		Brk 	$1234
		Brk 	bak16
		Brk 	fwd16

		.echo **FAIL  BRK  abi

		brk 	($1234)
		brk 	(bak16)
		brk 	(fwd16)

		.echo **FAIL  BRK  abx

		brk 	$1234,X
		brk 	bak16,x
		brk 	fwd16,X

		.echo **FAIL  BRK  abxi

		brk 	($1234,X)
		brk 	(bak16,x)
		brk 	(fwd16,X)

		.echo **FAIL  BRK  aby

		brk 	$1234,Y
		brk 	bak16,y
		brk 	fwd16,Y

		.echo **FAIL  BRK  acc

		brk 	A
		brk 	a

		.echo **FAIL  BRK  bmv

		brk 	#$12, #$34
		brk 	#bak08, #fwd08
		brk 	$123456, $789ABC
		brk 	bak24, fwd24

		.echo **PASS  BRK  imm

		BRK 	#$12
		BRK 	#bak08
		BRK 	#fwd08

		.echo **PASS  BRK  imp

		BRK 

		.echo **PASS  BRK  lab  (as zp)

		Brk 	$123456
		Brk 	bak24
		Brk 	fwd24

		.echo **FAIL  BRK  labi

		brk 	[$123456]
		brk 	[bak24]
		brk 	[fwd24]

		.echo **FAIL  BRK  labx

		brk 	$123456,X
		brk 	bak24,x
		brk 	fwd24,X

		.echo **PASS  BRK  lpcr  (as zp)

		Brk 	:+
		Brk 	-
		Brk 	+
		Brk 	:-

		.echo **FAIL  BRK  lzpi

		brk 	[$12]
		brk 	[bak08]
		brk 	[fwd08]

		.echo **FAIL  BRK  lzpiy

		brk 	[$12],Y
		brk 	[bak08],y
		brk 	[fwd08],Y

		.echo **PASS  BRK  pcr  (as zp)

		Brk 	:+
		Brk 	-
		Brk 	+
		Brk 	:-

		.echo **FAIL  BRK  sr

		brk 	$12,S
		brk 	bak08,s
		brk 	fwd08,S

		.echo **FAIL  BRK  sriy

		brk 	($12,s),Y
		brk 	(bak08,S),y
		brk 	(fwd08,s),Y

		.echo **PASS  BRK  zp

		BRK 	$12
		BRK 	bak08
		BRK 	fwd08

		.echo **FAIL  BRK  zpi

		brk 	($12)
		brk 	(bak08)
		brk 	(fwd08)

		.echo **FAIL  BRK  zpiy

		brk 	($12),Y
		brk 	(bak08),y
		brk 	(fwd08),Y

		.echo **FAIL  BRK  zpx

		brk 	$12,X
		brk 	bak08,x
		brk 	fwd08,X

		.echo **FAIL  BRK  zpxi

		brk 	($12,X)
		brk 	(bak08,x)
		brk 	(fwd08,X)

		.echo **FAIL  BRK  zpy

		brk 	$12,Y
		brk 	bak08,y
		brk 	fwd08,Y


:	; forward ref for BRK

; -------------------------------

:	; backward ref for BRL

		; check BRL
		; 2 mnemonics with modes ['lpcr']
		; PER

		.echo **PASS  BRL  ab  (as lpcr)

		Brl 	$1234
		Brl 	bak16
		Brl 	fwd16

		.echo **FAIL  BRL  abi

		brl 	($1234)
		brl 	(bak16)
		brl 	(fwd16)

		.echo **FAIL  BRL  abx

		brl 	$1234,X
		brl 	bak16,x
		brl 	fwd16,X

		.echo **FAIL  BRL  abxi

		brl 	($1234,X)
		brl 	(bak16,x)
		brl 	(fwd16,X)

		.echo **FAIL  BRL  aby

		brl 	$1234,Y
		brl 	bak16,y
		brl 	fwd16,Y

		.echo **FAIL  BRL  acc

		brl 	A
		brl 	a

		.echo **FAIL  BRL  bmv

		brl 	#$12, #$34
		brl 	#bak08, #fwd08
		brl 	$123456, $789ABC
		brl 	bak24, fwd24

		.echo **FAIL  BRL  imm

		brl 	#$12
		brl 	#bak08
		brl 	#fwd08

		.echo **FAIL  BRL  imp

		brl 

		.echo **PASS  BRL  lab  (as lpcr)

		Brl 	$123456
		Brl 	bak24
		Brl 	fwd24

		.echo **FAIL  BRL  labi

		brl 	[$123456]
		brl 	[bak24]
		brl 	[fwd24]

		.echo **FAIL  BRL  labx

		brl 	$123456,X
		brl 	bak24,x
		brl 	fwd24,X

		.echo **PASS  BRL  lpcr

		BRL 	:+
		BRL 	-
		BRL 	+
		BRL 	:-

		.echo **FAIL  BRL  lzpi

		brl 	[$12]
		brl 	[bak08]
		brl 	[fwd08]

		.echo **FAIL  BRL  lzpiy

		brl 	[$12],Y
		brl 	[bak08],y
		brl 	[fwd08],Y

		.echo **PASS  BRL  pcr  (as lpcr)

		Brl 	:+
		Brl 	-
		Brl 	+
		Brl 	:-

		.echo **FAIL  BRL  sr

		brl 	$12,S
		brl 	bak08,s
		brl 	fwd08,S

		.echo **FAIL  BRL  sriy

		brl 	($12,s),Y
		brl 	(bak08,S),y
		brl 	(fwd08,s),Y

		.echo **PASS  BRL  zp  (as lpcr)

		Brl 	$12
		Brl 	bak08
		Brl 	fwd08

		.echo **FAIL  BRL  zpi

		brl 	($12)
		brl 	(bak08)
		brl 	(fwd08)

		.echo **FAIL  BRL  zpiy

		brl 	($12),Y
		brl 	(bak08),y
		brl 	(fwd08),Y

		.echo **FAIL  BRL  zpx

		brl 	$12,X
		brl 	bak08,x
		brl 	fwd08,X

		.echo **FAIL  BRL  zpxi

		brl 	($12,X)
		brl 	(bak08,x)
		brl 	(fwd08,X)

		.echo **FAIL  BRL  zpy

		brl 	$12,Y
		brl 	bak08,y
		brl 	fwd08,Y


:	; forward ref for BRL

; -------------------------------

:	; backward ref for CLC

		; check CLC
		; 51 mnemonics with modes ['imp']
		; CLD
		; CLI
		; CLV
		; DEA
		; DEX
		; DEY
		; INA
		; INX
		; INY
		; NOP
		; PHA
		; PHB
		; PHD
		; PHK
		; PHP
		; PHX
		; PHY
		; PLA
		; PLB
		; PLD
		; PLP
		; PLX
		; PLY
		; RTI
		; RTL
		; RTS
		; SEC
		; SED
		; SEI
		; STP
		; SWP
		; TAD
		; TAS
		; TAX
		; TAY
		; TCD
		; TCS
		; TDA
		; TDC
		; TSA
		; TSC
		; TSX
		; TXA
		; TXS
		; TXY
		; TYA
		; TYX
		; WAI
		; XBA
		; XCE

		.echo **FAIL  CLC  ab

		clc 	$1234
		clc 	bak16
		clc 	fwd16

		.echo **FAIL  CLC  abi

		clc 	($1234)
		clc 	(bak16)
		clc 	(fwd16)

		.echo **FAIL  CLC  abx

		clc 	$1234,X
		clc 	bak16,x
		clc 	fwd16,X

		.echo **FAIL  CLC  abxi

		clc 	($1234,X)
		clc 	(bak16,x)
		clc 	(fwd16,X)

		.echo **FAIL  CLC  aby

		clc 	$1234,Y
		clc 	bak16,y
		clc 	fwd16,Y

		.echo **FAIL  CLC  acc

		clc 	A
		clc 	a

		.echo **FAIL  CLC  bmv

		clc 	#$12, #$34
		clc 	#bak08, #fwd08
		clc 	$123456, $789ABC
		clc 	bak24, fwd24

		.echo **FAIL  CLC  imm

		clc 	#$12
		clc 	#bak08
		clc 	#fwd08

		.echo **PASS  CLC  imp

		CLC 

		.echo **FAIL  CLC  lab

		clc 	$123456
		clc 	bak24
		clc 	fwd24

		.echo **FAIL  CLC  labi

		clc 	[$123456]
		clc 	[bak24]
		clc 	[fwd24]

		.echo **FAIL  CLC  labx

		clc 	$123456,X
		clc 	bak24,x
		clc 	fwd24,X

		.echo **FAIL  CLC  lpcr

		clc 	:+
		clc 	-
		clc 	+
		clc 	:-

		.echo **FAIL  CLC  lzpi

		clc 	[$12]
		clc 	[bak08]
		clc 	[fwd08]

		.echo **FAIL  CLC  lzpiy

		clc 	[$12],Y
		clc 	[bak08],y
		clc 	[fwd08],Y

		.echo **FAIL  CLC  pcr

		clc 	:+
		clc 	-
		clc 	+
		clc 	:-

		.echo **FAIL  CLC  sr

		clc 	$12,S
		clc 	bak08,s
		clc 	fwd08,S

		.echo **FAIL  CLC  sriy

		clc 	($12,s),Y
		clc 	(bak08,S),y
		clc 	(fwd08,s),Y

		.echo **FAIL  CLC  zp

		clc 	$12
		clc 	bak08
		clc 	fwd08

		.echo **FAIL  CLC  zpi

		clc 	($12)
		clc 	(bak08)
		clc 	(fwd08)

		.echo **FAIL  CLC  zpiy

		clc 	($12),Y
		clc 	(bak08),y
		clc 	(fwd08),Y

		.echo **FAIL  CLC  zpx

		clc 	$12,X
		clc 	bak08,x
		clc 	fwd08,X

		.echo **FAIL  CLC  zpxi

		clc 	($12,X)
		clc 	(bak08,x)
		clc 	(fwd08,X)

		.echo **FAIL  CLC  zpy

		clc 	$12,Y
		clc 	bak08,y
		clc 	fwd08,Y


:	; forward ref for CLC

; -------------------------------

:	; backward ref for CPX

		; check CPX
		; 2 mnemonics with modes ['ab', 'imm', 'zp']
		; CPY

		.echo **PASS  CPX  ab

		CPX 	$1234
		CPX 	bak16
		CPX 	fwd16

		.echo **FAIL  CPX  abi

		cpx 	($1234)
		cpx 	(bak16)
		cpx 	(fwd16)

		.echo **FAIL  CPX  abx

		cpx 	$1234,X
		cpx 	bak16,x
		cpx 	fwd16,X

		.echo **FAIL  CPX  abxi

		cpx 	($1234,X)
		cpx 	(bak16,x)
		cpx 	(fwd16,X)

		.echo **FAIL  CPX  aby

		cpx 	$1234,Y
		cpx 	bak16,y
		cpx 	fwd16,Y

		.echo **FAIL  CPX  acc

		cpx 	A
		cpx 	a

		.echo **FAIL  CPX  bmv

		cpx 	#$12, #$34
		cpx 	#bak08, #fwd08
		cpx 	$123456, $789ABC
		cpx 	bak24, fwd24

		.echo **PASS  CPX  imm

		CPX 	#$12
		CPX 	#bak08
		CPX 	#fwd08

		.echo **FAIL  CPX  imp

		cpx 

		.echo **PASS  CPX  lab  (as ab)

		Cpx 	$123456
		Cpx 	bak24
		Cpx 	fwd24

		.echo **FAIL  CPX  labi

		cpx 	[$123456]
		cpx 	[bak24]
		cpx 	[fwd24]

		.echo **FAIL  CPX  labx

		cpx 	$123456,X
		cpx 	bak24,x
		cpx 	fwd24,X

		.echo **PASS  CPX  lpcr  (as ab)

		Cpx 	:+
		Cpx 	-
		Cpx 	+
		Cpx 	:-

		.echo **FAIL  CPX  lzpi

		cpx 	[$12]
		cpx 	[bak08]
		cpx 	[fwd08]

		.echo **FAIL  CPX  lzpiy

		cpx 	[$12],Y
		cpx 	[bak08],y
		cpx 	[fwd08],Y

		.echo **PASS  CPX  pcr  (as ab)

		Cpx 	:+
		Cpx 	-
		Cpx 	+
		Cpx 	:-

		.echo **FAIL  CPX  sr

		cpx 	$12,S
		cpx 	bak08,s
		cpx 	fwd08,S

		.echo **FAIL  CPX  sriy

		cpx 	($12,s),Y
		cpx 	(bak08,S),y
		cpx 	(fwd08,s),Y

		.echo **PASS  CPX  zp

		CPX 	$12
		CPX 	bak08
		Cpx 	fwd08   	; (absolute)

		.echo **FAIL  CPX  zpi

		cpx 	($12)
		cpx 	(bak08)
		cpx 	(fwd08)

		.echo **FAIL  CPX  zpiy

		cpx 	($12),Y
		cpx 	(bak08),y
		cpx 	(fwd08),Y

		.echo **FAIL  CPX  zpx

		cpx 	$12,X
		cpx 	bak08,x
		cpx 	fwd08,X

		.echo **FAIL  CPX  zpxi

		cpx 	($12,X)
		cpx 	(bak08,x)
		cpx 	(fwd08,X)

		.echo **FAIL  CPX  zpy

		cpx 	$12,Y
		cpx 	bak08,y
		cpx 	fwd08,Y


:	; forward ref for CPX

; -------------------------------

:	; backward ref for JML

		; check JML
		; 1 mnemonics with modes ['abi', 'lab', 'labi']

		.echo **PASS  JML  ab  (as lab)

		Jml 	$1234
		Jml 	bak16
		Jml 	fwd16

		.echo **PASS  JML  abi

		JML 	($1234)
		JML 	(bak16)
		JML 	(fwd16)

		.echo **FAIL  JML  abx

		jml 	$1234,X
		jml 	bak16,x
		jml 	fwd16,X

		.echo **FAIL  JML  abxi

		jml 	($1234,X)
		jml 	(bak16,x)
		jml 	(fwd16,X)

		.echo **FAIL  JML  aby

		jml 	$1234,Y
		jml 	bak16,y
		jml 	fwd16,Y

		.echo **FAIL  JML  acc

		jml 	A
		jml 	a

		.echo **FAIL  JML  bmv

		jml 	#$12, #$34
		jml 	#bak08, #fwd08
		jml 	$123456, $789ABC
		jml 	bak24, fwd24

		.echo **FAIL  JML  imm

		jml 	#$12
		jml 	#bak08
		jml 	#fwd08

		.echo **FAIL  JML  imp

		jml 

		.echo **PASS  JML  lab

		JML 	$123456
		JML 	bak24
		JML 	fwd24

		.echo **PASS  JML  labi

		JML 	[$123456]
		JML 	[bak24]
		JML 	[fwd24]

		.echo **FAIL  JML  labx

		jml 	$123456,X
		jml 	bak24,x
		jml 	fwd24,X

		.echo **PASS  JML  lpcr  (as lab)

		Jml 	:+
		Jml 	-
		Jml 	+
		Jml 	:-

		.echo **PASS  JML  lzpi  (as labi)

		Jml 	[$12]
		Jml 	[bak08]
		Jml 	[fwd08]

		.echo **FAIL  JML  lzpiy

		jml 	[$12],Y
		jml 	[bak08],y
		jml 	[fwd08],Y

		.echo **PASS  JML  pcr  (as lab)

		Jml 	:+
		Jml 	-
		Jml 	+
		Jml 	:-

		.echo **FAIL  JML  sr

		jml 	$12,S
		jml 	bak08,s
		jml 	fwd08,S

		.echo **FAIL  JML  sriy

		jml 	($12,s),Y
		jml 	(bak08,S),y
		jml 	(fwd08,s),Y

		.echo **PASS  JML  zp  (as lab)

		Jml 	$12
		Jml 	bak08
		Jml 	fwd08

		.echo **PASS  JML  zpi  (as abi)

		Jml 	($12)
		Jml 	(bak08)
		Jml 	(fwd08)

		.echo **FAIL  JML  zpiy

		jml 	($12),Y
		jml 	(bak08),y
		jml 	(fwd08),Y

		.echo **FAIL  JML  zpx

		jml 	$12,X
		jml 	bak08,x
		jml 	fwd08,X

		.echo **FAIL  JML  zpxi

		jml 	($12,X)
		jml 	(bak08,x)
		jml 	(fwd08,X)

		.echo **FAIL  JML  zpy

		jml 	$12,Y
		jml 	bak08,y
		jml 	fwd08,Y


:	; forward ref for JML

; -------------------------------

:	; backward ref for JMP

		; check JMP
		; 1 mnemonics with modes ['ab', 'abi', 'abxi', 'labi']

		.echo **PASS  JMP  ab

		JMP 	$1234
		JMP 	bak16
		JMP 	fwd16

		.echo **PASS  JMP  abi

		JMP 	($1234)
		JMP 	(bak16)
		JMP 	(fwd16)

		.echo **FAIL  JMP  abx

		jmp 	$1234,X
		jmp 	bak16,x
		jmp 	fwd16,X

		.echo **PASS  JMP  abxi

		JMP 	($1234,X)
		JMP 	(bak16,x)
		JMP 	(fwd16,X)

		.echo **FAIL  JMP  aby

		jmp 	$1234,Y
		jmp 	bak16,y
		jmp 	fwd16,Y

		.echo **FAIL  JMP  acc

		jmp 	A
		jmp 	a

		.echo **FAIL  JMP  bmv

		jmp 	#$12, #$34
		jmp 	#bak08, #fwd08
		jmp 	$123456, $789ABC
		jmp 	bak24, fwd24

		.echo **FAIL  JMP  imm

		jmp 	#$12
		jmp 	#bak08
		jmp 	#fwd08

		.echo **FAIL  JMP  imp

		jmp 

		.echo **PASS  JMP  lab  (as ab)

		Jmp 	$123456
		Jmp 	bak24
		Jmp 	fwd24

		.echo **PASS  JMP  labi

		JMP 	[$123456]
		JMP 	[bak24]
		JMP 	[fwd24]

		.echo **FAIL  JMP  labx

		jmp 	$123456,X
		jmp 	bak24,x
		jmp 	fwd24,X

		.echo **PASS  JMP  lpcr  (as ab)

		Jmp 	:+
		Jmp 	-
		Jmp 	+
		Jmp 	:-

		.echo **PASS  JMP  lzpi  (as labi)

		Jmp 	[$12]
		Jmp 	[bak08]
		Jmp 	[fwd08]

		.echo **FAIL  JMP  lzpiy

		jmp 	[$12],Y
		jmp 	[bak08],y
		jmp 	[fwd08],Y

		.echo **PASS  JMP  pcr  (as ab)

		Jmp 	:+
		Jmp 	-
		Jmp 	+
		Jmp 	:-

		.echo **FAIL  JMP  sr

		jmp 	$12,S
		jmp 	bak08,s
		jmp 	fwd08,S

		.echo **FAIL  JMP  sriy

		jmp 	($12,s),Y
		jmp 	(bak08,S),y
		jmp 	(fwd08,s),Y

		.echo **PASS  JMP  zp  (as ab)

		Jmp 	$12
		Jmp 	bak08
		Jmp 	fwd08

		.echo **PASS  JMP  zpi  (as abi)

		Jmp 	($12)
		Jmp 	(bak08)
		Jmp 	(fwd08)

		.echo **FAIL  JMP  zpiy

		jmp 	($12),Y
		jmp 	(bak08),y
		jmp 	(fwd08),Y

		.echo **FAIL  JMP  zpx

		jmp 	$12,X
		jmp 	bak08,x
		jmp 	fwd08,X

		.echo **PASS  JMP  zpxi  (as abxi)

		Jmp 	($12,X)
		Jmp 	(bak08,x)
		Jmp 	(fwd08,X)

		.echo **FAIL  JMP  zpy

		jmp 	$12,Y
		jmp 	bak08,y
		jmp 	fwd08,Y


:	; forward ref for JMP

; -------------------------------

:	; backward ref for JSL

		; check JSL
		; 1 mnemonics with modes ['lab']

		.echo **PASS  JSL  ab  (as lab)

		Jsl 	$1234
		Jsl 	bak16
		Jsl 	fwd16

		.echo **FAIL  JSL  abi

		jsl 	($1234)
		jsl 	(bak16)
		jsl 	(fwd16)

		.echo **FAIL  JSL  abx

		jsl 	$1234,X
		jsl 	bak16,x
		jsl 	fwd16,X

		.echo **FAIL  JSL  abxi

		jsl 	($1234,X)
		jsl 	(bak16,x)
		jsl 	(fwd16,X)

		.echo **FAIL  JSL  aby

		jsl 	$1234,Y
		jsl 	bak16,y
		jsl 	fwd16,Y

		.echo **FAIL  JSL  acc

		jsl 	A
		jsl 	a

		.echo **FAIL  JSL  bmv

		jsl 	#$12, #$34
		jsl 	#bak08, #fwd08
		jsl 	$123456, $789ABC
		jsl 	bak24, fwd24

		.echo **FAIL  JSL  imm

		jsl 	#$12
		jsl 	#bak08
		jsl 	#fwd08

		.echo **FAIL  JSL  imp

		jsl 

		.echo **PASS  JSL  lab

		JSL 	$123456
		JSL 	bak24
		JSL 	fwd24

		.echo **FAIL  JSL  labi

		jsl 	[$123456]
		jsl 	[bak24]
		jsl 	[fwd24]

		.echo **FAIL  JSL  labx

		jsl 	$123456,X
		jsl 	bak24,x
		jsl 	fwd24,X

		.echo **PASS  JSL  lpcr  (as lab)

		Jsl 	:+
		Jsl 	-
		Jsl 	+
		Jsl 	:-

		.echo **FAIL  JSL  lzpi

		jsl 	[$12]
		jsl 	[bak08]
		jsl 	[fwd08]

		.echo **FAIL  JSL  lzpiy

		jsl 	[$12],Y
		jsl 	[bak08],y
		jsl 	[fwd08],Y

		.echo **PASS  JSL  pcr  (as lab)

		Jsl 	:+
		Jsl 	-
		Jsl 	+
		Jsl 	:-

		.echo **FAIL  JSL  sr

		jsl 	$12,S
		jsl 	bak08,s
		jsl 	fwd08,S

		.echo **FAIL  JSL  sriy

		jsl 	($12,s),Y
		jsl 	(bak08,S),y
		jsl 	(fwd08,s),Y

		.echo **PASS  JSL  zp  (as lab)

		Jsl 	$12
		Jsl 	bak08
		Jsl 	fwd08

		.echo **FAIL  JSL  zpi

		jsl 	($12)
		jsl 	(bak08)
		jsl 	(fwd08)

		.echo **FAIL  JSL  zpiy

		jsl 	($12),Y
		jsl 	(bak08),y
		jsl 	(fwd08),Y

		.echo **FAIL  JSL  zpx

		jsl 	$12,X
		jsl 	bak08,x
		jsl 	fwd08,X

		.echo **FAIL  JSL  zpxi

		jsl 	($12,X)
		jsl 	(bak08,x)
		jsl 	(fwd08,X)

		.echo **FAIL  JSL  zpy

		jsl 	$12,Y
		jsl 	bak08,y
		jsl 	fwd08,Y


:	; forward ref for JSL

; -------------------------------

:	; backward ref for JSR

		; check JSR
		; 1 mnemonics with modes ['ab', 'abxi']

		.echo **PASS  JSR  ab

		JSR 	$1234
		JSR 	bak16
		JSR 	fwd16

		.echo **FAIL  JSR  abi

		jsr 	($1234)
		jsr 	(bak16)
		jsr 	(fwd16)

		.echo **FAIL  JSR  abx

		jsr 	$1234,X
		jsr 	bak16,x
		jsr 	fwd16,X

		.echo **PASS  JSR  abxi

		JSR 	($1234,X)
		JSR 	(bak16,x)
		JSR 	(fwd16,X)

		.echo **FAIL  JSR  aby

		jsr 	$1234,Y
		jsr 	bak16,y
		jsr 	fwd16,Y

		.echo **FAIL  JSR  acc

		jsr 	A
		jsr 	a

		.echo **FAIL  JSR  bmv

		jsr 	#$12, #$34
		jsr 	#bak08, #fwd08
		jsr 	$123456, $789ABC
		jsr 	bak24, fwd24

		.echo **FAIL  JSR  imm

		jsr 	#$12
		jsr 	#bak08
		jsr 	#fwd08

		.echo **FAIL  JSR  imp

		jsr 

		.echo **PASS  JSR  lab  (as ab)

		Jsr 	$123456
		Jsr 	bak24
		Jsr 	fwd24

		.echo **FAIL  JSR  labi

		jsr 	[$123456]
		jsr 	[bak24]
		jsr 	[fwd24]

		.echo **FAIL  JSR  labx

		jsr 	$123456,X
		jsr 	bak24,x
		jsr 	fwd24,X

		.echo **PASS  JSR  lpcr  (as ab)

		Jsr 	:+
		Jsr 	-
		Jsr 	+
		Jsr 	:-

		.echo **FAIL  JSR  lzpi

		jsr 	[$12]
		jsr 	[bak08]
		jsr 	[fwd08]

		.echo **FAIL  JSR  lzpiy

		jsr 	[$12],Y
		jsr 	[bak08],y
		jsr 	[fwd08],Y

		.echo **PASS  JSR  pcr  (as ab)

		Jsr 	:+
		Jsr 	-
		Jsr 	+
		Jsr 	:-

		.echo **FAIL  JSR  sr

		jsr 	$12,S
		jsr 	bak08,s
		jsr 	fwd08,S

		.echo **FAIL  JSR  sriy

		jsr 	($12,s),Y
		jsr 	(bak08,S),y
		jsr 	(fwd08,s),Y

		.echo **PASS  JSR  zp  (as ab)

		Jsr 	$12
		Jsr 	bak08
		Jsr 	fwd08

		.echo **FAIL  JSR  zpi

		jsr 	($12)
		jsr 	(bak08)
		jsr 	(fwd08)

		.echo **FAIL  JSR  zpiy

		jsr 	($12),Y
		jsr 	(bak08),y
		jsr 	(fwd08),Y

		.echo **FAIL  JSR  zpx

		jsr 	$12,X
		jsr 	bak08,x
		jsr 	fwd08,X

		.echo **PASS  JSR  zpxi  (as abxi)

		Jsr 	($12,X)
		Jsr 	(bak08,x)
		Jsr 	(fwd08,X)

		.echo **FAIL  JSR  zpy

		jsr 	$12,Y
		jsr 	bak08,y
		jsr 	fwd08,Y


:	; forward ref for JSR

; -------------------------------

:	; backward ref for LDX

		; check LDX
		; 1 mnemonics with modes ['ab', 'aby', 'imm', 'zp', 'zpy']

		.echo **PASS  LDX  ab

		LDX 	$1234
		LDX 	bak16
		LDX 	fwd16

		.echo **FAIL  LDX  abi

		ldx 	($1234)
		ldx 	(bak16)
		ldx 	(fwd16)

		.echo **FAIL  LDX  abx

		ldx 	$1234,X
		ldx 	bak16,x
		ldx 	fwd16,X

		.echo **FAIL  LDX  abxi

		ldx 	($1234,X)
		ldx 	(bak16,x)
		ldx 	(fwd16,X)

		.echo **PASS  LDX  aby

		LDX 	$1234,Y
		LDX 	bak16,y
		LDX 	fwd16,Y

		.echo **FAIL  LDX  acc

		ldx 	A
		ldx 	a

		.echo **FAIL  LDX  bmv

		ldx 	#$12, #$34
		ldx 	#bak08, #fwd08
		ldx 	$123456, $789ABC
		ldx 	bak24, fwd24

		.echo **PASS  LDX  imm

		LDX 	#$12
		LDX 	#bak08
		LDX 	#fwd08

		.echo **FAIL  LDX  imp

		ldx 

		.echo **PASS  LDX  lab  (as ab)

		Ldx 	$123456
		Ldx 	bak24
		Ldx 	fwd24

		.echo **FAIL  LDX  labi

		ldx 	[$123456]
		ldx 	[bak24]
		ldx 	[fwd24]

		.echo **FAIL  LDX  labx

		ldx 	$123456,X
		ldx 	bak24,x
		ldx 	fwd24,X

		.echo **PASS  LDX  lpcr  (as ab)

		Ldx 	:+
		Ldx 	-
		Ldx 	+
		Ldx 	:-

		.echo **FAIL  LDX  lzpi

		ldx 	[$12]
		ldx 	[bak08]
		ldx 	[fwd08]

		.echo **FAIL  LDX  lzpiy

		ldx 	[$12],Y
		ldx 	[bak08],y
		ldx 	[fwd08],Y

		.echo **PASS  LDX  pcr  (as ab)

		Ldx 	:+
		Ldx 	-
		Ldx 	+
		Ldx 	:-

		.echo **FAIL  LDX  sr

		ldx 	$12,S
		ldx 	bak08,s
		ldx 	fwd08,S

		.echo **FAIL  LDX  sriy

		ldx 	($12,s),Y
		ldx 	(bak08,S),y
		ldx 	(fwd08,s),Y

		.echo **PASS  LDX  zp

		LDX 	$12
		LDX 	bak08
		Ldx 	fwd08   	; (absolute)

		.echo **FAIL  LDX  zpi

		ldx 	($12)
		ldx 	(bak08)
		ldx 	(fwd08)

		.echo **FAIL  LDX  zpiy

		ldx 	($12),Y
		ldx 	(bak08),y
		ldx 	(fwd08),Y

		.echo **FAIL  LDX  zpx

		ldx 	$12,X
		ldx 	bak08,x
		ldx 	fwd08,X

		.echo **FAIL  LDX  zpxi

		ldx 	($12,X)
		ldx 	(bak08,x)
		ldx 	(fwd08,X)

		.echo **PASS  LDX  zpy

		LDX 	$12,Y
		LDX 	bak08,y
		Ldx 	fwd08,Y 	; (absolute)


:	; forward ref for LDX

; -------------------------------

:	; backward ref for MVN

		; check MVN
		; 2 mnemonics with modes ['bmv']
		; MVP

		.echo **FAIL  MVN  ab

		mvn 	$1234
		mvn 	bak16
		mvn 	fwd16

		.echo **FAIL  MVN  abi

		mvn 	($1234)
		mvn 	(bak16)
		mvn 	(fwd16)

		.echo **FAIL  MVN  abx

		mvn 	$1234,X
		mvn 	bak16,x
		mvn 	fwd16,X

		.echo **FAIL  MVN  abxi

		mvn 	($1234,X)
		mvn 	(bak16,x)
		mvn 	(fwd16,X)

		.echo **FAIL  MVN  aby

		mvn 	$1234,Y
		mvn 	bak16,y
		mvn 	fwd16,Y

		.echo **FAIL  MVN  acc

		mvn 	A
		mvn 	a

		.echo **PASS  MVN  bmv

		MVN 	#$12, #$34
		MVN 	#bak08, #fwd08
		MVN 	$123456, $789ABC
		MVN 	bak24, fwd24

		.echo **FAIL  MVN  imm

		mvn 	#$12
		mvn 	#bak08
		mvn 	#fwd08

		.echo **FAIL  MVN  imp

		mvn 

		.echo **FAIL  MVN  lab

		mvn 	$123456
		mvn 	bak24
		mvn 	fwd24

		.echo **FAIL  MVN  labi

		mvn 	[$123456]
		mvn 	[bak24]
		mvn 	[fwd24]

		.echo **FAIL  MVN  labx

		mvn 	$123456,X
		mvn 	bak24,x
		mvn 	fwd24,X

		.echo **FAIL  MVN  lpcr

		mvn 	:+
		mvn 	-
		mvn 	+
		mvn 	:-

		.echo **FAIL  MVN  lzpi

		mvn 	[$12]
		mvn 	[bak08]
		mvn 	[fwd08]

		.echo **FAIL  MVN  lzpiy

		mvn 	[$12],Y
		mvn 	[bak08],y
		mvn 	[fwd08],Y

		.echo **FAIL  MVN  pcr

		mvn 	:+
		mvn 	-
		mvn 	+
		mvn 	:-

		.echo **FAIL  MVN  sr

		mvn 	$12,S
		mvn 	bak08,s
		mvn 	fwd08,S

		.echo **FAIL  MVN  sriy

		mvn 	($12,s),Y
		mvn 	(bak08,S),y
		mvn 	(fwd08,s),Y

		.echo **FAIL  MVN  zp

		mvn 	$12
		mvn 	bak08
		mvn 	fwd08

		.echo **FAIL  MVN  zpi

		mvn 	($12)
		mvn 	(bak08)
		mvn 	(fwd08)

		.echo **FAIL  MVN  zpiy

		mvn 	($12),Y
		mvn 	(bak08),y
		mvn 	(fwd08),Y

		.echo **FAIL  MVN  zpx

		mvn 	$12,X
		mvn 	bak08,x
		mvn 	fwd08,X

		.echo **FAIL  MVN  zpxi

		mvn 	($12,X)
		mvn 	(bak08,x)
		mvn 	(fwd08,X)

		.echo **FAIL  MVN  zpy

		mvn 	$12,Y
		mvn 	bak08,y
		mvn 	fwd08,Y


:	; forward ref for MVN

; -------------------------------

:	; backward ref for PEA

		; check PEA
		; 1 mnemonics with modes ['ab', 'imm']

		.echo **PASS  PEA  ab

		PEA 	$1234
		PEA 	bak16
		PEA 	fwd16

		.echo **FAIL  PEA  abi

		pea 	($1234)
		pea 	(bak16)
		pea 	(fwd16)

		.echo **FAIL  PEA  abx

		pea 	$1234,X
		pea 	bak16,x
		pea 	fwd16,X

		.echo **FAIL  PEA  abxi

		pea 	($1234,X)
		pea 	(bak16,x)
		pea 	(fwd16,X)

		.echo **FAIL  PEA  aby

		pea 	$1234,Y
		pea 	bak16,y
		pea 	fwd16,Y

		.echo **FAIL  PEA  acc

		pea 	A
		pea 	a

		.echo **FAIL  PEA  bmv

		pea 	#$12, #$34
		pea 	#bak08, #fwd08
		pea 	$123456, $789ABC
		pea 	bak24, fwd24

		.echo **PASS  PEA  imm

		PEA 	#$12
		PEA 	#bak08
		PEA 	#fwd08

		.echo **FAIL  PEA  imp

		pea 

		.echo **PASS  PEA  lab  (as ab)

		Pea 	$123456
		Pea 	bak24
		Pea 	fwd24

		.echo **FAIL  PEA  labi

		pea 	[$123456]
		pea 	[bak24]
		pea 	[fwd24]

		.echo **FAIL  PEA  labx

		pea 	$123456,X
		pea 	bak24,x
		pea 	fwd24,X

		.echo **PASS  PEA  lpcr  (as ab)

		Pea 	:+
		Pea 	-
		Pea 	+
		Pea 	:-

		.echo **FAIL  PEA  lzpi

		pea 	[$12]
		pea 	[bak08]
		pea 	[fwd08]

		.echo **FAIL  PEA  lzpiy

		pea 	[$12],Y
		pea 	[bak08],y
		pea 	[fwd08],Y

		.echo **PASS  PEA  pcr  (as ab)

		Pea 	:+
		Pea 	-
		Pea 	+
		Pea 	:-

		.echo **FAIL  PEA  sr

		pea 	$12,S
		pea 	bak08,s
		pea 	fwd08,S

		.echo **FAIL  PEA  sriy

		pea 	($12,s),Y
		pea 	(bak08,S),y
		pea 	(fwd08,s),Y

		.echo **PASS  PEA  zp  (as ab)

		Pea 	$12
		Pea 	bak08
		Pea 	fwd08

		.echo **FAIL  PEA  zpi

		pea 	($12)
		pea 	(bak08)
		pea 	(fwd08)

		.echo **FAIL  PEA  zpiy

		pea 	($12),Y
		pea 	(bak08),y
		pea 	(fwd08),Y

		.echo **FAIL  PEA  zpx

		pea 	$12,X
		pea 	bak08,x
		pea 	fwd08,X

		.echo **FAIL  PEA  zpxi

		pea 	($12,X)
		pea 	(bak08,x)
		pea 	(fwd08,X)

		.echo **FAIL  PEA  zpy

		pea 	$12,Y
		pea 	bak08,y
		pea 	fwd08,Y


:	; forward ref for PEA

; -------------------------------

:	; backward ref for PEI

		; check PEI
		; 1 mnemonics with modes ['zp', 'zpi']

		.echo **PASS  PEI  ab  (as zp)

		Pei 	$1234
		Pei 	bak16
		Pei 	fwd16

		.echo **PASS  PEI  abi  (as zpi)

		Pei 	($1234)
		Pei 	(bak16)
		Pei 	(fwd16)

		.echo **FAIL  PEI  abx

		pei 	$1234,X
		pei 	bak16,x
		pei 	fwd16,X

		.echo **FAIL  PEI  abxi

		pei 	($1234,X)
		pei 	(bak16,x)
		pei 	(fwd16,X)

		.echo **FAIL  PEI  aby

		pei 	$1234,Y
		pei 	bak16,y
		pei 	fwd16,Y

		.echo **FAIL  PEI  acc

		pei 	A
		pei 	a

		.echo **FAIL  PEI  bmv

		pei 	#$12, #$34
		pei 	#bak08, #fwd08
		pei 	$123456, $789ABC
		pei 	bak24, fwd24

		.echo **FAIL  PEI  imm

		pei 	#$12
		pei 	#bak08
		pei 	#fwd08

		.echo **FAIL  PEI  imp

		pei 

		.echo **PASS  PEI  lab  (as zp)

		Pei 	$123456
		Pei 	bak24
		Pei 	fwd24

		.echo **FAIL  PEI  labi

		pei 	[$123456]
		pei 	[bak24]
		pei 	[fwd24]

		.echo **FAIL  PEI  labx

		pei 	$123456,X
		pei 	bak24,x
		pei 	fwd24,X

		.echo **PASS  PEI  lpcr  (as zp)

		Pei 	:+
		Pei 	-
		Pei 	+
		Pei 	:-

		.echo **FAIL  PEI  lzpi

		pei 	[$12]
		pei 	[bak08]
		pei 	[fwd08]

		.echo **FAIL  PEI  lzpiy

		pei 	[$12],Y
		pei 	[bak08],y
		pei 	[fwd08],Y

		.echo **PASS  PEI  pcr  (as zp)

		Pei 	:+
		Pei 	-
		Pei 	+
		Pei 	:-

		.echo **FAIL  PEI  sr

		pei 	$12,S
		pei 	bak08,s
		pei 	fwd08,S

		.echo **FAIL  PEI  sriy

		pei 	($12,s),Y
		pei 	(bak08,S),y
		pei 	(fwd08,s),Y

		.echo **PASS  PEI  zp

		PEI 	$12
		PEI 	bak08
		PEI 	fwd08

		.echo **PASS  PEI  zpi

		PEI 	($12)
		PEI 	(bak08)
		PEI 	(fwd08)

		.echo **FAIL  PEI  zpiy

		pei 	($12),Y
		pei 	(bak08),y
		pei 	(fwd08),Y

		.echo **FAIL  PEI  zpx

		pei 	$12,X
		pei 	bak08,x
		pei 	fwd08,X

		.echo **FAIL  PEI  zpxi

		pei 	($12,X)
		pei 	(bak08,x)
		pei 	(fwd08,X)

		.echo **FAIL  PEI  zpy

		pei 	$12,Y
		pei 	bak08,y
		pei 	fwd08,Y


:	; forward ref for PEI

; -------------------------------

:	; backward ref for REP

		; check REP
		; 2 mnemonics with modes ['imm']
		; SEP

		.echo **FAIL  REP  ab

		rep 	$1234
		rep 	bak16
		rep 	fwd16

		.echo **FAIL  REP  abi

		rep 	($1234)
		rep 	(bak16)
		rep 	(fwd16)

		.echo **FAIL  REP  abx

		rep 	$1234,X
		rep 	bak16,x
		rep 	fwd16,X

		.echo **FAIL  REP  abxi

		rep 	($1234,X)
		rep 	(bak16,x)
		rep 	(fwd16,X)

		.echo **FAIL  REP  aby

		rep 	$1234,Y
		rep 	bak16,y
		rep 	fwd16,Y

		.echo **FAIL  REP  acc

		rep 	A
		rep 	a

		.echo **FAIL  REP  bmv

		rep 	#$12, #$34
		rep 	#bak08, #fwd08
		rep 	$123456, $789ABC
		rep 	bak24, fwd24

		.echo **PASS  REP  imm

		REP 	#$12
		REP 	#bak08
		REP 	#fwd08

		.echo **FAIL  REP  imp

		rep 

		.echo **FAIL  REP  lab

		rep 	$123456
		rep 	bak24
		rep 	fwd24

		.echo **FAIL  REP  labi

		rep 	[$123456]
		rep 	[bak24]
		rep 	[fwd24]

		.echo **FAIL  REP  labx

		rep 	$123456,X
		rep 	bak24,x
		rep 	fwd24,X

		.echo **FAIL  REP  lpcr

		rep 	:+
		rep 	-
		rep 	+
		rep 	:-

		.echo **FAIL  REP  lzpi

		rep 	[$12]
		rep 	[bak08]
		rep 	[fwd08]

		.echo **FAIL  REP  lzpiy

		rep 	[$12],Y
		rep 	[bak08],y
		rep 	[fwd08],Y

		.echo **FAIL  REP  pcr

		rep 	:+
		rep 	-
		rep 	+
		rep 	:-

		.echo **FAIL  REP  sr

		rep 	$12,S
		rep 	bak08,s
		rep 	fwd08,S

		.echo **FAIL  REP  sriy

		rep 	($12,s),Y
		rep 	(bak08,S),y
		rep 	(fwd08,s),Y

		.echo **FAIL  REP  zp

		rep 	$12
		rep 	bak08
		rep 	fwd08

		.echo **FAIL  REP  zpi

		rep 	($12)
		rep 	(bak08)
		rep 	(fwd08)

		.echo **FAIL  REP  zpiy

		rep 	($12),Y
		rep 	(bak08),y
		rep 	(fwd08),Y

		.echo **FAIL  REP  zpx

		rep 	$12,X
		rep 	bak08,x
		rep 	fwd08,X

		.echo **FAIL  REP  zpxi

		rep 	($12,X)
		rep 	(bak08,x)
		rep 	(fwd08,X)

		.echo **FAIL  REP  zpy

		rep 	$12,Y
		rep 	bak08,y
		rep 	fwd08,Y


:	; forward ref for REP

; -------------------------------

:	; backward ref for STA

		; check STA
		; 1 mnemonics with modes ['ab', 'abx', 'aby', 'lab', 'labx', 'lzpi', 'lzpiy', 'sr', 'sriy', 'zp', 'zpi', 'zpiy', 'zpx', 'zpxi']

		.echo **PASS  STA  ab

		STA 	$1234
		STA 	bak16
		STA 	fwd16

		.echo **PASS  STA  abi  (as zpi)

		Sta 	($1234)
		Sta 	(bak16)
		Sta 	(fwd16)

		.echo **PASS  STA  abx

		STA 	$1234,X
		STA 	bak16,x
		STA 	fwd16,X

		.echo **PASS  STA  abxi  (as zpxi)

		Sta 	($1234,X)
		Sta 	(bak16,x)
		Sta 	(fwd16,X)

		.echo **PASS  STA  aby

		STA 	$1234,Y
		STA 	bak16,y
		STA 	fwd16,Y

		.echo **FAIL  STA  acc

		sta 	A
		sta 	a

		.echo **FAIL  STA  bmv

		sta 	#$12, #$34
		sta 	#bak08, #fwd08
		sta 	$123456, $789ABC
		sta 	bak24, fwd24

		.echo **FAIL  STA  imm

		sta 	#$12
		sta 	#bak08
		sta 	#fwd08

		.echo **FAIL  STA  imp

		sta 

		.echo **PASS  STA  lab

		STA 	$123456
		STA 	bak24
		STA 	fwd24

		.echo **PASS  STA  labi  (as lzpi)

		Sta 	[$123456]
		Sta 	[bak24]
		Sta 	[fwd24]

		.echo **PASS  STA  labx

		STA 	$123456,X
		STA 	bak24,x
		STA 	fwd24,X

		.echo **PASS  STA  lpcr  (as ab)

		Sta 	:+
		Sta 	-
		Sta 	+
		Sta 	:-

		.echo **PASS  STA  lzpi

		STA 	[$12]
		STA 	[bak08]
		STA 	[fwd08]

		.echo **PASS  STA  lzpiy

		STA 	[$12],Y
		STA 	[bak08],y
		STA 	[fwd08],Y

		.echo **PASS  STA  pcr  (as ab)

		Sta 	:+
		Sta 	-
		Sta 	+
		Sta 	:-

		.echo **PASS  STA  sr

		STA 	$12,S
		STA 	bak08,s
		STA 	fwd08,S

		.echo **PASS  STA  sriy

		STA 	($12,s),Y
		STA 	(bak08,S),y
		STA 	(fwd08,s),Y

		.echo **PASS  STA  zp

		STA 	$12
		STA 	bak08
		Sta 	fwd08   	; (absolute)

		.echo **PASS  STA  zpi

		STA 	($12)
		STA 	(bak08)
		STA 	(fwd08)

		.echo **PASS  STA  zpiy

		STA 	($12),Y
		STA 	(bak08),y
		STA 	(fwd08),Y

		.echo **PASS  STA  zpx

		STA 	$12,X
		STA 	bak08,x
		Sta 	fwd08,X 	; (absolute)

		.echo **PASS  STA  zpxi

		STA 	($12,X)
		STA 	(bak08,x)
		STA 	(fwd08,X)

		.echo **PASS  STA  zpy  (as aby)

		Sta 	$12,Y
		Sta 	bak08,y
		Sta 	fwd08,Y


:	; forward ref for STA

; -------------------------------

:	; backward ref for STX

		; check STX
		; 1 mnemonics with modes ['ab', 'zp', 'zpy']

		.echo **PASS  STX  ab

		STX 	$1234
		STX 	bak16
		STX 	fwd16

		.echo **FAIL  STX  abi

		stx 	($1234)
		stx 	(bak16)
		stx 	(fwd16)

		.echo **FAIL  STX  abx

		stx 	$1234,X
		stx 	bak16,x
		stx 	fwd16,X

		.echo **FAIL  STX  abxi

		stx 	($1234,X)
		stx 	(bak16,x)
		stx 	(fwd16,X)

		.echo **PASS  STX  aby  (as zpy)

		Stx 	$1234,Y
		Stx 	bak16,y
		Stx 	fwd16,Y

		.echo **FAIL  STX  acc

		stx 	A
		stx 	a

		.echo **FAIL  STX  bmv

		stx 	#$12, #$34
		stx 	#bak08, #fwd08
		stx 	$123456, $789ABC
		stx 	bak24, fwd24

		.echo **FAIL  STX  imm

		stx 	#$12
		stx 	#bak08
		stx 	#fwd08

		.echo **FAIL  STX  imp

		stx 

		.echo **PASS  STX  lab  (as ab)

		Stx 	$123456
		Stx 	bak24
		Stx 	fwd24

		.echo **FAIL  STX  labi

		stx 	[$123456]
		stx 	[bak24]
		stx 	[fwd24]

		.echo **FAIL  STX  labx

		stx 	$123456,X
		stx 	bak24,x
		stx 	fwd24,X

		.echo **PASS  STX  lpcr  (as ab)

		Stx 	:+
		Stx 	-
		Stx 	+
		Stx 	:-

		.echo **FAIL  STX  lzpi

		stx 	[$12]
		stx 	[bak08]
		stx 	[fwd08]

		.echo **FAIL  STX  lzpiy

		stx 	[$12],Y
		stx 	[bak08],y
		stx 	[fwd08],Y

		.echo **PASS  STX  pcr  (as ab)

		Stx 	:+
		Stx 	-
		Stx 	+
		Stx 	:-

		.echo **FAIL  STX  sr

		stx 	$12,S
		stx 	bak08,s
		stx 	fwd08,S

		.echo **FAIL  STX  sriy

		stx 	($12,s),Y
		stx 	(bak08,S),y
		stx 	(fwd08,s),Y

		.echo **PASS  STX  zp

		STX 	$12
		STX 	bak08
		Stx 	fwd08   	; (absolute)

		.echo **FAIL  STX  zpi

		stx 	($12)
		stx 	(bak08)
		stx 	(fwd08)

		.echo **FAIL  STX  zpiy

		stx 	($12),Y
		stx 	(bak08),y
		stx 	(fwd08),Y

		.echo **FAIL  STX  zpx

		stx 	$12,X
		stx 	bak08,x
		stx 	fwd08,X

		.echo **FAIL  STX  zpxi

		stx 	($12,X)
		stx 	(bak08,x)
		stx 	(fwd08,X)

		.echo **PASS  STX  zpy

		STX 	$12,Y
		STX 	bak08,y
		STX 	fwd08,Y


:	; forward ref for STX

; -------------------------------

:	; backward ref for STY

		; check STY
		; 1 mnemonics with modes ['ab', 'zp', 'zpx']

		.echo **PASS  STY  ab

		STY 	$1234
		STY 	bak16
		STY 	fwd16

		.echo **FAIL  STY  abi

		sty 	($1234)
		sty 	(bak16)
		sty 	(fwd16)

		.echo **PASS  STY  abx  (as zpx)

		Sty 	$1234,X
		Sty 	bak16,x
		Sty 	fwd16,X

		.echo **FAIL  STY  abxi

		sty 	($1234,X)
		sty 	(bak16,x)
		sty 	(fwd16,X)

		.echo **FAIL  STY  aby

		sty 	$1234,Y
		sty 	bak16,y
		sty 	fwd16,Y

		.echo **FAIL  STY  acc

		sty 	A
		sty 	a

		.echo **FAIL  STY  bmv

		sty 	#$12, #$34
		sty 	#bak08, #fwd08
		sty 	$123456, $789ABC
		sty 	bak24, fwd24

		.echo **FAIL  STY  imm

		sty 	#$12
		sty 	#bak08
		sty 	#fwd08

		.echo **FAIL  STY  imp

		sty 

		.echo **PASS  STY  lab  (as ab)

		Sty 	$123456
		Sty 	bak24
		Sty 	fwd24

		.echo **FAIL  STY  labi

		sty 	[$123456]
		sty 	[bak24]
		sty 	[fwd24]

		.echo **PASS  STY  labx  (as zpx)

		Sty 	$123456,X
		Sty 	bak24,x
		Sty 	fwd24,X

		.echo **PASS  STY  lpcr  (as ab)

		Sty 	:+
		Sty 	-
		Sty 	+
		Sty 	:-

		.echo **FAIL  STY  lzpi

		sty 	[$12]
		sty 	[bak08]
		sty 	[fwd08]

		.echo **FAIL  STY  lzpiy

		sty 	[$12],Y
		sty 	[bak08],y
		sty 	[fwd08],Y

		.echo **PASS  STY  pcr  (as ab)

		Sty 	:+
		Sty 	-
		Sty 	+
		Sty 	:-

		.echo **FAIL  STY  sr

		sty 	$12,S
		sty 	bak08,s
		sty 	fwd08,S

		.echo **FAIL  STY  sriy

		sty 	($12,s),Y
		sty 	(bak08,S),y
		sty 	(fwd08,s),Y

		.echo **PASS  STY  zp

		STY 	$12
		STY 	bak08
		Sty 	fwd08   	; (absolute)

		.echo **FAIL  STY  zpi

		sty 	($12)
		sty 	(bak08)
		sty 	(fwd08)

		.echo **FAIL  STY  zpiy

		sty 	($12),Y
		sty 	(bak08),y
		sty 	(fwd08),Y

		.echo **PASS  STY  zpx

		STY 	$12,X
		STY 	bak08,x
		STY 	fwd08,X

		.echo **FAIL  STY  zpxi

		sty 	($12,X)
		sty 	(bak08,x)
		sty 	(fwd08,X)

		.echo **FAIL  STY  zpy

		sty 	$12,Y
		sty 	bak08,y
		sty 	fwd08,Y


:	; forward ref for STY

; -------------------------------

:	; backward ref for STZ

		; check STZ
		; 1 mnemonics with modes ['ab', 'abx', 'zp', 'zpx']

		.echo **PASS  STZ  ab

		STZ 	$1234
		STZ 	bak16
		STZ 	fwd16

		.echo **FAIL  STZ  abi

		stz 	($1234)
		stz 	(bak16)
		stz 	(fwd16)

		.echo **PASS  STZ  abx

		STZ 	$1234,X
		STZ 	bak16,x
		STZ 	fwd16,X

		.echo **FAIL  STZ  abxi

		stz 	($1234,X)
		stz 	(bak16,x)
		stz 	(fwd16,X)

		.echo **FAIL  STZ  aby

		stz 	$1234,Y
		stz 	bak16,y
		stz 	fwd16,Y

		.echo **FAIL  STZ  acc

		stz 	A
		stz 	a

		.echo **FAIL  STZ  bmv

		stz 	#$12, #$34
		stz 	#bak08, #fwd08
		stz 	$123456, $789ABC
		stz 	bak24, fwd24

		.echo **FAIL  STZ  imm

		stz 	#$12
		stz 	#bak08
		stz 	#fwd08

		.echo **FAIL  STZ  imp

		stz 

		.echo **PASS  STZ  lab  (as ab)

		Stz 	$123456
		Stz 	bak24
		Stz 	fwd24

		.echo **FAIL  STZ  labi

		stz 	[$123456]
		stz 	[bak24]
		stz 	[fwd24]

		.echo **PASS  STZ  labx  (as abx)

		Stz 	$123456,X
		Stz 	bak24,x
		Stz 	fwd24,X

		.echo **PASS  STZ  lpcr  (as ab)

		Stz 	:+
		Stz 	-
		Stz 	+
		Stz 	:-

		.echo **FAIL  STZ  lzpi

		stz 	[$12]
		stz 	[bak08]
		stz 	[fwd08]

		.echo **FAIL  STZ  lzpiy

		stz 	[$12],Y
		stz 	[bak08],y
		stz 	[fwd08],Y

		.echo **PASS  STZ  pcr  (as ab)

		Stz 	:+
		Stz 	-
		Stz 	+
		Stz 	:-

		.echo **FAIL  STZ  sr

		stz 	$12,S
		stz 	bak08,s
		stz 	fwd08,S

		.echo **FAIL  STZ  sriy

		stz 	($12,s),Y
		stz 	(bak08,S),y
		stz 	(fwd08,s),Y

		.echo **PASS  STZ  zp

		STZ 	$12
		STZ 	bak08
		Stz 	fwd08   	; (absolute)

		.echo **FAIL  STZ  zpi

		stz 	($12)
		stz 	(bak08)
		stz 	(fwd08)

		.echo **FAIL  STZ  zpiy

		stz 	($12),Y
		stz 	(bak08),y
		stz 	(fwd08),Y

		.echo **PASS  STZ  zpx

		STZ 	$12,X
		STZ 	bak08,x
		Stz 	fwd08,X 	; (absolute)

		.echo **FAIL  STZ  zpxi

		stz 	($12,X)
		stz 	(bak08,x)
		stz 	(fwd08,X)

		.echo **FAIL  STZ  zpy

		stz 	$12,Y
		stz 	bak08,y
		stz 	fwd08,Y


:	; forward ref for STZ

; -------------------------------

:	; backward ref for TRB

		; check TRB
		; 2 mnemonics with modes ['ab', 'zp']
		; TSB

		.echo **PASS  TRB  ab

		TRB 	$1234
		TRB 	bak16
		TRB 	fwd16

		.echo **FAIL  TRB  abi

		trb 	($1234)
		trb 	(bak16)
		trb 	(fwd16)

		.echo **FAIL  TRB  abx

		trb 	$1234,X
		trb 	bak16,x
		trb 	fwd16,X

		.echo **FAIL  TRB  abxi

		trb 	($1234,X)
		trb 	(bak16,x)
		trb 	(fwd16,X)

		.echo **FAIL  TRB  aby

		trb 	$1234,Y
		trb 	bak16,y
		trb 	fwd16,Y

		.echo **FAIL  TRB  acc

		trb 	A
		trb 	a

		.echo **FAIL  TRB  bmv

		trb 	#$12, #$34
		trb 	#bak08, #fwd08
		trb 	$123456, $789ABC
		trb 	bak24, fwd24

		.echo **FAIL  TRB  imm

		trb 	#$12
		trb 	#bak08
		trb 	#fwd08

		.echo **FAIL  TRB  imp

		trb 

		.echo **PASS  TRB  lab  (as ab)

		Trb 	$123456
		Trb 	bak24
		Trb 	fwd24

		.echo **FAIL  TRB  labi

		trb 	[$123456]
		trb 	[bak24]
		trb 	[fwd24]

		.echo **FAIL  TRB  labx

		trb 	$123456,X
		trb 	bak24,x
		trb 	fwd24,X

		.echo **PASS  TRB  lpcr  (as ab)

		Trb 	:+
		Trb 	-
		Trb 	+
		Trb 	:-

		.echo **FAIL  TRB  lzpi

		trb 	[$12]
		trb 	[bak08]
		trb 	[fwd08]

		.echo **FAIL  TRB  lzpiy

		trb 	[$12],Y
		trb 	[bak08],y
		trb 	[fwd08],Y

		.echo **PASS  TRB  pcr  (as ab)

		Trb 	:+
		Trb 	-
		Trb 	+
		Trb 	:-

		.echo **FAIL  TRB  sr

		trb 	$12,S
		trb 	bak08,s
		trb 	fwd08,S

		.echo **FAIL  TRB  sriy

		trb 	($12,s),Y
		trb 	(bak08,S),y
		trb 	(fwd08,s),Y

		.echo **PASS  TRB  zp

		TRB 	$12
		TRB 	bak08
		Trb 	fwd08   	; (absolute)

		.echo **FAIL  TRB  zpi

		trb 	($12)
		trb 	(bak08)
		trb 	(fwd08)

		.echo **FAIL  TRB  zpiy

		trb 	($12),Y
		trb 	(bak08),y
		trb 	(fwd08),Y

		.echo **FAIL  TRB  zpx

		trb 	$12,X
		trb 	bak08,x
		trb 	fwd08,X

		.echo **FAIL  TRB  zpxi

		trb 	($12,X)
		trb 	(bak08,x)
		trb 	(fwd08,X)

		.echo **FAIL  TRB  zpy

		trb 	$12,Y
		trb 	bak08,y
		trb 	fwd08,Y


:	; forward ref for TRB

; -------------------------------

; forward reference

fwd32	.equ	$89ABCDEF
fwd24	.equ	$456789
fwd16	.equ	$1234
fwd08	.equ	$12

; -------------------------------

		.end

; -------------------------------

; 533 pass
; 1051 fail
