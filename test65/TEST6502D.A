; Hobby Cross-Assembler HXA65 Test 6502d
; 6502\Instruction Set
; ok: 6502 Forced Address Modes

; generated by MODE65.PY - Fri Nov 29 14:25:08 2024

; no errors to detect

; -------------------------------

		.listfile
		.errfile

		.maxerr	10000		; increase default count

; -------------------------------

		.cpu	6502
		.org	$1000

; -------------------------------

; backward reference

bak08	.equ	$12
bak16	.equ	$1234
bak24	.equ	$456789
bak32	.equ	$89ABCDEF

; -------------------------------

		; check ADC
		; 7 mnemonics with modes ['ab', 'abx', 'aby', 'imm', 'zp', 'zpiy', 'zpx', 'zpxi']
		; AND
		; CMP
		; EOR
		; LDA
		; ORA
		; SBC

:	; backward ref for ADC

		; **PASS  ADC  ab as ab

		.assume addr:absolute
		ADC 	$4365
		.assume addr:absolute
		ADC 	fwd16
		.assume addr:absolute
		ADC 	bak16

		; **PASS  ADC  ab as zp

		.assume addr:zeropage
		ADC 	$4365
		.assume addr:zeropage
		ADC 	fwd16
		.assume addr:zeropage
		ADC 	bak16

		; **PASS  ADC  abx as abx

		.assume addr:absolute
		ADC 	$4365,X
		.assume addr:absolute
		ADC 	fwd16,X
		.assume addr:absolute
		ADC 	bak16,X

		; **PASS  ADC  abx as zpx

		.assume addr:zeropage
		ADC 	$4365,X
		.assume addr:zeropage
		ADC 	fwd16,X
		.assume addr:zeropage
		ADC 	bak16,X

		; **PASS  ADC  aby as aby

		.assume addr:absolute
		ADC 	$4365,Y
		.assume addr:absolute
		ADC 	fwd16,Y
		.assume addr:absolute
		ADC 	bak16,Y

; 'imm' cannot be forced

		; **PASS  ADC  zp as ab

		.assume addr:absolute
		ADC 	$32
		.assume addr:absolute
		ADC 	bak08
		.assume addr:absolute
		ADC 	fwd08

		; **PASS  ADC  zp as zp

		.assume addr:zeropage
		ADC 	$32
		.assume addr:zeropage
		ADC 	bak08
		.assume addr:zeropage
		ADC 	fwd08

		; **PASS  ADC  zpiy as zpiy

		.assume addr:zeropage
		ADC 	($32),y
		.assume addr:zeropage
		ADC 	(bak08),y
		.assume addr:zeropage
		ADC 	(fwd08),y

		; **PASS  ADC  zpx as abx

		.assume addr:absolute
		ADC 	$32,x
		.assume addr:absolute
		ADC 	bak08,x
		.assume addr:absolute
		ADC 	fwd08,x

		; **PASS  ADC  zpx as zpx

		.assume addr:zeropage
		ADC 	$32,x
		.assume addr:zeropage
		ADC 	bak08,x
		.assume addr:zeropage
		ADC 	fwd08,x

		; **PASS  ADC  zpxi as zpxi

		.assume addr:zeropage
		ADC 	($32,x)
		.assume addr:zeropage
		ADC 	(bak08,x)
		.assume addr:zeropage
		ADC 	(fwd08,x)


:	; forward ref for ADC

; -------------------------------

		; check ASL
		; 4 mnemonics with modes ['ab', 'abx', 'acc', 'imp', 'zp', 'zpx']
		; LSR
		; ROL
		; ROR

:	; backward ref for ASL

		; **PASS  ASL  ab as ab

		.assume addr:absolute
		ASL 	$4365
		.assume addr:absolute
		ASL 	fwd16
		.assume addr:absolute
		ASL 	bak16

		; **PASS  ASL  ab as zp

		.assume addr:zeropage
		ASL 	$4365
		.assume addr:zeropage
		ASL 	fwd16
		.assume addr:zeropage
		ASL 	bak16

		; **PASS  ASL  abx as abx

		.assume addr:absolute
		ASL 	$4365,X
		.assume addr:absolute
		ASL 	fwd16,X
		.assume addr:absolute
		ASL 	bak16,X

		; **PASS  ASL  abx as zpx

		.assume addr:zeropage
		ASL 	$4365,X
		.assume addr:zeropage
		ASL 	fwd16,X
		.assume addr:zeropage
		ASL 	bak16,X

; 'acc' cannot be forced

; 'imp' cannot be forced

		; **PASS  ASL  zp as ab

		.assume addr:absolute
		ASL 	$32
		.assume addr:absolute
		ASL 	bak08
		.assume addr:absolute
		ASL 	fwd08

		; **PASS  ASL  zp as zp

		.assume addr:zeropage
		ASL 	$32
		.assume addr:zeropage
		ASL 	bak08
		.assume addr:zeropage
		ASL 	fwd08

		; **PASS  ASL  zpx as abx

		.assume addr:absolute
		ASL 	$32,x
		.assume addr:absolute
		ASL 	bak08,x
		.assume addr:absolute
		ASL 	fwd08,x

		; **PASS  ASL  zpx as zpx

		.assume addr:zeropage
		ASL 	$32,x
		.assume addr:zeropage
		ASL 	bak08,x
		.assume addr:zeropage
		ASL 	fwd08,x


:	; forward ref for ASL

; -------------------------------

		; check BCC
		; 10 mnemonics with modes ['pcr']
		; BCS
		; BEQ
		; BGE
		; BLT
		; BMI
		; BNE
		; BPL
		; BVC
		; BVS

:	; backward ref for BCC

; 'pcr' cannot be forced


:	; forward ref for BCC

; -------------------------------

		; check BIT
		; 1 mnemonics with modes ['ab', 'zp']

:	; backward ref for BIT

		; **PASS  BIT  ab as ab

		.assume addr:absolute
		BIT 	$4365
		.assume addr:absolute
		BIT 	fwd16
		.assume addr:absolute
		BIT 	bak16

		; **PASS  BIT  ab as zp

		.assume addr:zeropage
		BIT 	$4365
		.assume addr:zeropage
		BIT 	fwd16
		.assume addr:zeropage
		BIT 	bak16

		; **PASS  BIT  zp as ab

		.assume addr:absolute
		BIT 	$32
		.assume addr:absolute
		BIT 	bak08
		.assume addr:absolute
		BIT 	fwd08

		; **PASS  BIT  zp as zp

		.assume addr:zeropage
		BIT 	$32
		.assume addr:zeropage
		BIT 	bak08
		.assume addr:zeropage
		BIT 	fwd08


:	; forward ref for BIT

; -------------------------------

		; check BRK
		; 1 mnemonics with modes ['imm', 'imp', 'zp']

:	; backward ref for BRK

; 'imm' cannot be forced

; 'imp' cannot be forced

		; **PASS  BRK  zp as zp

		.assume addr:zeropage
		BRK 	$32
		.assume addr:zeropage
		BRK 	bak08
		.assume addr:zeropage
		BRK 	fwd08


:	; forward ref for BRK

; -------------------------------

		; check CLC
		; 24 mnemonics with modes ['imp']
		; CLD
		; CLI
		; CLV
		; DEX
		; DEY
		; INX
		; INY
		; NOP
		; PHA
		; PHP
		; PLA
		; PLP
		; RTI
		; RTS
		; SEC
		; SED
		; SEI
		; TAX
		; TAY
		; TSX
		; TXA
		; TXS
		; TYA

:	; backward ref for CLC

; 'imp' cannot be forced


:	; forward ref for CLC

; -------------------------------

		; check CPX
		; 2 mnemonics with modes ['ab', 'imm', 'zp']
		; CPY

:	; backward ref for CPX

		; **PASS  CPX  ab as ab

		.assume addr:absolute
		CPX 	$4365
		.assume addr:absolute
		CPX 	fwd16
		.assume addr:absolute
		CPX 	bak16

		; **PASS  CPX  ab as zp

		.assume addr:zeropage
		CPX 	$4365
		.assume addr:zeropage
		CPX 	fwd16
		.assume addr:zeropage
		CPX 	bak16

; 'imm' cannot be forced

		; **PASS  CPX  zp as ab

		.assume addr:absolute
		CPX 	$32
		.assume addr:absolute
		CPX 	bak08
		.assume addr:absolute
		CPX 	fwd08

		; **PASS  CPX  zp as zp

		.assume addr:zeropage
		CPX 	$32
		.assume addr:zeropage
		CPX 	bak08
		.assume addr:zeropage
		CPX 	fwd08


:	; forward ref for CPX

; -------------------------------

		; check DEC
		; 2 mnemonics with modes ['ab', 'abx', 'zp', 'zpx']
		; INC

:	; backward ref for DEC

		; **PASS  DEC  ab as ab

		.assume addr:absolute
		DEC 	$4365
		.assume addr:absolute
		DEC 	fwd16
		.assume addr:absolute
		DEC 	bak16

		; **PASS  DEC  ab as zp

		.assume addr:zeropage
		DEC 	$4365
		.assume addr:zeropage
		DEC 	fwd16
		.assume addr:zeropage
		DEC 	bak16

		; **PASS  DEC  abx as abx

		.assume addr:absolute
		DEC 	$4365,X
		.assume addr:absolute
		DEC 	fwd16,X
		.assume addr:absolute
		DEC 	bak16,X

		; **PASS  DEC  abx as zpx

		.assume addr:zeropage
		DEC 	$4365,X
		.assume addr:zeropage
		DEC 	fwd16,X
		.assume addr:zeropage
		DEC 	bak16,X

		; **PASS  DEC  zp as ab

		.assume addr:absolute
		DEC 	$32
		.assume addr:absolute
		DEC 	bak08
		.assume addr:absolute
		DEC 	fwd08

		; **PASS  DEC  zp as zp

		.assume addr:zeropage
		DEC 	$32
		.assume addr:zeropage
		DEC 	bak08
		.assume addr:zeropage
		DEC 	fwd08

		; **PASS  DEC  zpx as abx

		.assume addr:absolute
		DEC 	$32,x
		.assume addr:absolute
		DEC 	bak08,x
		.assume addr:absolute
		DEC 	fwd08,x

		; **PASS  DEC  zpx as zpx

		.assume addr:zeropage
		DEC 	$32,x
		.assume addr:zeropage
		DEC 	bak08,x
		.assume addr:zeropage
		DEC 	fwd08,x


:	; forward ref for DEC

; -------------------------------

		; check JMP
		; 1 mnemonics with modes ['ab', 'abi']

:	; backward ref for JMP

		; **PASS  JMP  ab as ab

		.assume addr:absolute
		JMP 	$4365
		.assume addr:absolute
		JMP 	fwd16
		.assume addr:absolute
		JMP 	bak16

		; **PASS  JMP  abi as abi

		.assume addr:absolute
		JMP 	($4365)
		.assume addr:absolute
		JMP 	(fwd16)
		.assume addr:absolute
		JMP 	(bak16)


:	; forward ref for JMP

; -------------------------------

		; check JSR
		; 1 mnemonics with modes ['ab']

:	; backward ref for JSR

		; **PASS  JSR  ab as ab

		.assume addr:absolute
		JSR 	$4365
		.assume addr:absolute
		JSR 	fwd16
		.assume addr:absolute
		JSR 	bak16


:	; forward ref for JSR

; -------------------------------

		; check LDX
		; 1 mnemonics with modes ['ab', 'aby', 'imm', 'zp', 'zpy']

:	; backward ref for LDX

		; **PASS  LDX  ab as ab

		.assume addr:absolute
		LDX 	$4365
		.assume addr:absolute
		LDX 	fwd16
		.assume addr:absolute
		LDX 	bak16

		; **PASS  LDX  ab as zp

		.assume addr:zeropage
		LDX 	$4365
		.assume addr:zeropage
		LDX 	fwd16
		.assume addr:zeropage
		LDX 	bak16

		; **PASS  LDX  aby as aby

		.assume addr:absolute
		LDX 	$4365,Y
		.assume addr:absolute
		LDX 	fwd16,Y
		.assume addr:absolute
		LDX 	bak16,Y

		; **PASS  LDX  aby as zpy

		.assume addr:zeropage
		LDX 	$4365,Y
		.assume addr:zeropage
		LDX 	fwd16,Y
		.assume addr:zeropage
		LDX 	bak16,Y

; 'imm' cannot be forced

		; **PASS  LDX  zp as ab

		.assume addr:absolute
		LDX 	$32
		.assume addr:absolute
		LDX 	bak08
		.assume addr:absolute
		LDX 	fwd08

		; **PASS  LDX  zp as zp

		.assume addr:zeropage
		LDX 	$32
		.assume addr:zeropage
		LDX 	bak08
		.assume addr:zeropage
		LDX 	fwd08

		; **PASS  LDX  zpy as aby

		.assume addr:absolute
		LDX 	$32,y
		.assume addr:absolute
		LDX 	bak08,y
		.assume addr:absolute
		LDX 	fwd08,y

		; **PASS  LDX  zpy as zpy

		.assume addr:zeropage
		LDX 	$32,y
		.assume addr:zeropage
		LDX 	bak08,y
		.assume addr:zeropage
		LDX 	fwd08,y


:	; forward ref for LDX

; -------------------------------

		; check LDY
		; 1 mnemonics with modes ['ab', 'abx', 'imm', 'zp', 'zpx']

:	; backward ref for LDY

		; **PASS  LDY  ab as ab

		.assume addr:absolute
		LDY 	$4365
		.assume addr:absolute
		LDY 	fwd16
		.assume addr:absolute
		LDY 	bak16

		; **PASS  LDY  ab as zp

		.assume addr:zeropage
		LDY 	$4365
		.assume addr:zeropage
		LDY 	fwd16
		.assume addr:zeropage
		LDY 	bak16

		; **PASS  LDY  abx as abx

		.assume addr:absolute
		LDY 	$4365,X
		.assume addr:absolute
		LDY 	fwd16,X
		.assume addr:absolute
		LDY 	bak16,X

		; **PASS  LDY  abx as zpx

		.assume addr:zeropage
		LDY 	$4365,X
		.assume addr:zeropage
		LDY 	fwd16,X
		.assume addr:zeropage
		LDY 	bak16,X

; 'imm' cannot be forced

		; **PASS  LDY  zp as ab

		.assume addr:absolute
		LDY 	$32
		.assume addr:absolute
		LDY 	bak08
		.assume addr:absolute
		LDY 	fwd08

		; **PASS  LDY  zp as zp

		.assume addr:zeropage
		LDY 	$32
		.assume addr:zeropage
		LDY 	bak08
		.assume addr:zeropage
		LDY 	fwd08

		; **PASS  LDY  zpx as abx

		.assume addr:absolute
		LDY 	$32,x
		.assume addr:absolute
		LDY 	bak08,x
		.assume addr:absolute
		LDY 	fwd08,x

		; **PASS  LDY  zpx as zpx

		.assume addr:zeropage
		LDY 	$32,x
		.assume addr:zeropage
		LDY 	bak08,x
		.assume addr:zeropage
		LDY 	fwd08,x


:	; forward ref for LDY

; -------------------------------

		; check STA
		; 1 mnemonics with modes ['ab', 'abx', 'aby', 'zp', 'zpiy', 'zpx', 'zpxi']

:	; backward ref for STA

		; **PASS  STA  ab as ab

		.assume addr:absolute
		STA 	$4365
		.assume addr:absolute
		STA 	fwd16
		.assume addr:absolute
		STA 	bak16

		; **PASS  STA  ab as zp

		.assume addr:zeropage
		STA 	$4365
		.assume addr:zeropage
		STA 	fwd16
		.assume addr:zeropage
		STA 	bak16

		; **PASS  STA  abx as abx

		.assume addr:absolute
		STA 	$4365,X
		.assume addr:absolute
		STA 	fwd16,X
		.assume addr:absolute
		STA 	bak16,X

		; **PASS  STA  abx as zpx

		.assume addr:zeropage
		STA 	$4365,X
		.assume addr:zeropage
		STA 	fwd16,X
		.assume addr:zeropage
		STA 	bak16,X

		; **PASS  STA  aby as aby

		.assume addr:absolute
		STA 	$4365,Y
		.assume addr:absolute
		STA 	fwd16,Y
		.assume addr:absolute
		STA 	bak16,Y

		; **PASS  STA  zp as ab

		.assume addr:absolute
		STA 	$32
		.assume addr:absolute
		STA 	bak08
		.assume addr:absolute
		STA 	fwd08

		; **PASS  STA  zp as zp

		.assume addr:zeropage
		STA 	$32
		.assume addr:zeropage
		STA 	bak08
		.assume addr:zeropage
		STA 	fwd08

		; **PASS  STA  zpiy as zpiy

		.assume addr:zeropage
		STA 	($32),y
		.assume addr:zeropage
		STA 	(bak08),y
		.assume addr:zeropage
		STA 	(fwd08),y

		; **PASS  STA  zpx as abx

		.assume addr:absolute
		STA 	$32,x
		.assume addr:absolute
		STA 	bak08,x
		.assume addr:absolute
		STA 	fwd08,x

		; **PASS  STA  zpx as zpx

		.assume addr:zeropage
		STA 	$32,x
		.assume addr:zeropage
		STA 	bak08,x
		.assume addr:zeropage
		STA 	fwd08,x

		; **PASS  STA  zpxi as zpxi

		.assume addr:zeropage
		STA 	($32,x)
		.assume addr:zeropage
		STA 	(bak08,x)
		.assume addr:zeropage
		STA 	(fwd08,x)


:	; forward ref for STA

; -------------------------------

		; check STX
		; 1 mnemonics with modes ['ab', 'zp', 'zpy']

:	; backward ref for STX

		; **PASS  STX  ab as ab

		.assume addr:absolute
		STX 	$4365
		.assume addr:absolute
		STX 	fwd16
		.assume addr:absolute
		STX 	bak16

		; **PASS  STX  ab as zp

		.assume addr:zeropage
		STX 	$4365
		.assume addr:zeropage
		STX 	fwd16
		.assume addr:zeropage
		STX 	bak16

		; **PASS  STX  zp as ab

		.assume addr:absolute
		STX 	$32
		.assume addr:absolute
		STX 	bak08
		.assume addr:absolute
		STX 	fwd08

		; **PASS  STX  zp as zp

		.assume addr:zeropage
		STX 	$32
		.assume addr:zeropage
		STX 	bak08
		.assume addr:zeropage
		STX 	fwd08

		; **PASS  STX  zpy as zpy

		.assume addr:zeropage
		STX 	$32,y
		.assume addr:zeropage
		STX 	bak08,y
		.assume addr:zeropage
		STX 	fwd08,y


:	; forward ref for STX

; -------------------------------

		; check STY
		; 1 mnemonics with modes ['ab', 'zp', 'zpx']

:	; backward ref for STY

		; **PASS  STY  ab as ab

		.assume addr:absolute
		STY 	$4365
		.assume addr:absolute
		STY 	fwd16
		.assume addr:absolute
		STY 	bak16

		; **PASS  STY  ab as zp

		.assume addr:zeropage
		STY 	$4365
		.assume addr:zeropage
		STY 	fwd16
		.assume addr:zeropage
		STY 	bak16

		; **PASS  STY  zp as ab

		.assume addr:absolute
		STY 	$32
		.assume addr:absolute
		STY 	bak08
		.assume addr:absolute
		STY 	fwd08

		; **PASS  STY  zp as zp

		.assume addr:zeropage
		STY 	$32
		.assume addr:zeropage
		STY 	bak08
		.assume addr:zeropage
		STY 	fwd08

		; **PASS  STY  zpx as zpx

		.assume addr:zeropage
		STY 	$32,x
		.assume addr:zeropage
		STY 	bak08,x
		.assume addr:zeropage
		STY 	fwd08,x


:	; forward ref for STY

; -------------------------------

; forward reference

fwd32	.equ	$89ABCDEF
fwd24	.equ	$456789
fwd16	.equ	$1234
fwd08	.equ	$12

; -------------------------------

		.end

; -------------------------------

; 228 pass
; 0 fail
