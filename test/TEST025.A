; Hobby Cross-Assembler Test 025
; Customization\ASSUME Strings
; ok: "ASSUME" pseudo-op

; by Anton Treuenfels

; first created: 08/08/04
; last revised:  02/02/24

; no errors to detect

        .listfile
        .errfile

; -------------------------------

; no code generating psops or instructions

;        .cpu    "T_16_L"    ; un-required psop
;        .org    $1000       ; un-required psop

; -------------------------------

; the T_XX processors simply echo their ASSUME arguments to console and error file (if any)

        .echo   == One argument

        .assume "one=ok"
        .assume two=ok

        .echo   == Two arguments

        .assume "one=ok", "two=ok"
        .assume three=ok, four=ok

        .echo   == Three arguments w/ escaped newline

        # arguments to 'assume' are opt-strings
        # - which are processed twice, once for "," field split and once for "=" (or ":") field split
		# - but the "," may not be present if there is only a single field
		# - in either case, the escape character has no effect other than to "protect" the next char
        # - if they are string expressions (quoted):
        #   "," split leaves any escape chars where they are
        #   "=" split sees the result of string processing of escape codes
        # - if they are raw strings (unquoted):
        #   "," split leaves any escape chars where they are
        #   "=" split leaves any escape chars where they are

        .assume "one=ok", "two=ok\nw\/ carriage return", "three=ok"
        .assume four=ok, five=ok\nw\/ carriage return, six=ok

        .echo   == Three arguments w/ escaped space
        
        # the '\s' mnemonic escape is mapped to the space character (0x20)
		# - if it is in a string expression (quoted):
		# - this is printable escape sequence and so is *not* transformed into anything else when output
		# - in raw strings (unquoted):
        # - the "\s" pair is passed through unchanged

        .assume "one=ok", "two=ok\sw\/ escaped space", "three=ok"
        .assume four=ok, five=ok\sw\/ escaped space, six=ok

        # default message output to console and files is UTF-8
        # - non-printable characters (eg. control codes) are replaced by escape sequences

        .echo "this string contains non-ASCII characters: le petit déjuener est prêt"
        .echo où est l'hôpital plus proche

        # but we can restrict message output to console and files to ASCII
        # - all characters with code points outside of 0x20-0x7E are replaced by escape sequences

        .assume printable:ascii

        .echo "this string contains non-ASCII characters: le petit déjuener est prêt"
        .echo où est l'hôpital plus proche

        # and we can switch it back

        .assume printable:utf-8

        .echo "this string contains non-ASCII characters: le petit déjuener est prêt"
        .echo où est l'hôpital plus proche

; -------------------------------

        .end
