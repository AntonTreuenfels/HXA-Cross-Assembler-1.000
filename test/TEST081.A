; Hobby Cross-Assembler Test 081
; Expressions\Numeric Binary Operators
; ok: arithmetic, bitwise, logical

; by Anton Treuenfels

; first created: 01/02/10
; last revised:  06/01/23

; no errors to detect

        .listfile
        .errfile

; -------------------------------

        .cpu    "T_16_M"    ; required psop
        .org    $1000       ; required psop

; -------------------------------

intMin .equ    -4294967296     ;  -2^32 : actually 1 00 00 00 00
intMax .equ     4294967295     ;  2^32 - 1

; -------------------------------

; check bit patterns
; - note zero and intMin have the same 32-bit pattern

        .long   intMin
        .long   intMin+1
        .long   intMin+2

        .long   -2
        .long   -1
        .long   0
        .long   1
        .long   2

        .long   intMax-2
        .long   intMax-1
        .long   intMax

; arithmetic results

        .word   0 + 1
        .word   0 - 1
        .word   0 * 1
        .word   0 / 1
        .word   0 % 1

        .word   123 + 45        ;  168, $00A8
        .word   123 - 45        ;   78, $004E
        .word   123 * 45        ; 5535, $159F
        .word   123 / 45        ;    2, $0002
        .word   123 % 45        ;   33, $0021

        .long   0+1,0-1,0*1
        .long   0/1,0%1

        .long   123+45 ,123-45 ,123*45
        .long   123/45 , 123%45

        .long   intMin          ; -2^32    0x0001 0000 0000
        .long   intMin + 1      ; -2^32+1  0x0001 0000 0001
;        .long   intMin - 1      ; -2^32-1  out of range
        .long   intMin * 1      ; -2^32    0x0001 0000 0000
        .long   intMin / 1      ; -2^32    0x0001 0000 0000
        .long   intMin % 1      ; 0        0x0001 0000 0000

         long   intMax          ; 2^32-1    0xffff ffff
;        .long   intMax + 1      ; 2^32     out of range
        .long   intMax - 1      ; 2^32-2    0xffff fffe
        .long   intMax * 1      ; 2^32-1    0xffff ffff
        .long   intMax / 1      ; 2^32-1    0xffff ffff
        .long   intMax % 1      ; 0         0x0000 0000

; -------------------------------

; bitwise results

        .word   $00 & $01
        .word   $00 ^ $01
        .word   $00 | $01

        .word   $01 << 1
        .word   $80 >> 1
                
        .word   $a55a & $5555
        .word   $a55a ^ $5555
        .word   $a55a | $5555

        .word   $0001 << 15
        .word   $8000 >> 15

        .word   0h&1h,0h^1h,0h|1h
        .word   01h<<1, 80h>>1
        .word   0a55aH&5555H ,0a55aH^5555H ,0a55aH|5555H
        .word   0001H<<15 , 8000H>>15

        .long   1 << 07
        .long   1 << 15
        .long   1 << 23
        .long   1 << 31

        .long   $80000000 >> 07
        .long   $80000000 >> 15
        .long   $80000000 >> 23
        .long   $80000000 >> 31

; a two's complement internal representation of negative integer X
; is the bit pattern for (X - 1) with all the bits complemented
; - eg., if 4 = 0100, then -4 = (4 - 1) = 3 = 0011 = 1100

        .long   intMin >> 7
        .long   intMin >> 15
        .long   intMin >> 23
        .long   intMin >> 31

        .long  -4294967296 >> 7
        .long  -4294967296 >> 15
        .long  -4294967296 >> 23
        .long  -4294967296 >> 31

        .long   intMin & intMax
        .long   intMin & intMin

        .long   intMax & intMin
        .long   intMax & intMax

        .long   intMin | intMax
        .long   intMin | intMin

        .long   intMax | intMin
        .long   intMax | intMax

        .long   intMin ^ intMax
        .long   intMin ^ intMin

        .long   intMax ^ intMin
        .long   intMax ^ intMax

;        .long   intMin << 1     ; out of range storage
;        .long   intMin << 31    ; out of range storage

;        .long   intMax << 1     ; out of range storage
;        .long   intMax << 31    ; out of range storage

        .long   intMin >> 1
        .long   intMin >> 31

        .long   intMax >> 1
        .long   intMax >> 31

; -------------------------------

; logical results

        .byte   0 < 1
        .byte   0 > 1
        .byte   0 <= 1
        .byte   0 >= 1
        .byte   0 == 1
        .byte   0 != 1
        .byte   0 && 1
        .byte   0 || 1

        .byte   123 < 45
        .byte   123 > 45
        .byte   123 <= 45
        .byte   123 >= 45
        .byte   123 == 45
        .byte   123 != 45
        .byte   123 && 45
        .byte   123 || 45

        .byte   0<1,0>1,0<=1,0>=1
        .byte   0==1, 0!=1, 0&&1, 0||1
        .byte   123<45 ,123>45 ,123<=45 ,123>=45
        .byte   123==45 , 123!=45 , 123&&45 , 123||45

; -------------------------------

        .byte   intMin < intMin     ; $00
        .byte   intMin > intMin     ; $00
        .byte   intMin <= intMin    ; $01
        .byte   intMin >= intMin    ; $01
        .byte   intMin == intMin    ; $01
        .byte   intMin != intMin    ; $00
        .byte   intMin && intMin    ; $01
        .byte   intMin || intMin    ; $01

        .byte   intMin < intMax     ; $01
        .byte   intMin > intMax     ; $00
        .byte   intMin <= intMax    ; $01
        .byte   intMin >= intMax    ; $00
        .byte   intMin == intMax    ; $00
        .byte   intMin != intMax    ; $01
        .byte   intMin && intMax    ; $01
        .byte   intMin || intMax    ; $01

; -------------------------------

        .byte   intMax < intMin     ; $00
        .byte   intMax > intMin     ; $01
        .byte   intMax <= intMin    ; $00
        .byte   intMax >= intMin    ; $01
        .byte   intMax == intMin    ; $00
        .byte   intMax != intMin    ; $01
        .byte   intMax && intMin    ; $01
        .byte   intMax || intMin    ; $01

        .byte   intMax < intMax     ; $00
        .byte   intMax > intMax     ; $00
        .byte   intMax <= intMax    ; $01
        .byte   intMax >= intMax    ; $01
        .byte   intMax == intMax    ; $01
        .byte   intMax != intMax    ; $00
        .byte   intMax && intMax    ; $01
        .byte   intMax || intMax    ; $01

; -------------------------------

; labels - backward reference

label1  .equ    $4000
label2  .equ    $8000

        .word   label1/256
        .word   label1%256
        .word   label1&$00ff

        .word   label2 > label1
        .word   label1 < $1000

        .word   label1 - 1
        .word   label2 - label1

        .word   label2 - label1 / 256
        .word   label2 - label1 % 256
        .word   (label2 - label1) / 256
        .word   (label2 - label1) % 256

; -------------------------------

; labels - forward reference
; - also re-testing that leading "." really is optional !

        word   label3/256
        word   label3%256
        word   label3&$00ff

        word   label4 > label3
        word   label3 < $1000

        word   label3 - 1
        word   label4 - label3

        word   label4 - label3 / 256
        word   label4 - label3 % 256
        word   (label4 - label3) / 256
        word   (label4 - label3) % 256

label3  .equ    $2000
label4  .equ    $6000

; -------------------------------

; branch target references in expressions
; - note these references cannot be directly followed by an operator
; which matches the name of the reference. There must be an intervening
; character, or else the operator will be interpreted as part of the operand
; - it is always safe to surround the reference with parentheses

 -                                          ; backward branch

        .word   -
        .word   :- - 4, (:-)-2, :-, :-+2, :- + 4
        .word   +
        .word   :+ - 4, :+-2, :+, (:+)+2, :+ + 4

 +                                          ; forward branch

; alternatively the operands may be re-arranged so the reference comes last

 -                                          ; backward branch
        .word   (:-)-2, -2+:-
        .word   (:+)+2,  2+:+
 +                                          ; forward branch      

; -------------------------------

; use of parentheses to alter evaluation precedence

        .word   2 * 6 - 1 * 3               ; 09, $0009
        .word   (2) * (6) - (1) * (3)       ; 09, $0009
        .word   (2 * 6 - 1) * 3             ; 33, $0021
        .word   2 + 2 * 6 - 1 + 2 * 3       ; 19, $0013
        .word   (2 + 2) * 6 - (1 + 2) * 3   ; 15, $000F
        .word   ((2 + 2) * 6 - 1) + 2 * 3   ; 29, $001D

        .word   'A', '0', 10, 2
        .word   'A' - '0'
        .word   'A'-'0'-10
        .word   'A' - '0' * 2
        .word   ('A' - '0') * 2

; -------------------------------

; program counter

        .word   * + 3
        .word   *-2

        .word   $+$100
        .word   $ - $10

; -------------------------------

; perturbing edge values

;                ---!---!---!---!---!---!---!---!

        .long   %10000000000000000000000000000001-1
        .long   -2147483647-1
        .long   $80000001-1

        .long   %10000000000000000000000000000000+1
        .long   -2147483648+1
        .long   $80000000+1

        .long   %01111111111111111111111111111111-1
        .long   2147483647-1
        .long   $7fffffff-1

        .long   %01111111111111111111111111111110+1
        .long   2147483646+1
        .long   $7ffffffe+1

        .long   %10000000000000000000000000000001-1
        .long   2147483649-1
        .long   $80000001-1

        .long   %10000000000000000000000000000000+1
        .long   2147483648+1
        .long   $80000000+1

        .long   %11111111111111111111111111111111-1
        .long   4294967295-1
        .long   $ffffffff-1

        .long   %11111111111111111111111111111110+1
        .long   4294967294+1
        .long   $fffffffe+1

; -------------------------------

        .end
