; Hobby Cross-Assembler HXA68 Error Test 6800f
; 6800\Instruction Set
; error: Group rep instructions, all address modes

; generated by MODE68.PY - Wed Jun 12 11:53:55 2024


; warning(s):

; errors(s): 313
; - bad address mode

; fatal:

; -------------------------------

		.listfile
		.errfile

		.maxerr	10000		; increase default count

; -------------------------------

		.cpu	6800
		.org	$1000

; -------------------------------

; backward reference

bak08	.equ	$12
bak16	.equ	$1234
bak24	.equ	$456789
bak32	.equ	$89ABCDEF

; -------------------------------

		; check ABA
		; 25 mnemonics with modes ['inh']
		; CBA
		; CLC
		; CLI
		; CLV
		; DAA
		; DES
		; DEX
		; INS
		; INX
		; NOP
		; RTI
		; RTS
		; SBA
		; SEC
		; SEI
		; SEV
		; SWI
		; TAB
		; TAP
		; TBA
		; TPA
		; TSX
		; TXS
		; WAI

		ABA 			; inh

		aba 	A #$80	; dual imm
		aba 	A #bak08
		aba 	A $32	; dual dir
		aba 	A bak08
		aba 	A $D101	; dual ext
		aba 	A bak16
		aba 	A fwd16
		aba 	A X		; dual ndx
		aba 	A $89,X
		aba 	A $00AB, X
		aba 	A bak08, X
		aba 	A fwd08,X

		aba 	B #$80	; dual imm
		aba 	B #bak08
		aba 	B $32	; dual dir
		aba 	B bak08
		aba 	B $D101	; dual ext
		aba 	B bak16
		aba 	B fwd16
		aba 	B X		; dual ndx
		aba 	B $89,X
		aba 	B $00AB, X
		aba 	B bak08, X
		aba 	B fwd08,X

		aba 	#$80	; imm
		aba 	#bak08
		aba 	#fwd08

		aba 	$32		; dir
		aba 	$00EF
		aba 	bak08

		aba 	$0021	; ext
		aba 	$D101
		aba 	bak08
		aba 	bak16
		aba 	fwd16
		aba 	fwd08

		aba 	X		; ndx
		aba 	$89,X
		aba 	$00AB, X
		aba 	bak08,X
		aba 	fwd08, X

		aba 	A		; accx
		aba 	B

		aba 			; (acc -> inh)

:	; backward ref for aba

		aba 	:+	; rel
		aba 	:-

:	; forward ref for aba

		; check ADC
		; 11 mnemonics with modes ['dual']
		; ADD
		; AND
		; BIT
		; CMP
		; EOR
		; LDA
		; ORA
		; SBC
		; STA
		; SUB

		adc 			; inh

		ADC 	A #$80	; dual imm
		ADC 	A #bak08
		ADC 	A $32	; dual dir
		ADC 	A bak08
		ADC 	A $D101	; dual ext
		ADC 	A bak16
		ADC 	A fwd16
		ADC 	A X		; dual ndx
		ADC 	A $89,X
		ADC 	A $00AB, X
		ADC 	A bak08, X
		ADC 	A fwd08,X

		ADC 	B #$80	; dual imm
		ADC 	B #bak08
		ADC 	B $32	; dual dir
		ADC 	B bak08
		ADC 	B $D101	; dual ext
		ADC 	B bak16
		ADC 	B fwd16
		ADC 	B X		; dual ndx
		ADC 	B $89,X
		ADC 	B $00AB, X
		ADC 	B bak08, X
		ADC 	B fwd08,X

		adc 	#$80	; imm
		adc 	#bak08
		adc 	#fwd08

		adc 	$32		; dir
		adc 	$00EF
		adc 	bak08

		adc 	$0021	; ext
		adc 	$D101
		adc 	bak08
		adc 	bak16
		adc 	fwd16
		adc 	fwd08

		adc 	X		; ndx
		adc 	$89,X
		adc 	$00AB, X
		adc 	bak08,X
		adc 	fwd08, X

		adc 	A		; accx
		adc 	B

		adc 			; acc

:	; backward ref for adc

		adc 	:+	; rel
		adc 	:-

:	; forward ref for adc

		; check ADCA
		; 23 mnemonics with modes ['dir', 'ext', 'imm', 'ndx']
		; ADCB
		; ADDA
		; ADDB
		; ANDA
		; ANDB
		; BITA
		; BITB
		; CMPA
		; CMPB
		; CPX
		; EORA
		; EORB
		; LDAA
		; LDAB
		; LDS
		; LDX
		; ORAA
		; ORAB
		; SBCA
		; SBCB
		; SUBA
		; SUBB

		adca			; inh

		adca	A #$80	; dual imm
		adca	A #bak08
		adca	A $32	; dual dir
		adca	A bak08
		adca	A $D101	; dual ext
		adca	A bak16
		adca	A fwd16
		adca	A X		; dual ndx
		adca	A $89,X
		adca	A $00AB, X
		adca	A bak08, X
		adca	A fwd08,X

		adca	B #$80	; dual imm
		adca	B #bak08
		adca	B $32	; dual dir
		adca	B bak08
		adca	B $D101	; dual ext
		adca	B bak16
		adca	B fwd16
		adca	B X		; dual ndx
		adca	B $89,X
		adca	B $00AB, X
		adca	B bak08, X
		adca	B fwd08,X

		ADCA	#$80	; imm
		ADCA	#bak08
		ADCA	#fwd08

		ADCA	$32		; dir
		ADCA	$00EF
		ADCA	bak08

		ADCA	$0021	; (ext -> dir)
		ADCA	$D101	; ext
		ADCA	bak08	; (ext -> dir)
		ADCA	bak16	; ext
		ADCA	fwd16
		ADCA	fwd08

		ADCA	X		; ndx
		ADCA	$89,X
		ADCA	$00AB, X
		ADCA	bak08,X
		ADCA	fwd08, X

		adca	A		; accx
		adca	B

		adca			; acc

:	; backward ref for adca

		adca	fwd24	; (rel -> dir/ext)
		adca	bak24

:	; forward ref for adca

		; check ASL
		; 11 mnemonics with modes ['accx', 'ext', 'ndx']
		; ASR
		; CLR
		; COM
		; DEC
		; INC
		; LSR
		; NEG
		; ROL
		; ROR
		; TST

		asl 			; inh

		asl 	A #$80	; dual imm
		asl 	A #bak08
		asl 	A $32	; dual dir
		asl 	A bak08
		asl 	A $D101	; dual ext
		asl 	A bak16
		asl 	A fwd16
		asl 	A X		; dual ndx
		asl 	A $89,X
		asl 	A $00AB, X
		asl 	A bak08, X
		asl 	A fwd08,X

		asl 	B #$80	; dual imm
		asl 	B #bak08
		asl 	B $32	; dual dir
		asl 	B bak08
		asl 	B $D101	; dual ext
		asl 	B bak16
		asl 	B fwd16
		asl 	B X		; dual ndx
		asl 	B $89,X
		asl 	B $00AB, X
		asl 	B bak08, X
		asl 	B fwd08,X

		asl 	#$80	; imm
		asl 	#bak08
		asl 	#fwd08

		asl 	$32		; (dir -> ext)
		asl 	$00EF
		asl 	bak08

		ASL 	$0021	; ext
		ASL 	$D101
		ASL 	bak08
		ASL 	bak16
		ASL 	fwd16
		ASL 	fwd08

		ASL 	X		; ndx
		ASL 	$89,X
		ASL 	$00AB, X
		ASL 	bak08,X
		ASL 	fwd08, X

		ASL 	A		; accx
		ASL 	B

		asl 			; acc

:	; backward ref for asl

		asl 	fwd24	; (rel -> dir/ext)
		asl 	bak24

:	; forward ref for asl

		; check ASLA
		; 26 mnemonics with modes ['acc']
		; ASLB
		; ASRA
		; ASRB
		; CLRA
		; CLRB
		; COMA
		; COMB
		; DECA
		; DECB
		; INCA
		; INCB
		; LSRA
		; LSRB
		; NEGA
		; NEGB
		; PSHA
		; PSHB
		; PULA
		; PULB
		; ROLA
		; ROLB
		; RORA
		; RORB
		; TSTA
		; TSTB

		asla			; (inh -> acc)

		asla	A #$80	; dual imm
		asla	A #bak08
		asla	A $32	; dual dir
		asla	A bak08
		asla	A $D101	; dual ext
		asla	A bak16
		asla	A fwd16
		asla	A X		; dual ndx
		asla	A $89,X
		asla	A $00AB, X
		asla	A bak08, X
		asla	A fwd08,X

		asla	B #$80	; dual imm
		asla	B #bak08
		asla	B $32	; dual dir
		asla	B bak08
		asla	B $D101	; dual ext
		asla	B bak16
		asla	B fwd16
		asla	B X		; dual ndx
		asla	B $89,X
		asla	B $00AB, X
		asla	B bak08, X
		asla	B fwd08,X

		asla	#$80	; imm
		asla	#bak08
		asla	#fwd08

		asla	$32		; dir
		asla	$00EF
		asla	bak08

		asla	$0021	; ext
		asla	$D101
		asla	bak08
		asla	bak16
		asla	fwd16
		asla	fwd08

		asla	X		; ndx
		asla	$89,X
		asla	$00AB, X
		asla	bak08,X
		asla	fwd08, X

		asla	A		; accx
		asla	B

		ASLA			; acc

:	; backward ref for asla

		asla	:+	; rel
		asla	:-

:	; forward ref for asla

		; check BCC
		; 16 mnemonics with modes ['rel']
		; BCS
		; BEQ
		; BGE
		; BGT
		; BHI
		; BLE
		; BLS
		; BLT
		; BMI
		; BNE
		; BPL
		; BRA
		; BSR
		; BVC
		; BVS

		bcc 			; inh

		bcc 	A #$80	; dual imm
		bcc 	A #bak08
		bcc 	A $32	; dual dir
		bcc 	A bak08
		bcc 	A $D101	; dual ext
		bcc 	A bak16
		bcc 	A fwd16
		bcc 	A X		; dual ndx
		bcc 	A $89,X
		bcc 	A $00AB, X
		bcc 	A bak08, X
		bcc 	A fwd08,X

		bcc 	B #$80	; dual imm
		bcc 	B #bak08
		bcc 	B $32	; dual dir
		bcc 	B bak08
		bcc 	B $D101	; dual ext
		bcc 	B bak16
		bcc 	B fwd16
		bcc 	B X		; dual ndx
		bcc 	B $89,X
		bcc 	B $00AB, X
		bcc 	B bak08, X
		bcc 	B fwd08,X

		bcc 	#$80	; imm
		bcc 	#bak08
		bcc 	#fwd08

		bcc 	$32		; (dir -> rel)
		bcc 	$00EF
		bcc 	bak08

		bcc 	$0021	; (ext -> rel)
		bcc 	$D101
		bcc 	bak08
		bcc 	bak16
		bcc 	fwd16
		bcc 	fwd08

		bcc 	X		; ndx
		bcc 	$89,X
		bcc 	$00AB, X
		bcc 	bak08,X
		bcc 	fwd08, X

		bcc 	A		; accx
		bcc 	B

		bcc 			; acc

:	; backward ref for BCC

		BCC 	:+	; rel
		BCC 	:-

:	; forward ref for BCC

		; check JMP
		; 2 mnemonics with modes ['ext', 'ndx']
		; JSR

		jmp 			; inh

		jmp 	A #$80	; dual imm
		jmp 	A #bak08
		jmp 	A $32	; dual dir
		jmp 	A bak08
		jmp 	A $D101	; dual ext
		jmp 	A bak16
		jmp 	A fwd16
		jmp 	A X		; dual ndx
		jmp 	A $89,X
		jmp 	A $00AB, X
		jmp 	A bak08, X
		jmp 	A fwd08,X

		jmp 	B #$80	; dual imm
		jmp 	B #bak08
		jmp 	B $32	; dual dir
		jmp 	B bak08
		jmp 	B $D101	; dual ext
		jmp 	B bak16
		jmp 	B fwd16
		jmp 	B X		; dual ndx
		jmp 	B $89,X
		jmp 	B $00AB, X
		jmp 	B bak08, X
		jmp 	B fwd08,X

		jmp 	#$80	; imm
		jmp 	#bak08
		jmp 	#fwd08

		jmp 	$32		; (dir -> ext)
		jmp 	$00EF
		jmp 	bak08

		JMP 	$0021	; ext
		JMP 	$D101
		JMP 	bak08
		JMP 	bak16
		JMP 	fwd16
		JMP 	fwd08

		JMP 	X		; ndx
		JMP 	$89,X
		JMP 	$00AB, X
		JMP 	bak08,X
		JMP 	fwd08, X

		jmp 	A		; accx
		jmp 	B

		jmp 			; acc

:	; backward ref for jmp

		jmp 	fwd24	; (rel -> dir/ext)
		jmp 	bak24

:	; forward ref for jmp

		; check PSH
		; 2 mnemonics with modes ['accx']
		; PUL

		psh 			; inh

		psh 	A #$80	; dual imm
		psh 	A #bak08
		psh 	A $32	; dual dir
		psh 	A bak08
		psh 	A $D101	; dual ext
		psh 	A bak16
		psh 	A fwd16
		psh 	A X		; dual ndx
		psh 	A $89,X
		psh 	A $00AB, X
		psh 	A bak08, X
		psh 	A fwd08,X

		psh 	B #$80	; dual imm
		psh 	B #bak08
		psh 	B $32	; dual dir
		psh 	B bak08
		psh 	B $D101	; dual ext
		psh 	B bak16
		psh 	B fwd16
		psh 	B X		; dual ndx
		psh 	B $89,X
		psh 	B $00AB, X
		psh 	B bak08, X
		psh 	B fwd08,X

		psh 	#$80	; imm
		psh 	#bak08
		psh 	#fwd08

		psh 	$32		; dir
		psh 	$00EF
		psh 	bak08

		psh 	$0021	; ext
		psh 	$D101
		psh 	bak08
		psh 	bak16
		psh 	fwd16
		psh 	fwd08

		psh 	X		; ndx
		psh 	$89,X
		psh 	$00AB, X
		psh 	bak08,X
		psh 	fwd08, X

		PSH 	A		; accx
		PSH 	B

		psh 			; acc

:	; backward ref for psh

		psh 	:+	; rel
		psh 	:-

:	; forward ref for psh

		; check STAA
		; 4 mnemonics with modes ['dir', 'ext', 'ndx']
		; STAB
		; STS
		; STX

		staa			; inh

		staa	A #$80	; dual imm
		staa	A #bak08
		staa	A $32	; dual dir
		staa	A bak08
		staa	A $D101	; dual ext
		staa	A bak16
		staa	A fwd16
		staa	A X		; dual ndx
		staa	A $89,X
		staa	A $00AB, X
		staa	A bak08, X
		staa	A fwd08,X

		staa	B #$80	; dual imm
		staa	B #bak08
		staa	B $32	; dual dir
		staa	B bak08
		staa	B $D101	; dual ext
		staa	B bak16
		staa	B fwd16
		staa	B X		; dual ndx
		staa	B $89,X
		staa	B $00AB, X
		staa	B bak08, X
		staa	B fwd08,X

		staa	#$80	; imm
		staa	#bak08
		staa	#fwd08

		STAA	$32		; dir
		STAA	$00EF
		STAA	bak08

		STAA	$0021	; (ext -> dir)
		STAA	$D101	; ext
		STAA	bak08	; (ext -> dir)
		STAA	bak16	; ext
		STAA	fwd16
		STAA	fwd08

		STAA	X		; ndx
		STAA	$89,X
		STAA	$00AB, X
		STAA	bak08,X
		STAA	fwd08, X

		staa	A		; accx
		staa	B

		staa			; acc

:	; backward ref for staa

		staa	fwd24	; (rel -> dir/ext)
		staa	bak24

:	; forward ref for staa


; -------------------------------

; forward reference

fwd32	.equ	$89ABCDEF
fwd24	.equ	$456789
fwd16	.equ	$1234
fwd08	.equ	$12

; -------------------------------

		.end

; -------------------------------

; 110 pass
; 313 fail
